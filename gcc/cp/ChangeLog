2009-01-27  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37554
	* call.c (build_over_call): If convert_for_arg_passing returns
	error_mark_node unconditionally return it.

2009-01-22  Adam Nemet  <anemet@caviumnetworks.com>

	* class.c (check_field_decls): Also inherit packed for bitfields
	regardless of their type.

2009-01-22  Dodji Seketeli  <dodji@redhat.com>

	PR c++/38930
	* decl2.c (grokfield): Reverting changes of PR c++/26693
	(save_template_attributes): Likewise.
	* decl.c (grokdeclarator): Likewise.
	* name-lookup.c (pushdecl_maybe_friend): Likewise.
	* cp-tree.h (MEMBER_TYPES_NEEDING_ACCESS_CHECK): Likewise.
	(append_type_to_template_for_access_check): Likewise.
	* semantics.c (check_accessibility_of_qualified_id): Likewise.
	* pt.c (instantiate_class_template, instantiate_template ): Likewise.
	(tsubst): Likewise.
	(resolve_type_name_type): Likewise.
	(append_type_to_template_for_access_check): Likewise.

2009-01-21  Dodji Seketeli  <dodji@redhat.com>

	PR c++/26693
	* decl2.c (grokfield): when a typedef appears in a
	class, create the typedef variant type node for it.
	(save_template_attributes): Creating typedef variant type node
	 here is now useless.
	* decl.c (grokdeclarator): If the typedef'ed struct/class was
	anonymous, set the proper type name to all its type variants.
	* name-lookup.c (pushdecl_maybe_friend): Reuse the
	set_underlying_type function to install typedef variant types.
	* cp-tree.h (MEMBER_TYPES_NEEDING_ACCESS_CHECK): New template accessor
	macro.
	(append_type_to_template_for_access_check): New entry points.
	* semantics.c (check_accessibility_of_qualified_id):
	When a typedef that is a member of a class appears in a template,
	add it to the template. It will be ...
	* pt.c (instantiate_class_template, instantiate_template ): ... access
	checked at template instantiation time.
	(tsubst): Handle the case of being called with NULL args.
	(resolve_type_name_type): The type name should be the name of the
	main type variant.
	(append_type_to_template_for_access_check): New entry point.

2009-01-19  Jason Merrill  <jason@redhat.com>

	PR c++/23287
	* parser.c (cp_parser_unqualified_id): In a template,
	accept ~identifier.
	* typeck.c (lookup_destructor): Handle IDENTIFIER_NODE.

2009-01-16  Jason Merrill  <jason@redhat.com>

	PR c++/38877
	* tree.c (lvalue_p_1): Allow non-fields in COMPONENT_REF.
	* init.c (build_new): Don't call describable_type unless we
	have an auto.

	PR c++/29470
	* pt.c (tsubst_decl) [USING_DECL]: Propagate access flags.

	PR c++/38579
	* search.c (protected_accessible_p): N doesn't vary.

2009-01-15  Jason Merrill  <jason@redhat.com>

	PR c++/38850
	* pt.c (tsubst_copy_and_build): Tell finish_call_expr to
	accept hidden friends.

2009-01-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR C++/29388
	* decl.c (grokdeclarator): Check for a non namespace/class context.

2009-01-15  Jason Merrill  <jason@redhat.com>

	PR c++/36334
	PR c++/37646
	* tree.c (lvalue_p_1): Handle BASELINK.  A COMPONENT_REF to
	a function isn't necessarily an lvalue. Take tree, not const_tree.
	(lvalue_p, real_lvalue_p): Take tree, not const_tree.
	* typeck.c (lvalue_or_else): Likewise.
	* cp-tree.h: Adjust prototypes.

2009-01-15  Steve Ellcey  <sje@cup.hp.com>

	PR c++/38357
	* pt.c (tsubst): Check for NULL args.

2009-01-15  Dodji Seketeli  <dodji@redhat.com>

	PR c++/38636
	* name-lookup.c (pushtag): Don't create members to types that are not
	being created.

2009-01-14  Nick Clifton  <nickc@redhat.com>

	PR c++/37862
	* parser.c: Pass cp_id_kind computed in
	cp_parser_postfix_dot_deref_expression to
	cp_parser_primary_expression.

2009-01-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38795
	* tree.c (cp_walk_subtrees): Handle REINTERPRET_CAST_EXPR,
	STATIC_CAST_EXPR, CONST_CAST_EXPR and DYNAMIC_CAST_EXPR the same
	as CAST_EXPR.

2009-01-12  Jason Merrill  <jason@redhat.com>
	    Steve Ellcey  <sje@cup.hp.com>

	PR c++/35109
	* name-lookup.c (lookup_name_real): Keep looking past a hidden 
	binding.

2009-01-12  Dodji Seketeli  <dodji@redhat.com>

	PR c++/36019
	* pt.c (parameter_of_template_p): New function.
	* cp-tree.h: Declare it.
	* name-lookup.c (binding_to_template_parms_of_scope_p): New
	function.
	(outer_binding): Take template parameters in account when looking for
	a name binding.

2009-01-12  Jason Merrill  <jason@redhat.com>

	PR c++/31488
	* tree.c (pod_type_p): Return 1 for structs created by the back end.

2009-01-12  Jakub Jelinek  <jakub@redhat.com>

	PR c/32041
	* parser.c (cp_parser_builtin_offsetof): Allow `->' in
	offsetof member-designator, handle it as `[0].'.

	PR c++/38794
	* decl.c (start_function): If grokdeclarator hasn't returned
	FUNCTION_DECL nor error_mark_node, issue diagnostics.

2009-01-11  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36254
	* cp-gimplify.c (genericize_if_stmt): Renamed from ...
	(gimplify_if_stmt): ... this.
	(cp_gimplify_expr): Don't handle IF_STMT here.
	(cp_genericize_r): Call genericize_if_stmt for IF_STMT.

2009-01-10  Andrew Pinski  <pinskia@gmail.com>

	PR c++/38648
	* typeck.c (cp_build_modify_expr): Check for NULL current_function_decl.

	PR c++/36695
	* typeck2.c (build_functional_cast): Check for reference type and NULL
	PARMS.

2009-01-09  Steve Ellcey  <sje@cup.hp.com>

	* typeck.c (cp_build_unary_op): Check for ERROR_MARK.

2009-01-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35335
	* error.c (dump_expr): Handle EXPR_STMT like BIND_EXPR.

2009-01-09  John F. Carr  <jfc@mit.edu>

	PR c++/37877
	* parser.c (cp_parser_class_specifier): Clear
	parser->in_unbraced_linkage_specification_p while parsing class
	specifiers.

2009-01-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38725
	* semantics.c (finish_goto_stmt): Convert destination to
	void *.

2009-01-06  Jason Merrill  <jason@redhat.com>

	PR c++/35297
	PR c++/35477
	PR c++/35784
	PR c++/36846
	PR c++/38276
	* pt.c (check_default_tmpl_args): Don't complain about
	out-of-order parameter packs in the enclosing class
	or parameter packs after default args.
	(coerce_template_parms): If we have more than one
	parameter pack, don't flatten argument packs.
	(template_args_equal): Handle argument packs.
	(comp_template_args): Don't flatten argument packs.
	(check_instantiated_arg): Split out from...
	(check_instantiated_args): Here.  Handle arg packs.
	(convert_template_argument): Just check that nontype argument
	packs have the right type.

2009-01-05  Dodji Seketeli  <dodji@redhat.com>

	PR c++/38472
	* typeck.c (type_after_usual_arithmetic_conversions): Fix a typo.

2009-01-05  Jason Merrill  <jason@redhat.com>

	PR c++/38698
	* typeck2.c (process_init_constructor_union): Handle union with
	no fields.

	* mangle.c (write_expression): Remove mangling for zero-operand
	casts.

	PR c++/38701
	* decl.c (cp_finish_decl): Clear DECL_INITIAL for invalid
	defaulting.

	PR c++/38702
	* class.c (defaultable_fn_p): Only operator== can be a copy
	assignment operator.

2009-01-02  Jason Merrill  <jason@redhat.com>

	PR c++/38698
	* typeck2.c (process_init_constructor_union): Handle excess
	initializers.
	(process_init_constructor_record): Likewise.

	PR c++/38684
	* typeck2.c (digest_init_r): Don't use process_init_constructor
	for non-aggregate classes.

2008-12-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38647
	* parser.c (cp_parser_primary_expression) <case RID_FUNCTION_NAME>:
	Return error_mark_node if cp_parser_non_integral_constant_expression
	returns true.

	PR c++/38640
	* semantics.c (finish_decltype_type): Handle TEMPLATE_PARM_INDEX.

2008-12-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38635
	* parser.c (cp_parser_condition): Use cp_parser_require
	instead of cp_lexer_consume_token to consume =.

	PR c++/38637
	* decl.c (start_enum): If enumtype is error_mark_node, exit early.

2008-12-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38650
	* semantics.c (finish_omp_for): Don't add CLEANUP_POINT_EXPR
	around volatile iteration var in condition and/or increment
	expression.

2008-12-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38639
	* pt.c (tsubst_omp_for_iterator): RECUR on whole init_expr instead of
	just its type.

2008-12-21  Jason Merrill  <jason@redhat.com>

	PR c++/38597
	* name-lookup.c (arg_assoc_type): Handle DECLTYPE_TYPE.

2008-12-20  Jakub Jelinek  <jakub@redhat.com>
	    Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/36921
	* c-common.c (warn_about_parentheses): Remove ARG_UNUSED from
	arg_left.  Don't warn about X<=Y<=Z if comparison's type isn't
	integral.

2008-12-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38577
	* call.c (build_new_method_call): Handle call being COMPOUND_EXPR
	or NOP_EXPR.

2008-12-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38427
	* init.c (perform_member_init): For value-initialized
	references call permerror instead of warning and don't emit any
	INIT_EXPR.

2008-12-18  Jason Merrill  <jason@redhat.com>

	PR c++/38485
	* parser.c (cp_parser_token_starts_cast_expression): An EOF
	can't start a cast-expression.

2008-12-17  Jason Merrill  <jason@redhat.com>

	* semantics.c (describable_type): New function.
	(finish_decltype_type): Use it for dependent exprs.
	* cp-tree.h: Declare it.
	* mangle.c (write_type) [DECLTYPE_TYPE]: Set skip_evaluation.
	(write_expression): If skip_evaluation, use type stubs.
	* tree.c (cp_tree_equal): Handle PARM_DECLs from different
	declarations of a function.
	* init.c (build_new): Do auto deduction if type is describable.
	* decl.c (cp_finish_decl): Likewise.
	* parser.c (cp_parser_omp_for_loop): Likewise.

2008-12-10  Jason Merrill  <jason@redhat.com>

	PR c++/35319
	* mangle.c (write_builtin_type): Add mangling for decimal floating 
	point and fixed point types.
	(write_type): Pass FIXED_POINT_TYPE along.

2008-12-09  Mark Mitchell  <mark@codesourcery.com>

	PR c++/37971
	* class.c (resolve_address_of_overloaded_function): Check
	accessibility of member functions unless FLAGS indicates
	otherwise.
	* call.c (standard_conversion): Adjust flags passed to
	instantiate_type.
	(convert_default_arg): Do not perform access checks.
	* cp-tree.h (tsubst_flags_t): Add tf_no_access_control.

2008-12-08  Steve Ellcey  <sje@cup.hp.com>

	* decl2.c (mark_used): Remove assemble_external call.

2008-12-08  Dodji Seketeli  <dodji@redhat.com>

	PR debug/38390
	* name-lookup.c (kept_level_p): Don't forget the case of levels
	  having using directives.

2008-12-08  Richard Henderson  <rth@redhat.com>

	PR 38240
	* class.c (finish_struct_bits): Use SET_TYPE_MODE.
	* decl.c (record_unknown_type): Likewise.
	(start_enum, finish_enum): Likewise.

2008-12-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35336
	* error.c (dump_expr): Handle BIT_FIELD_REF.

2008-12-05  Sebastian Pop  <sebastian.pop@amd.com>

	PR bootstrap/38262
	* Make-lang.in (cc1plus-dummy, cc1plus): Add BACKENDLIBS,
	remove GMPLIBS.

2008-12-04  Jason Merrill  <jason@redhat.com>

	PR c++/37906
	* decl.c (grok_special_member_properties): Set TYPE_HAS_COMPLEX_DFLT
	here.
	* class.c (check_bases_and_members): Rather than assuming any
	user-declared default constructor is complex here.

2008-12-04  Richard Guenther  <rguenther@suse.de>

	PR c++/38334
	* typeck.c (get_member_function_from_ptrfunc): Mark the vtbl
	pointer access with TREE_NO_WARNING.

2008-12-03  Jason Merrill  <jason@redhat.com>

	PR c++/38232
	* init.c (build_value_init): Do initial zero-initialization
	of a class with an implicitly-defined constructor using
	build_zero_init rather than in build_value_init.
	(build_value_init_1): Fold into build_value_init.

	PR c++/38256
	* parser.c (cp_parser_conversion_type_id): Diagnose
	'operator auto'	here.
	* decl.c (grokdeclarator): Not here.

	PR c++/38380
	* decl.c (grokdeclarator): Only set DECL_NONCONVERTING_P
	on explicit constructors.
	* pt.c (tsubst_copy_and_build) [CONSTRUCTOR]: Propagate
	CONSTRUCTOR_IS_DIRECT_INIT.

2008-12-02  Jason Merrill  <jason@redhat.com>

	PR c++/35782, c++/37860
	* call.c (build_user_type_conversion_1): Remember
	list-initialization.
	(convert_like_real): Likewise.
	(build_over_call): Don't require the copy constructor
	for copy-list-initialization.
	* cp-tree.h (TARGET_EXPR_LIST_INIT_P): New macro.

	PR c++/37234
	* decl.c (cp_finish_decl): Handle =default and =delete for
	templates, too.

2008-12-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38257
	* parser.c (cp_parser_omp_for_loop): Handle auto.
	* pt.c (tsubst_omp_for_iterator): Likewise.

2008-11-28  Jason Merrill  <jason@redhat.com>

	PR c++/38233
	* init.c (perform_member_init): Fix value-initialization.
	(build_value_init_1): Add assert to catch cases that will break
	in the gimplifier.
	(build_default_init): Remove.
	* cp-tree.h: Remove its prototype.
	* pt.c (tsubst_expr) [DECL_EXPR]: Use build_value_init for
	value-initialization.

	PR c++/38278
	* parser.c (cp_parser_class_name): Only call 
	maybe_note_name_used_in_class if we actually found a class name.

2008-11-25  Jason Merrill  <jason@redhat.com>

	PR c++/28743
	* decl2.c (check_classfn): Error rather than abort on parameter
	list mismatch.

2008-11-20  Jason Merrill  <jason@redhat.com>

	PR c++/28513
	* parser.c (cp_parser_class_name): Call maybe_note_name_used_in_class.

	PR c++/37540
	* call.c (build_over_call): Take the address of the function even
	in a template.
	(build_new_method_call): Remember the type of the called function
	in a template.

2008-11-19  Dodji Seketeli  <dodji@redhat.com>

	PR c++/37142
	* pt.c (coerce_template_template_parm): Use the more robust
	uses_template_parms instead of dependent_type_p.

2008-11-19  Dodji Seketeli  <dodji@redhat.com>

	PR c++/35405
	* pt.c (lookup_template_class): Check pointers before dereferencing
	them.
	* error.c (dump_template_decl): Likewise.

2008-11-19  Jason Merrill  <jason@redhat.com>

	PR c++/36410
	* decl2.c (grokfield): Pass ATTR_FLAG_TYPE_IN_PLACE for a typedef
	that names a class for linkage purposes.

	PR c++/37563
	* parser.c (cp_parser_pseudo_destructor_name): A pseudo-destructor
	name is not a declaration.

	PR c++/37256
	* pt.c (instantiate_decl): Don't require a definition of
	a template that is explicitly instantiated 'extern'.

2008-11-18  Jason Merrill  <jason@redhat.com>
	    Jakub Jelinek  <jakub@redhat.com>
	
	PR c++/37962
	* parser.c (cp_parser_type_id): Complain about auto.
	* decl.c (grokdeclarator): Complain about parameters and
	conversion functions declared with auto.

	* call.c (standard_conversion): Use CLASS_TYPE_P instead of
	MAYBE_CLASS_TYPE_P.
	* cp-tree.h (TYPE_NON_AGGREGATE_CLASS): Likewise.

2008-11-17  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36089
	* init.c (constant_value_1): Handle TREE_LIST init.

2008-11-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37561
	* typeck.c (cp_build_unary_op): Don't call get_unwidened.  Use
	argtype instead of result_type.

2008-11-14  Jason Merrill  <jason@redhat.com>

	PR c++/38030
	* semantics.c (finish_call_expr): Don't repeat arg-dep lookup
	for a non-dependent call.

	PR c++/37740
	* call.c (build_aggr_conv): Increment i.

2008-11-13  Jason Merrill  <jason@redhat.com>

	PR c++/37932
	* typeck2.c (process_init_constructor_record): Update bitfield
	handling.
	(check_narrowing): Update bitfield handling, print source type.
	
2008-11-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36478
	Revert:
	2007-05-07  Mike Stump  <mrs@apple.com>
	* parser.c (check_empty_body): Add.
	(cp_parser_iteration_statement): Add call to check_empty_body.

2008-11-12  Jason Merrill  <jason@redhat.com>

	PR c++/38007
	* typeck.c (cp_build_modify_expr): Update bitfield handling.

2008-11-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34269
	* parser.c (cp_parser_simple_declaration): Don't commit
	to tentative parse if parse errors were seen.

	PR c++/35334
	* error.c (dump_expr): Handle COMPLEX_EXPR.

2008-11-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/38021
	* parser.c (cp_parser_enum_specifier): After parsing :,
	parse definitely.  Don't return early if type specifier
	is erroneous.

2008-11-06  David Edelsohn  <edelsohn@gnu.org>

	PR target/26397
	* g++spec.c (LIBSTDCXX_STATIC): New.
	(lang_spec_driver): Use LIBSTDCXX_STATIC when not
	shared_libgcc.
	
2008-11-05  Fabien Chene <fabien.chene@gmail.com>

	PR c++/32519
	* cp-tree.h: Fix DECL_NONSTATIC_MEMBER_P to handle member template
	functions.

2008-11-05  Richard Guenther  <rguenther@suse.de>

	PR middle-end/37742
	* decl.c (start_preparsed_function): Use the correct type for
	building the RESULT_DECL.

2008-10-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37967
	* decl.c (grokdeclarator): Diagnose auto function decl without
	late return type and late return type function decl where type
	is not auto.

	PR c++/37965
	* decl.c (cp_finish_decl): Diagnose type_uses_auto type with
	no initializer.

2008-10-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 11492
	* class.c (check_bitfield_decl): Rename min_precision to
	tree_int_cst_min_precision.
	* decl.c (finish_enum): Likewise.

2008-10-29  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/26997
	* parser.c (cp_parser_token_starts_cast_expression): New.
	(cp_parser_cast_expression): Peek the next token to decide whether
	this could be a parenthesized constructor or is definitely an
	actual cast.

2008-10-24  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c/7543
	* typeck.c (build_x_binary_op): Update call to
	warn_about_parentheses.
	* parser.c (cp_parser_binary_expression): Add note about passing
	the correct code for unary expressions.

2008-10-24  Jakub Jelinek  <jakub@redhat.com>

	* Make-lang.in (check-c++-subtargets): New alias for
	check-g++-subtargets.
	(lang_checks_parallelized): Add check-g++.
	(check_g++_parallelize): New variable.

2008-10-21  Richard Guenther  <rguenther@suse.de>

	* semantics.c (simplify_aggr_init_exprs_r): Remove.
	(expand_or_defer_fn): Do not walk the function body to
	simplify aggr_init_exprs.

2008-10-20  Manuel López-Ibáñez  <manu@gcc.gnu.org>

	PR c++/37004
	* typeck.c (cp_common_type): New. The same as
	type_after_usual_arithmetic_conversions but without promotions.
	(type_after_usual_arithmetic_conversions): Do the promotions and
	call cp_common_type.
	(common_type): Make it behave like the C version of this
	function. Do not handle pointer types.
	(common_pointer_type): Move handling of pointer types from
	common_type to here.
	(cp_build_binary_op): Use common_pointer_type instead of
	common_type in call to pointer_diff.
	Use cp_common_type instead of common_type.
	* cp-tree.h (common_pointer_type): Declare.

2008-10-14  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37819
	* cp-gimplify.c (cp_genericize_r): Only fold_convert COND_EXPR
	arguments if they don't already have COND_EXPR's type.

2008-10-14  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37650
	* pt.c (push_template_decl_real): Check that current_template_parms
	is not null.
	(process_partial_specialization): Assert current_template_parms not
	null.

2008-10-13  Doug Evans  <dje@google.com>

	* cp-tree.h (DECL_MAIN_P): Fix parentheses around expression.

2008-10-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37146
	* cp-gimplify.c (cp_genericize_r): Fix up bitfield operands of
	COND_EXPR.

2008-10-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37568
	* semantics.c (finalize_nrv_r): Clear DECL_INITIAL instead of
	setting it to error_mark_node.

2008-10-07  Steve Ellcey  <sje@cup.hp.com>

	* decl.c (start_cleanup_fn): Declare as inline.

2008-10-06  Jason Merrill  <jason@redhat.com>

	PR c++/37376, other mangling issues
	* mangle.c (write_type): Update TYPE_PACK_EXPANSION mangling.
	(write_member_name): Break out from...
	(write_expression): ...here.  Handle dependent COMPONENT_REF.
	(write_template_arg): Wrap an argument pack in 'I'/'E'.
	(write_builtin_type): Update char16/32_t mangling.
	(write_nested_name, write_prefix): Don't forget template args
	for typename types.
	* operators.def: Add ARROW_EXPR, update COMPONENT_REF and 
	EXPR_PACK_EXPANSION.

2008-10-06  Aldy Hernandez  <aldyh@redhat.com>

	* typeck.c (build_x_indirect_ref): Add location argument.
	(cp_build_binary_op): Pass location to warn_for_div_by_zero.
	(cp_build_unary_op): Add location argument.
	(cp_build_modify_expr): Same.
	* class.c (build_base_path): Pass location to build_indirect_ref.
	* semantics.c (handle_omp_for_class_iterator): Pass elocus to
	build_modify_expr.

2008-10-05  Dodji Seketeli  <dodji@redhat.com>

	PR c++/37410
	* cp-gimplify.c (cp_gimplify_expr): For each USING_STMT
	make sure an IMPORTED_DECL node is added to the BLOCK_VARS list
	of the innermost containing BLOCK.

2008-10-03  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37719
	* error.c (dump_function_decl): Save the exceptions in case of
	error about incompatible specifications in a specialization.

2008-10-01  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	* tree.c (lvalue_p_1): COMPOUND_LITERAL_EXPR is also an lvalue.

2008-09-30  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/37683
	* parser.c (cp_parser_selection_statement): Fix uninitialized
	variable.

2008-09-30  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/37555
	PR c++/37556
	* decl.c (grokdeclarator): Set the type for typedefs to a
	nested-name-specifier to error_mark_node.

2008-09-30  Paolo Bonzini  <bonzini@gnu.org>

	* parser.c (cp_parser_selection_statement): Implement here the
	-Wempty-body warning for `if' and `else' statements.
	* semantics.c (finish_if_stmt): Do not call empty_body_warning.

2008-09-25  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37649
	* name-lookup.c (maybe_process_template_type_declaration): Check
	return value of push_template_decl_real for error_mark_node.

2008-09-24  Aldy Hernandez  <aldyh@redhat.com>

	* semantics.c (finish_fname): Pass location to fname_decl.

2008-09-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37533
	* semantics.c (finish_omp_for): If processing_template_decl, just build
	MODIFY_EXPR for init instead of calling cp_build_modify_expr.

2008-09-23  Aldy Hernandez  <aldyh@redhat.com>

	* typeck.c (build_array_ref): Pass location to cp_build_binary_op.
	(get_member_function_from_ptrfunc): Same.
	(build_x_binary_op): Same.
	(build_binary_op): Same.
	(cp_build_binary_op): New location argument.
	(pointer_diff): Pass location to cp_build_binary_op.
	(cp_truthvalue_conversion): Pass location to build_binary_op.
	(convert_ptrmem): Pass location to cp_build_binary_op.
	(cp_build_modify_expr): Same.
	(build_ptrmemfunc): Same.
	* init.c (expand_cleanup_for_base): Pass location to
	c_common_truthvalue_conversion.
	(build_new_1): Pass location to cp_build_binary_op.
	(build_vec_delete_1): Pass location to *build_binary_op,
	c_common_truthvalue_conversion.
	(build_vec_init): Same.
	(build_delete): Same.
	* decl.c (compute_array_index_type): Same.
	* call.c (build_new_op): Same.
	* rtti.c (build_dynamic_cast_1): Same.
	* cp-tree.h: Add argument to cp_build_binary_op.
	* semantics.c (handle_omp_for_class_iterator): Pass location to
	*build_binary_op, c_common_truthvalue_conversion.
	* decl2.c (get_guard_cond): Same.

2008-09-17  Richard Guenther  <rguenther@suse.de>

	PR c++/22374
	* rtti.c (build_dynamic_cast_1): Convert the COND_EXPR
	result to the correct type.

2008-09-17  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/37450
	* name-lookup.c (pushdecl_maybe_friend): Don't return the old
	parameter for duplicate.

2008-09-17  Jason Merrill  <jason@redhat.com>

	PR c++/37588
	* name-lookup.c (lookup_type_scope): Look through sk_function_parms.

2008-09-17  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37552
	* typeck.c (build_array_ref): Use protected_set_expr_location instead
	of SET_EXPR_LOCATION when ret might not be an expression.

2008-09-17  Jan Hubicka  <jh@suse.cz>

	PR c++/18071
	* cp/decl.c (start_method): Set DECL_NO_INLINE_WARNING_P.

2008-09-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37531
	* semantics.c (finish_compound_literal): Return error_mark_node if
	type is errorneous.

	PR c++/37532
	* lex.c (init_reswords): Don't populate ridpointers for D_CONLY
	reserved words.

2008-09-15  Aldy Hernandez  <aldyh@redhat.com>

	* decl.c (duplicate_decls): Call error_at.
	(grokfndecl): New location argument.  Use location if available.
	(grokdeclarator): Pass declarator location to grokfndecl.
	* cp-tree.h (struct cp_declarator): Update comment for id_loc.
	* decl2.c (check_classfn): Use error_at.
	* parser.c (cp_parser_init_declarator): Set function_start_locus
	to brace location.
	(cp_parser_member_declaration): Set id_loc for function declarators.

2008-09-09  Jan Hubicka  <jh@suse.cz>

	PR middle-end/37500
	* pt.c (tsubst_decl): Do not copy DECL_STRUCT_FUNCTION pointer.

2008-09-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37417
	* tree.c (array_type_nelts_top): Add size_one_node instead of
	integer_one_node.

2008-09-09  Jason Merrill  <jason@redhat.com>

	PR c++/37439
	* pt.c (tsubst_copy) [PARM_DECL]: Don't abort if the parm has
	DECL_CONTEXT set.

2008-09-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37389
	* decl.c (build_enumerator): Handle previous value's DECL_INITIAL
	being error_operand_p.  Don't clear value if it was error_mark_node.

2008-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* cp-objcp-common.h (LANG_HOOKS_EXPAND_DECL): Remove.
	* cp-tree.h: Don't mention DECL_ANON_UNION_ELEMS.
	* semantics.c (anon_aggr_type_p): Remove.

2008-09-06  Jason Merrill  <jason@redhat.com>

	PR c++/37302
	* parser.c (cp_parser_parameter_declaration_list): Process the
	PARM_DECLs as we go and push them.  Return a TREE_LIST.
	(cp_parser_parameter_declaration_clause): Return a TREE_LIST.
	(cp_parser_direct_declarator): Create a binding level and
	suppress deprecated warnings in the parameter list.
	(make_call_declarator): PARMS is now a tree.
	* cp-tree.h (struct cp_declarator): Function parms are now a tree.
	* decl.h (enum deprecated_states, deprecated_state): Move here.
	* decl.c: From here.
	(type_is_deprecated): New fn.
	(grokparms): PARMLIST is a tree now.  Warn about parms that
	use deprecated types.
	* mangle.c (write_expression): Handle PARM_DECL, CALL_EXPR and
	0-operand cast.
	* pt.c (tsubst) [DECLTYPE_TYPE]: Set skip_evaluation.
	(tsubst_copy) [PARM_DECL]: Handle a PARM_DECL used outside of a 
	function.
	* name-lookup.c (pushtag): Look through function parameter scopes.
	(pushdecl_maybe_friend): Don't set DECL_CONTEXT on a PARM_DECL 
	when we're parsing a function declarator.

2008-09-05  Douglas Gregor  <doug.gregor@gmail.com>

       PR c++/37342
       * tree.c (cp_build_qualified_type_real): Deal with sharing of
       TYPE_LANG_SPECIFIC in the canonical types of pointer-to-method
       types.
	
2008-09-04  Ian Lance Taylor  <iant@google.com>

	* parser.c (check_no_duplicate_clause): Change code parameter to
	enum omp_clause_code.

2008-09-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/37348
	* decl.c (cp_finish_decl): Only set
	DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P if decl is VAR_DECL.

	PR c++/37189
	* cp-tree.h (defer_mark_used_calls, deferred_mark_used_calls): New
	extern decls.
	* decl2.c (mark_used): If defer_mark_used_calls, push decl into
	deferred_mark_used_calls vector and exit early.
	* decl.c (defer_mark_used_calls, deferred_mark_used_calls): New
	variables.
	(finish_function): Set defer_mark_used_calls for the duration of the
	function.  Call mark_used on any queued decls.

2008-09-02  Jason Merrill  <jason@redhat.com>

	PR c++/37208
	* call.c (build_over_call): Make =delete work with SFINAE.
	* class.c (resolve_address_of_overloaded_function): Likewise.

	* cp-tree.h (struct lang_decl_flags): Rename threadprivate_p to
	threadprivate_or_deleted_p.
	(CP_DECL_THREADPRIVATE_P): Adjust.
	(DECL_DELETED_FN): Likewise.
	(SD_UNINITIALIZED, SD_INITIALIZED, SD_DEFAULTED): New macros.
	(SD_DELETED): New macro.
	* parser.c (cp_parser_init_declarator): Use them.
	* decl.c (start_decl): Use them.

	* decl2.c (mark_used): Give =deleted error even in sizeof.

	* typeck2.c (check_narrowing): Downgrade narrowing error to
	permerror.

2008-09-02  Aldy Hernandez  <aldyh@redhat.com>

	* typeck.c (build_array_ref): Use new location argument.
	* class.c (build_vtbl_ref_1): Pass location to build_array_ref.
	* call.c (build_new_op): Same.
	* decl2.c (grok_array_decl): Same.
	* cp-tree.h (build_array_ref): Add location argument to prototype.

2008-09-01  Aldy Hernandez  <aldyh@redhat.com>

	* typeck.c (build_x_indirect_ref): Add location argument.
	* class.c (build_base_path): Pass location to build_indirect_ref.
	* pt.c (tsubst_copy_and_build): Pass location to
	finish_label_address_expr.
	* parser.c (cp_parser_unary_expression): Same.

2008-08-31  Jason Merrill  <jason@redhat.com>

	Implement late-specified return type using 'auto'.
	* cp-tree.h (struct cp_declarator): Add late_return_type field to
	function declarator.
	* parser.c (cp_parser_late_return_type_opt): New fn.
	(cp_parser_direct_declarator): Use it.
	(make_call_declarator): Put it in the declarator.
	* decl.c (grokdeclarator): Splice in late-specified return type.
	* pt.c (splice_late_return_type): New fn.

2008-08-29  Michael Meissner  <gnu@the-meissners.org>

	* decl.c (builtin_function_1): Take a bool argument to decide
	whether to use pushdecl or pushdecl_top_level.
	(duplicate_decls): Copy function specific target and optimization
	options on duplicate declarations.
	(cxx_builtin_function): Update builtin_function_1 call.
	(cxx_builtin_function_ext_scope): New function, guarantee that the
	declaration is done at global scope.

	* cp-objcp-common.h (LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE): New
	macro, define builtin function hook for delayed machine specific
	builtins.

	* cp-tree.h (cxx_builtin_function_ext_scope): Add declaration.

2008-08-30  Jason Merrill  <jason@redhat.com>

	PR c++/37288
	* pt.c (dependent_type_p): Don't abort on auto outside of a template.

2008-08-29  Jason Merrill  <jason@redhat.com>

	Implement C++0x 'auto' semantics.
	* decl.c (start_decl_1): Don't complain about auto being incomplete.
	(cp_finish_decl): Deduce auto.
	* init.c (build_new): Handle 'new auto'.
	* typeck2.c (cxx_incomplete_type_diagnostic): Give a different
	message for auto than for normal template type parms.
	* pt.c (type_dependent_expression_p): Handle { }.
	(make_auto): New function.
	(listify_autos): New function.
	(do_auto_deduction): New function.
	(is_auto): New function.
	(type_uses_auto): New function.
	* cp-tree.h: Declare them.
	* parser.c (cp_parser_decl_specifier_seq): In C++0x mode, don't
	treat auto as a declspec.
	(cp_parser_simple_type_specifier): It's a type-specifier.

2008-08-29  Mark Mitchell  <mark@codesourcery.com>

	* mangle.c (write_type): Add target-specific manglings for
	non-fundamental types to the substitution table.
	gcc/testsuite/

2008-08-29  Jakub Jelinek  <jakub@redhat.com>

	PR fortran/29635
	PR fortran/23057
	* name-lookup.c (do_using_directive, cp_emit_debug_info_for_using):
	Adjust debug_hooks->imported_module_or_decl callers.

2008-08-29  Jan Hubicka  <jh@suse.cz>

	* cp-gimplify.c (cp_gimplify_expr): Add PRED_CONTINUE heuristic.

2008-08-28  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37260
	* decl.c (reshape_init_r): Check init for error_mark_node.

2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/17880
	* semantics.c (maybe_convert_cond): Call verify_sequence_points.
	(finish_return_stmt): Likewise.
	(finish_switch_condition): Likewise.

2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* cp-tree.h: Fix #error directive.

2008-08-26  Douglas Gregor  <doug.gregor@gmail.com>

	* typeck.c (type_after_usual_arithmetic_conversions): Don't do the
	usual arithmetic conversions on scoped enumeration types.
	(common_type): Ditto.
	(default_conversion): Don't perform integral promotions on scoped
	enumeration types. 
	(build_array_ref): Scoped enumeration types can't be used as
	subscripts.
	* decl.c (start_enum): If building a C++0x scoped enumeration,
	enter its scope. If provided with an underlying type, check that
	underlying type and set up the enumeration type accordingly.
	(finish_enum): Only compute an underlying type if the underlying
	type isn't already fixed, and only convert the enumerator values
	now if we've just computed the underlying type. Finish the scope
	of C++0x scoped enumerations.
	(build_enumerator): For enumerations with a fixed underlying type,
	check the enumerator values when the enumerator is defined.
	(lookup_enumerator): New.
	* call.c (standard_conversion): Don't allow assignment from
	integers to scoped enumeration types, even with -fpermissive.
	Don't convert from scoped enumerations to bool or any arithmetic
	types.
	(build_conditional_expr): Don't per the usual arithmetic
	conversions for scoped enumeration types.
	(convert_like_real): Check complain to see if we should
	produce warnings.
	* error.c (class_key_or_enum_as_string): Print scoped enums.
	* cp-tree.h (MAYBE_CLASS_TYPE_P): Check CLASS_TYPE_P, not
	TYPE_LANG_FLAG_5.
	(INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P): New.
	(SCOPED_ENUM_P): New.
	(UNSCOPED_ENUM_P): New.
	(SET_SCOPED_ENUM_P): New.
	(ENUM_UNDERLYING_TYPE): New.
	* pt.c (lookup_template_class): Update the instantiation of enum
	types to deal with C++0x scoped enumerations and underlying
	types.
	* name-lookup.c (begin_scope): Deal with scoped enumeration
	scopes.
	(lookup_qualified_name): Deal with lookup into enumeration types.
	* name-lookup.h (enum scope_kind): Add sk_scoped_enum.
	* parser.c (cp_parser_class_or_namespace_name): Rename to...
	(cp_parser_qualifying_entity): ... this. Also, in C++0x mode,
	parse a type-name that can be an enumeration type.
	(cp_parser_nested_name_specifier_opt): Update with C++0x grammar.
	(cp_parser_elaborated_type_specifier): Parse the
	optional `struct' or `class' following enum (in C++0x).
	(cp_parser_enum_specifier): Parse C++0x scoped enumerations and
	enum-base clauses.

2008-08-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c: Update all calls to pedwarn.
	* decl.c: Likewise.
	* call.c: Likewise.
	* error.c: Likewise.
	* pt.c: Likewise.
	* name-lookup.c: Likewise.
	* parser.c: Likewise.

2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/35158
	* parser.c (cp_parser_omp_for_loop): Handle parenthesized
	initializers.

2008-08-20  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* parser.c: Update all calls to inform.
	* typeck.c: Likewise.
	* init.c: Likewise.
	* class.c: Likewise.
	* call.c: Likewise.
	* method.c: Likewise.
	* friend.c: Likewise.
	* typeck2.c: Likewise.
	* pt.c: Likewise.
	* name-lookup.c: Likewise.
	* lex.c: Likewise.

2008-08-19  Jakub Jelinek  <jakub@redhat.com>

	PR debug/37156
	* error.c (cp_print_error_function): Deal with recursive BLOCK trees.

2008-08-18  Tomas Bily  <tbily@suse.cz>

	* tree.c (cp_tree_equal): Use CONVERT_EXPR_CODE_P.

2008-08-18  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c: Update all callers of permerror.
	* init.c: Likewise.
	* class.c: Likewise.
	* decl.c: Likewise.
	* call.c: Likewise.
	* except.c: Likewise.
	* cvt.c: Likewise.
	* typeck2.c: Likewise.
	* pt.c: Likewise.
	* semantics.c: Likewise.
	* name-lookup.c: Likewise.
	* lex.c: Likewise.
	* decl2.c: Likewise.
	* parser.c: Likewise.

2008-08-14  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/34485
	* pt.c (check_template_shadow): Change to return a bool.
	* name-lookup.c (push_class_level_binding): Early return if
	check_template_shadow returns false.
	* cp-tree.h (check_template_shadow): Adjust declaration.

2008-08-14  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/34600
	* decl.c (grokdeclarator): In case of extern and initializer, return
	error_mark_node after the error.

2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 30551
	* decl.c (grokfndecl): Call check_main_parameters_type only if
	-Wmain.

2008-08-12  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/37087
	* parser.c (cp_parser_class_head): Early return error_mark_node in
	case of global qualification of class name or qualified name that
	does not name a class.

2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/12242
	* cvt.c (ocp_convert): Warn for out-of-range conversions to enum.

2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 36901
	* cp-tree.h (struct diagnostic_context, struct diagnostic_info):
	Delete forward declarations. Check that toplev.h has not been
	included before this file. Include toplev.h and diagnostic.h.
	* error.c (cp_cpp_error): Use DK_PEDWARN.
	(cxx_incomplete_type_diagnostic): Update declaration.
	(cxx_incomplete_type_error): Use DK_ERROR.
	* typeck2.c (cxx_incomplete_type_diagnostic): Take a diagnostic_t
	as argument. Use emit_diagnostic.
	(cxx_incomplete_type_error): Use DK_ERROR.
	(add_exception_specifier): Use diagnostic_t instead of custom
	codes.  
	* typeck.c (complete_type_or_else): Update call to
	cxx_incomplete_type_diagnostic.
	* init.c (build_delete): Likewise.  
	* call.c (diagnostic_fn_t): Remove unused typedef.
	(build_temp): Pass a pointer to diagnostic_t.
	(convert_like_real): Use emit_diagnostic.
	(joust): Check return value of warning before giving informative
	note.  
	* friend.c (do_friend): Check return value of warning
	before giving informative note.
	* parser.c (cp_parser_template_id): Likewise.

2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 7651
	* class.c (check_bases_and_members): Warn with -Wuninitialized
	instead of -Wextra.
	
2008-08-08  Volker Reichelt  <v.reichelt@netcologne.de>

	PR c++/35985
	* decl.c (xref_basetypes): Check base for MAYBE_CLASS_TYPE_P,
	and make sure it is not a union.

2008-08-07  H.J. Lu  <hongjiu.lu@intel.com>

	* semantics.c (finish_decltype_type): Initialize type.

2008-08-07  Douglas Gregor  <doug.gregor@gmail.com>

	* semantics.c (finish_decltype_type): Handle calls to function
	pointers and references to functions properly.

2008-08-06  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/36460
	* parser.c (cp_parser_template_argument): Don't assume that '>>'
	following a type-id is an error when in C++0x mode.

2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 26785
	* decl.c (grokdeclarator): Use explicit location with permerror_at.

2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 8715
	* typeck.c (cp_build_binary_op): Move code to c-common.c.

2008-08-05  Jason Merrill  <jason@redhat.com>

	PR c++/37016
	* decl.c (build_ptrmemfunc_type): Don't require structural
	comparison of PMF types.
	* tree.c (cp_build_qualified_type_real): Don't clear
	a valid TYPE_PTRMEMFUNC_TYPE.
	* typeck.c (cp_build_unary_op): Still do build_ptrmemfunc in
	templates.

2008-08-04  Jason Merrill  <jason@redhat.com>

	PR c++/36963
	* typeck2.c (check_narrowing): Allow narrowing conversion
	from an explicit floating-point constant.

	PR c++/37006
	* pt.c (tsubst_decl): Leave DECL_INITIAL set on deleted
	instantiations.

2008-08-04  Simon Baldwin  <simonb@google.com>

	PR c++/36999
	* parser.c (cp_parser_elaborated_type_specifier): Warn only when
	the declaration's id is followed by a semicolon.

2008-07-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36405
	* rtti.c (get_tinfo_decl_dynamic, get_typeid): Call
	complete_type_or_else even for UNKNOWN_TYPE to get diagnostics.

2008-07-31  Jason Merrill  <jason@redhat.com>

	PR c++/36633
	* init.c (build_new_1): Don't convert pointer to the data type
	until we're actually going to treat it as that type.

	PR c++/11309
	* tree.c (build_aggr_init_expr): Split out...
	(build_cplus_new): ...from here.
	(stabilize_init): Don't mess with AGGR_INIT_EXPR either.
	* init.c (build_new_1): new T() means value-initialization,
	not default-initialization.
	(build_vec_init): Likewise.
	(build_value_init_1): Use build_aggr_init_expr.

2008-07-30  Dodji Seketeli  <dseketel@redhat.com>

	PR c++/36767
	* decl2.c (fix_temporary_vars_context_r): New function.
	 (one_static_initialization_or_destruction): Make sure temporary
	 variables part of the initialiser have their DECL_CONTEXT()
	 properly set.

2008-07-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 34389
	* typeck.c (build_binary_op): Encapsulate code into
	shorten_binary_op.

2008-07-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36852
	* tree.c (cplus_array_hash, build_cplus_array_type_1): Hash on
	TYPE_UID instead of pointers.

2008-07-29  Jan Hubicka  <jh@suse.cz>

 	* optimize.c (maybe_clone_body): Remove DECL_INLINE.
	* decl.c (duplicate_decls): Likewise.
	(grokfndecl): Likewise.
	(start_method): Likewise.
	* method.c (make_thunk, make_alias_for, implicitly_declare_fn):
	Likewise.
	* pt.c (register_specialization, regenerate_decl_from_template):
	Likewise.
	* decl2.c (grokfield): Likewise.

2008-07-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 34985
	* decl.c (duplicate_decls): Merge USED flags.

2008-07-27  Jason Merrill  <jason@redhat.com>

	PR c++/36943
	* decl.c (reshape_init_r): Allow C++0x initializer lists.

2008-07-28  Richard Guenther  <rguenther@suse.de>

	Merge from gimple-tuples-branch.

	2008-07-22  Aldy Hernandez  <aldyh@redhat.com>

	* cp-gimplify.c (gimplify_if_stmt): Set location on newly created
	COND_EXPR.

	2008-07-18  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (finish_function): Call gimple_body after cp_genericize.

	2008-07-18  Aldy Hernandez  <aldyh@redhat.com>

	* optimize.c: Include gimple.h instead of tree-gimple.h.
	* Make-lang.in (cp-gimplify.o): Depend on tree-iterator.h.
	* cp-gimplify.c: Rename tree-gimple.h to gimple.h.  Include
	tree-iterator.h.

	2008-07-16  Jakub Jelinek  <jakub@redhat.com>

	* optimize.c (maybe_clone_body): Clear DECL_SAVED_TREE for the clone.

	2008-07-14  Jakub Jelinek  <jakub@redhat.com>

	* cp-gimplify.c (cp_gimplify_expr): Update comment.

	2008-07-14  Aldy Hernandez  <aldyh@redhat.com>

	* cp-tree.h (union lang_tree_node): Rename GENERIC_NEXT to
	TREE_CHAIN.
	* cp-gimplify.c (cxx_omp_clause_apply_fn): Rename
	GIMPLE_MODIFY_STMT to MODIFY_EXPR.
	(cxx_omp_clause_copy_ctor): Same.
	(cxx_omp_clause_assign_op): Same.

	2008-05-28  Jakub Jelinek  <jakub@redhat.com>

	* cp-gimplify.c (cp_gimplify_omp_for): Add pre_p argument.  Tuplify.
	(cp_gimplify_expr): Adjust caller.

	2008-05-11 Doug Kwan  <dougkwan@google.com>

	* init.c (build_vec_delete): Add type conversion for argument
	0 of POINTER_PLUS_EXPR.

	2008-04-29  Doug Kwan  <dougkwan@google.com>

	* decl2 (File): Include "gimple.h"
	(cp_write_global_declarations): Use gimple_body instead of
	DECL_SAVED_TREE.
	* Make-lang.in (cp/decl2.o): Add $(GIMPLE_H)

	2008-04-10  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-04/msg00913.html

	* optimize.c (maybe_clone_body): Re-enable call to
	clone_body.
	* cp-gimplify.c (cp_gimplify_omp_for): Mark disabled
	code with call to gimple_unreachable.
	(cp_genericize): Fix handling of clone bodies.

	2008-04-04  Diego Novillo  <dnovillo@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-04/msg00413.html

	* optimize.c (maybe_clone_body): Re-enable.

	2008-02-19  Diego Novillo  <dnovillo@google.com>
		    Oleg Ryjkov  <olegr@google.com>

	http://gcc.gnu.org/ml/gcc-patches/2008-02/msg00804.html

	* cp-gimplify.c (gimplify_for_stmt): Change gimple_seq
	argument to gimple_seq *.  Update all users.
	(gimplify_must_not_throw_expr): Likewise.

	2008-02-04  Oleg Ryjkov <olegr@google.com>

	* except.c: Include gimple.h
	(cp_protect_cleanup_actions): Convert to tuples.
	* Make-lang.in (cp/except.o): Add dependency on gimple.h

	2007-11-10  Aldy Hernandez  <aldyh@redhat.com>

	* cp-gimplify.c (gimplify_cp_loop): Call tree_annotate_all_with_locus
	instead of annotating each block manually.

	2007-10-30  Aldy Hernandez  <aldyh@redhat.com>

	* cp-gimplify.c (gimplify_cp_loop): Tuplify.
	(gimplify_for_stmt): Same.
	(gimplify_switch_stmt): Same.
	(cp_gimplify_expr): [FOR_STMT]: Do not call gimplify_for_stmt.  Return
	GS_OK.
	[WHILE_STMT]: Return GS_OK.
	[SWITCH_STMT]: Same.
	[CONTINUE_STMT]: Same.
	[BREAK_STMT]: Same.
	(cp_genericize): Set gimple_body() of cloned functions when needed.

	2007-10-29  Aldy Hernandez  <aldy@quesejoda.com>

	* cp-gimplify.c: Move build_gimple_eh_filter_tree here.
	(cp_gimplify_init_expr): Convert to tuples.
	(gimplify_must_not_throw_expr): Make function return a
	gimplify_status and convert to tuples.

	2007-10-18  Aldy Hernandez  <aldy@quesejoda.com>

	* cp-gimplify.c (genericize_try_block): Enable and do not call
	gimplify_stmt.
	(genericize_catch_block): Same.
	(genericize_eh_spec_block): Same.
	Rename gimple_build_eh_filter_tree to build_gimple_eh_filter_tree.
	(cp_gimplify_expr): Enable TRY_BLOCK, HANDLER, and EH_SPEC_BLOCK.

	2007-10-16  Aldy Hernandez  <aldy@quesejoda.com>

	* optimize.c (maybe_clone_body): Comment out call to clone_body.
	* decl.c (finish_function): Use gimple_body instead of
	DECL_SAVED_TREE.
	* cp-tree.h (cp_gimplify_expr): Last 2 arguments are sequences.
	* cp-gimplify.c (genericize_try_block): Comment out.
	(genericize_catch_block): Same.
	(genericize_eh_spec_block): Same.
	(gimplify_cp_loop): Comment out calls to gimplify_stmt.
	(gimplify_for_stmt): Comment out.
	(gimplify_switch_stmt): Comment out call to gimplify_stmt.
	(cp_gimplify_omp_for): Same.
	(gimplify_must_not_throw_expr): Argument pre_p is a sequence.
	Comment out call to gimplify_stmt and append_to_statement_list.
	Rename gimple_build_eh_filter_tree to build_gimple_eh_filter_tree.
	(cp_gimplify_init_expr): Arguments pre_p and post_p are sequences.
	(cp_gimplify_expr): Same.
	Comment out calls to genericize_*_block.  Comment out call to
	gimplify_for_stmt.

2008-07-27  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/36944
	* class.c (type_has_user_provided_default_constructor): Handle
	default parameters.

2008-07-27  Paolo Carlini  <paolo.carlini@oracle.com>

	* decl.c (push_library_fn): Add a parameter for the exceptions that
	the function may throw.
	(push_void_library_fn, push_throw_library_fn, expand_static_init):
	Adjust.
	(build_library_fn): Change to static.
	* cp-tree.h: Adjust declarations.
	* except.c (declare_nothrow_library_fn): New.
	(do_get_exception_ptr, do_begin_catch, do_free_exception,
	do_allocate_exception):  Use the latter, adjust the declarations
	(ie, add empty exception-specification), consistently with the
	actual implementation in libsupc++.

2008-07-25  Jan Hubicka  <jh@suse.cz>

	* typeck.c (inline_conversion): Remove.
	(cp_build_function_call): Do not use inline_conversion.
	* decl.c (duplicate_decls): Do not insist on inline being declared
	early.
	(start_cleanup_fn): Do not assume that INLINE flags prevent function
	from being output.  We now remove static functions always.
	(finish_function): Do return warning on all static functions.
	* call.c (build_over_call): Do not use inline_conversion.
	* cp-tree.h (possibly_inlined_p): Declare.
	(inline_conversion): Remove.
	* pt.c (instantiate_decl): Use possibly_inlined_p predicate.
	* decl2.c (cp_write_global_declarations): Likewise.
	(mark_used): Likewise.
	(possibly_inlined_p): New functions.

2008-07-25  Jason Merrill  <jason@redhat.com>

	* class.c (type_has_user_provided_default_constructor): Handle
	templates.

2008-07-23  Jan Hubicka  <jh@suse.cz>

	* decl.c (duplicate_decls): Update comment and unit-at-a-time.
	(grogfndecl): Drop flag_inline_trees code.
	* pt.c (instantiate_decl): Drop flag_iline_trees code.
	* lex.c (cxx_init): Do not set unit-at-a-time.

2008-07-23  Jason Merrill  <jason@redhat.com>

	* mangle.c (write_unqualified_name): Avoid infinite recursion when
	trying to mangle a decl with no name.

	Implement defaulted/deleted functions as per N2346
	* cp-tree.h (struct lang_decl_flags): Add defaulted_p bitfield.
	(DECL_DELETED_FN): New macro.
	(DECL_DEFAULTED_FN): New macro.
	* class.c (user_provided_p): New fn.
	(defaultable_fn_p): New fn.
	(type_has_user_provided_constructor): New fn.
	(type_has_user_provided_default_constructor): New fn.
	(check_methods): A defaulted fn is still trivial.
	(check_bases_and_members): Likewise.
	* decl.c (grok_special_member_properties): Likewise.
	(duplicate_decls): Complain about redeclaring a function as deleted.
	(start_decl): initialized==2 means deleted.
	(cp_finish_decl): Handle deleted/defaulted semantics.
	* decl2.c (grokfield): Likewise.
	(mark_used): Check DECL_DEFAULTED_FN instead of DECL_ARTIFICIAL.
	Complain about using a deleted fn.
	* init.c (build_value_init_1): Use type_has_user_provided_constructor.
	(perform_member_init): Check for a user-provided default constructor
	even if TYPE_NEEDS_CONSTRUCTING.
	(build_new_1): Likewise.
	* call.c (build_over_call): Don't call mark_used twice.
	* method.c (implicitly_declare_fn): Set DECL_DEFAULTED_FN.
	* search.c (check_final_overrider): Check for deleted mismatch.
	* parser.c (cp_parser_init_declarator): Tell start_decl about =delete.
	(cp_parser_pure_specifier): Handle =default and =delete.

	* error.c (maybe_warn_cpp0x): Suggest -std=gnu++0x as well.

2008-07-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 35058
	* typeck.c: All calls to pedwarn changed.
	* decl.c: All calls to pedwarn changed.
	* call.c: All calls to pedwarn changed.
	* error.c: All calls to pedwarn changed.
	* typeck2.c: All calls to pedwarn changed.
	* pt.c: All calls to pedwarn changed.
	* name-lookup.c: All calls to pedwarn changed.
	* parser.c: All calls to pedwarn changed.

2008-07-21  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>

	* call.c: Fix comment typos.
	* class.c: Likewise.
	* cp-tree.h: Likewise.
	* cxx-pretty-print.c: Likewise.
	* decl.c: Likewise.
	* init.c: Likewise.
	* name-lookup.c: Likewise.
	* operators.def: Likewise.
	* parser.c: Likewise.
	* pt.c: Likewise.
	* tree.c: Likewise.
	* typeck.c: Likewise.

2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36871
	PR c++/36872
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Only check
	copy constructors and copy assignment operators proper.

2008-07-21  Rafael Ávila de Espíndola  <espindola@google.com>

	* parser.c (cp_token): Remove in_system_header.
	(eof_token): Remove in_system_header.
	(cp_lexer_get_preprocessor_token): Don't set in_system_header.
	(cp_lexer_set_source_position_from_token): Don't set in_system_header.
	(cp_parser_member_declaration):  Use in_system_header_at.
	* pt.c (lookup_template_class): Don't set DECL_IN_SYSTEM_HEADER.
	(pop_tinst_level): Don't set in_system_header.
	(instantiate_class_template): Don't set in_system_header.
	(instantiate_decl): Don't set in_system_header.
	(instantiate_pending_templates): Don't set in_system_header.

2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36870
	* semantics.c (classtype_has_nothrow_assign_or_copy_p): Use
	TYPE_NOTHROW_P, not TREE_NOTHROW.
	(trait_expr_value): Likewise.

2008-07-18  Dodji Seketeli  <dseketel@redhat.com>

	PR c++/36407
	* call.c (convert_like_real): Don't take the error code path
	  when a rvalue or base conversion has the bad_p field set.

2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>

	* rtti.c (emit_support_tinfos): Add char16_type_node and
	char32_type_node.
	* typeck2.c (digest_init): Support char16_t and char32_t.

2008-07-18  Kavih R. Ghazi  <ghazi@caip.rutgers.edu>

	* cvt.c (convert_to_void): Avoid C++ keywords.
	* decl.c (walk_namespaces_r, wrapup_globals_for_namespace):
	Likewise.
	* friend.c (is_friend): Likewise.
	* init.c (perform_member_init): Likewise.
	* mangle.c (write_template_prefix, write_template_template_param):
	Likewise.
	* name-lookup.c (do_namespace_alias, do_using_directive,
	parse_using_directive, ambiguous_decl, arg_assoc): Likewise.
	* parser.c (cp_parser_template_id, cp_parser_namespace_definition,
	cp_parser_objc_typename, cp_parser_objc_method_keyword_params):
	Likewise.
	* pt.c (is_specialization_of_friend, lookup_template_class,
	push_tinst_level, instantiate_class_template,
	tsubst_copy_and_build): Likewise.
	* tree.c (add_stmt_to_compound): Likewise.
	* typeck.c (finish_class_member_access_expr): Likewise.

2008-07-17  Julian Brown  <julian@codesourcery.com>
	    Mark Mitchell  <mark@codesourcery.com>

	* decl2.c (determine_visibility): Allow target to override
	visibility of class data.

2008-07-17  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36855
	* semantics.c (trait_expr_value): Update __has_trivial_destructor
	semantics to the current WP (N2691).

2008-07-16  Dodji Seketeli  <dseketel@redhat.com>

	PR c++/13699
	* name-lookup.c (lookup_extern_c_fun_binding_in_all_ns): New function.
	(pushdecl_maybe_friend): Check if a redeclaration of extern C function
	complies with exception specification constraints.

2008-07-14  Jason Merrill  <jason@redhat.com>

	* lex.c (init_reswords): Always set D_OBJC.

2008-07-11  Tom Tromey  <tromey@redhat.com>
	    Ian Lance Taylor  <iant@google.com>

	* lex.c (struct resword, reswords): Don't define.
	(D_EXT, D_ASM, D_OBJC, D_CXX0X): Don't define.
	(init_reswords): Clarify mask code.  Use c_common_reswords rather
	than reswords.

2008-07-11  Dodji Seketeli  <dseketel@redhat.com>

	PR c++/13101
	* decl.c (grokdeclarator): Warn about initializing variables
	of storage class 'extern' only after the type of the declarator
	has been properly computed.

2008-07-11  Dodji Seketeli  <dseketel@redhat.com>

	PR c++/31754
	* cp-tree.h (struct cp_decl_specifier_seq): Add a location field. It
	carries the location of the primary type.
	* parser.c (cp_parser_check_type_definition): Update documentation.
	(cp_parser_check_for_definition_in_return_type,
	cp_parser_check_for_invalid_template_id,
	cp_parser_set_decl_spec_type,
	cp_parser_check_for_definition_in_return_type,
	cp_parser_diagnose_invalid_type_name,
	cp_parser_new_expression, cp_parser_explicit_instantiation,
	cp_parser_type_specifier, cp_parser_simple_type_specifier,
	cp_parser_omp_for_loop, cp_parser_pragma): Use location in error
	messages.

2008-07-11 Dodji Seketeli <dseketel@redhat.com>

	PR c++/31754
	* pt.c, semantic.c:
	* semantic.c (qualified_name_lookup_error, finish_id_expression):
	Add a location_t parameter so that
	error message can have a more accurate location.
	* cp-tree.h: Updated prototype
	* pt.c (tsubst_qualified_id): Use location in error messages.
	* parser.c (cp_parser_postfix_expression,
	cp_parser_objc_statement, cp_parser_trait_expr,
	cp_parser_token_is_class_key,
	cp_parser_uncommitted_to_tentative_parse_p,
	cp_parser_check_for_invalid_template_id, cp_parser_is_string_literal,
	cp_parser_error, cp_parser_name_lookup_error,
	cp_parser_simulate_error, cp_parser_check_decl_spec,
	cp_parser_check_decl_spec, cp_parser_non_integral_constant_expression,
	cp_parser_diagnose_invalid_type_name,
	cp_parser_parse_and_diagnose_invalid_type_name,
	cp_parser_require_pragma_eol, cp_parser_make_typename_type,
	cp_parser_string_literal, cp_parser_primary_expression,
	cp_parser_primary_expression, cp_parser_unqualified_id,
	cp_parser_nested_name_specifier_opt, cp_parser_postfix_expression,
	cp_parser_postfix_dot_deref_expression, cp_parser_new_expression,
	cp_parser_direct_new_declarator, cp_parser_builtin_offsetof,
	cp_parser_label_for_labeled_statement, cp_parser_statement_seq_opt,
	cp_parser_jump_statement, cp_parser_block_declaration,
	cp_parser_simple_declaration, cp_parser_decl_specifier_seq,
	cp_parser_function_specifier_opt, cp_parser_decltype,
	cp_parser_mem_initializer_list, cp_parser_mem_initializer,
	cp_parser_mem_initializer_id, cp_parser_template_parameter,
	cp_parser_type_parameter, cp_parser_template_id,
	cp_parser_template_name, cp_parser_template_argument): Likewise.

2008-07-09  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36760
	* pt.c (tsubst_function_type): Remove warning for type qualifiers
	on function return type.

2008-07-09  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36760
	* pt.c (tsubst_function_type): Don't warn for type qualifiers
	on function return type in case of system header.

2008-07-09  Raksit Ashok <raksit@google.com>

	* parser.c (cp_parser_postfix_expression): New warning based on flag
	warn_disallowed_functions.

2008-07-08  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/34963
	* decl.c (grokdeclarator): Reset storage_class and staticp for friend
	functions declared with a storage class qualifier.

2008-07-03  Richard Guenther  <rguenther@suse.de>

	PR c++/36128
	* typeck.c (cp_build_function_call): Move code to verify
	builtin function arguments ...
	* call.c (build_cxx_call): ... here.

2008-07-02  Jason Merrill  <jason@redhat.com>

	* Make-lang.in (cp/typeck2.o): Add $(REAL_H) dependency.

	Implement WG21 N2672, Initializer List proposed wording
	* cp-tree.h (enum cp_tree_index): Add CPTI_INIT_LIST_TYPE.
	(struct lang_type_class): Add has_list_ctor bitfield.
	(TYPE_HAS_LIST_CTOR): New macro.
	(BRACE_ENCLOSED_INITIALIZER_P): Expect init_list_type_node.
	(CONSTRUCTOR_IS_DIRECT_INIT): New macro.
	(LOOKUP_NO_NARROWING): New macro.
	(LOOKUP_NO_COPY_CTOR_CONVERSION): New macro.
	* parser.c (cp_parse_braced_list): Split out from...
	(cp_parser_initializer_clause): ...here.
	(cp_parser_postfix_expression): Build up CONSTRUCTOR for compound
	literal here.
	(cp_lexer_next_token_is_not_keyword): New fn.
	(cp_parser_parenthesized_expression_list): Handle { }.
	(cp_parser_new_expression, cp_parser_new_initializer): Likewise.
	(cp_parser_assignment_expression, cp_parser_condition): Likewise.
	(cp_parser_jump_statement, cp_parser_simple_declaration): Likewise.
	(cp_parser_mem_initializer, cp_parser_init_declarator): Likewise.
	(cp_parser_initializer, cp_parser_functional_cast): Likewise.
	(cp_parser_omp_for_loop, cp_parser_cache_group): Likewise.
	(cp_parser_save_member_function_body): Likewise.
	* call.c (conversion_kind): Add ck_list, ck_aggr.
	(struct conversion): Add check_narrowing bitfield, conversion list.
	(build_list_conv): New fn.
	(build_aggr_conv): New fn.
	(implicit_conversion): Call them.
	(standard_conversion): Set check_narrowing if appropriate.
	(add_function_candidate): Handle LOOKUP_NO_COPY_CTOR_CONVERSION.
	(build_user_type_conversion_1): When converting from an init list,
	we allow additional conversions except when calling a copy ctor.
	(convert_like_real): Calling an explicit ctor for an init list is
	ill-formed.  Handle ck_list and ck_addr.  Check narrowing.
	(build_new_method_call): If CONSTRUCTOR_IS_DIRECT_INIT is set and
	class doesn't have a list ctor, break the {} into a TREE_LIST.
	(compare_ics): ck_list is better than other UDCs.
	(set_up_extended_ref_temp): Split out from initialize_reference.
	(is_std_init_list): New fn.
	(is_list_ctor): New fn.
	* decl.c (cxx_init_decl_processing): Create init_list_type_node.
	(reshape_init_array_1): Pass it to build_constructor.
	(reshape_init_class): Ditto.
	(initialize_artificial_var): Pass the appropriate type.
	(build_aggr_init_full_exprs): Split out from...
	(check_initializer): ...here.  Handle new semantics.
	(build_init_list_var_init): New subroutine of check_initializer.
	(grokdeclarator): Converting constructors can have more than one parm.
	(grok_special_member_properties): Set TYPE_HAS_LIST_CTOR.
	* init.c (expand_default_init): Only do digest_init for aggregates.
	* rtti.c (tinfo_base_init): Pass init_list_type_node to
	build_constructor_from_list.
	(generic_initializer, ptr_initializer): Ditto.
	(ptm_initializer, class_initializer): Ditto.
	(get_pseudo_ti_init): Ditto.
	* error.c (dump_type): Handle init_list_type_node.
	(maybe_warn_cpp0x): New fn.
	(maybe_varn_variadic_templates): Call it.
	* cvt.c (ocp_convert): Handle conversion from { }.
	* tree.c (build_array_of_n_type): New fn.
	* typeck2.c (store_init_value): Use init_list_type_node.
	(digest_init): Likewise.
	(check_narrowing): New fn.
	* semantics.c: (finish_compound_literal): Take CONSTRUCTOR instead
	of vector of constructor elts.  Handle non-aggregate types.  Make
	constant literals static.
	* pt.c: (tsubst_copy_and_build): Adjust.
	(unify): Handle { }.
	* name-lookup.c (arg_assoc_type): Handle init_list_type_node.

2008-07-01  Daniel Jacobowitz  <dan@codesourcery.com>

	* typeck.c (comp_ptr_ttypes_real): Use vector_targets_convertible_p.
	(comp_ptr_ttypes_const): Likewise.

2008-07-01  Andrew Haley  <aph@redhat.com>

	* decl.c (finish_constructor_body): Don't set the return value of
	the constructor if the constructor is that of a Java type.

2008-06-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36662
	* decl2.c (is_late_template_attribute): If the first attribute
	argument is IDENTIFIER_NODE, don't consider it when checking
	if arguments are value or type dependent.

2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36655
	* pt.c (do_type_instantiation): In c++0x mode do not warn for
	extern template.

2008-06-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* Make-lang.in (cp-warn): Delete $(CXX_COMPAT_WARN).

2008-06-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36364
	* repo.c (repo_emit_p): Put const static data members initialized
	by const expr into *.rpo file, just return 2 if IDENTIFIER_REPO_CHOSEN
	for it is 0.

2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>

	PR c++/36655
	* pt.c (do_decl_instantiation): In c++0x mode do not warn for
	extern template.

2008-06-24  Jonathan Wakely  <jwakely.gcc@gmail.com>

	PR c++/23194
	* typeck.c (cp_build_function_call): Show example syntax in
	diagnostic.

2008-06-21  Jonathan Wakely  <jwakely.gcc@gmail.com>

	* typeck.c (composite_pointer_type_r, cxx_sizeof_expr,
	cxx_alignof_expr, check_template_keyword, cp_build_binary_op,
	pointer_diff, cp_build_unary_op, build_x_compound_expr_from_list,
	build_reinterpret_cast_1, cp_build_c_cast, check_return_expr): Change
	pedwarn to permerror.
	* init.c (perform_member_init, build_new_1, build_new): Likewise.
	* decl.c (warn_extern_redeclared_static, duplicate_decls,
	* identify_goto, check_previous_goto_1, check_goto, define_label,
	check_tag_decl, start_decl, check_class_member_definition_namespace,
	grokfndecl, grokdeclarator): Likewise.
	* except.c (check_handlers): Likewise.
	* typeck2.c (digest_init): Likewise.
	* pt.c (check_specialization_namespace,
	check_explicit_instantiation_namespace,
	maybe_process_partial_specialization, check_explicit_specialization,
	convert_template_argument, do_decl_instantiation,
	do_type_instantiation, instantiate_decl): Likewise.
	* semantics.c (finish_template_type_parm): Likewise.
	* name-lookup.c (pushdecl_maybe_friend,
	check_for_out_of_scope_variable): Likewise.
	* decl2.c (finish_static_data_member_decl, build_anon_union_vars,
	coerce_new_type): Likewise.
	* parser.c (cp_parser_nested_name_specifier_opt,
	cp_parser_mem_initializer, cp_parser_elaborated_type_specifier,
	cp_parser_class_head, cp_parser_check_class_key): Likewise.
	(cp_parser_parameter_declaration): Check flag_permissive instead of
	flag_pedantic_errors.
	* call.c (joust): Change pedwarn to warning.
	* friend.c (make_friend_class): Likewise.

2008-06-16  Jan Hubicka  <jh@suse.cz>

	* method.c: Include cgraph.h.
	(use_thunk): Use cgraph_add_new_function instead of calling backend
	directly.

2008-06-15  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>

	* parser.c: Fix comment typo.

2008-06-14  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/35320
	* decl2.c (grokbitfield): Receive the list of attributes, pass it to
	grokdeclarator and apply it to the created declaration.
	* cp-tree.h (grokbitfield): Update prototype.
	* parser.c (cp_parser_member_declaration): Don't apply the attributes
	since they are now applied in grokbitfield. Adjusted the call to
	grokbitfield.
	(cp_parser_objc_class_ivars): Likewise.

2008-06-14  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/35317
	* class.c (type_requires_array_cookie): Do not consider delete[]
	operators with an ellipsis as second argument.

2008-06-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36408
	* semantics.c (stmt_expr_value_expr): Don't crash on empty
	STATEMENT_LIST.

2008-06-08  Paolo Carlini  <paolo.carlini@oracle.com>

	 PR c++/35242
	 * pt.c (maybe_process_partial_specialization): Check the tree
	returned by push_template_decl for error_mark_node.
	* parser.c (cp_parser_class_head): Likewise, check the tree
	returned by the latter.

2008-06-07  Paolo Carlini  <paolo.carlini@oracle.com>

	 PR c++/35327
	 * decl.c (grokdeclarator): In case of wrong return type return
	immediately error_mark_node.

2008-06-06  Jakub Jelinek  <jakub@redhat.com>

	* cp-tree.h (cxx_omp_finish_clause, cxx_omp_create_clause_info,
	dependent_omp_for_p, begin_omp_task, finish_omp_task,
	finish_omp_taskwait): New prototypes.
	(cxx_omp_clause_default_ctor): Add outer argument.
	(finish_omp_for): Add new clauses argument.
	* cp-gimplify.c (cxx_omp_finish_clause): New function.
	(cxx_omp_predetermined_sharing): Moved from semantics.c, rewritten.
	(cxx_omp_clause_default_ctor): Add outer argument.
	(cp_genericize_r): Walk OMP_CLAUSE_LASTPRIVATE_STMT.
	* cp-objcp-common.h (LANG_HOOKS_OMP_FINISH_CLAUSE): Define.
	* parser.c (cp_parser_omp_for_loop): Parse collapsed for loops.
	Add par_clauses argument.  If decl is present in parallel's
	lastprivate clause, change that clause to shared and add
	a lastprivate clause for decl to OMP_FOR_CLAUSES.
	Fix wording of error messages.  Adjust finish_omp_for caller.
	Add clauses argument.  Parse loops with random access iterators.
	(cp_parser_omp_clause_collapse, cp_parser_omp_clause_untied): New
	functions.
	(cp_parser_omp_for, cp_parser_omp_parallel): Adjust
	cp_parser_omp_for_loop callers.
	(cp_parser_omp_for_cond, cp_parser_omp_for_incr): New helper
	functions.
	(cp_parser_omp_clause_name): Handle collapse and untied
	clauses.
	(cp_parser_omp_clause_schedule): Handle auto schedule.
	(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_COLLAPSE
	and PRAGMA_OMP_CLAUSE_UNTIED.
	(OMP_FOR_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_COLLAPSE.
	(OMP_TASK_CLAUSE_MASK): Define.
	(cp_parser_omp_task, cp_parser_omp_taskwait): New functions.
	(cp_parser_omp_construct): Handle PRAGMA_OMP_TASK.
	(cp_parser_pragma): Handle PRAGMA_OMP_TASK and
	PRAGMA_OMP_TASKWAIT.
	* pt.c (tsubst_omp_clauses): Handle OMP_CLAUSE_COLLAPSE and
	OMP_CLAUSE_UNTIED.  Handle OMP_CLAUSE_LASTPRIVATE_STMT.
	(tsubst_omp_for_iterator): New function.
	(dependent_omp_for_p): New function.
	(tsubst_expr) <case OMP_FOR>: Use it.  Handle collapsed OMP_FOR
	loops.  Adjust finish_omp_for caller.  Handle loops with random
	access iterators.  Adjust for OMP_FOR_{INIT,COND,INCR} changes.
	(tsubst_expr): Handle OMP_TASK.
	* semantics.c (cxx_omp_create_clause_info): New function.
	(finish_omp_clauses): Call it.  Handle OMP_CLAUSE_UNTIED and
	OMP_CLAUSE_COLLAPSE.
	(cxx_omp_predetermined_sharing): Removed.
	* semantics.c (finish_omp_for): Allow pointer iterators.  Use
	handle_omp_for_class_iterator and dependent_omp_for_p.  Handle
	collapsed for loops.  Adjust c_finish_omp_for caller.  Add new
	clauses argument.  Fix check for type dependent cond or incr.
	Set OMP_FOR_CLAUSES to clauses.  Use cp_convert instead of
	fold_convert to convert incr amount to difference_type.  Only
	fold if not in template.  If decl is mentioned in lastprivate
	clause, set OMP_CLAUSE_LASTPRIVATE_STMT.  Handle loops with random
	access iterators.  Adjust for OMP_FOR_{INIT,COND,INCR}
	changes.
	(finish_omp_threadprivate): Allow static class members of the
	current class.
	(handle_omp_for_class_iterator, begin_omp_task, finish_omp_task,
	finish_omp_taskwait): New functions.

	* parser.c (cp_parser_binary_expression): Add prec argument.
	(cp_parser_assignment_expression): Adjust caller.
	* cp-tree.h (outer_curly_brace_block): New prototype.
	* decl.c (outer_curly_brace_block): No longer static.

2008-06-02  Paolo Carlini  <paolo.carlini@oracle.com>

	 PR c++/36404
	 * pt.c (push_template_decl_real): Consistently return error_mark_node
	on error.

2008-06-02  Tomas Bily  <tbily@suse.cz>

	 * typeck.c (is_bitfield_expr_with_lowered_type): Use CASE_CONVERT.
	 (cp_build_unary_op): Likewise.
	 (cp_build_indirect_ref): Use CONVERT_EXPR_P.
	 (maybe_warn_about_returning_address_of_local): Likewise.

2008-05-29  Paolo Carlini  <paolo.carlini@oracle.com>

	 PR c++/35243
	 * pt.c (tsubst_initializer_list): Consistently check the tree
	 returned by tsubst_pack_expansion for error_mark_node.

2008-05-27  Michael Matz  <matz@suse.de>

	PR c++/27975
	* call.c (build_new_op): Make warning conditional on
	OPT_Wenum_compare.

2008-05-27  Alexandre Oliva  <aoliva@redhat.com>

	PR c++/35909
	* call.c (convert_like_real): Convert bitfield to desired type
	before creating temporary.

2008-05-26  Daniel Franke  <franke.daniel@gmail.com>

	* Makefile.in: Adjusted dependencies on c-incpath.o.

2008-05-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36237
	* cp-gimplify.c (cxx_omp_clause_apply_fn): Call
	fold_build_cleanup_point_expr on build_call_a results.

	PR c++/36308
	* semantics.c (omp_clause_info_fndecl): New function.
	(finish_omp_clauses): Use it.

2008-05-21  Jakub Jelinek  <jakub@redhat.com>

	PR c++/36023
	* cp-tree.h (check_array_initializer): New prototype.
	* decl.c (check_array_initializer): New function.
	(check_initializer): Call it.
	* semantics.c (finish_compound_literal): Call it for ARRAY_TYPEs.

2008-05-21  Tom Tromey  <tromey@redhat.com>

	* mangle.c (save_partially_mangled_name): Remove.
	(restore_partially_mangled_name): Likewise.
	(write_encoding): Update.
	(write_unqualified_name): Likewise.
	(start_mangling): Always use name_obstack.  Remove 'ident_p'
	argument.
	(get_identifier_nocopy): Remove.
	(finish_mangling_internal): Rename from finish_mangling.
	(finish_mangling): New function.
	(finish_mangling_get_identifier): Likewise.
	(partially_mangled_name, partially_mangled_name_len): Remove.
	(mangle_decl_string): Change return type.  Update.
	(mangle_decl, mangle_type_string, mangle_special_for_type,
	mangle_ctor_vtbl_for_type, mangle_thunk, mangle_guard_variable,
	mangle_ref_init_variable): Update.

2008-05-12  Paolo Carlini  <paolo.carlini@oracle.com>

	 PR c++/35331
	 * semantics.c (begin_class_definition): Extend checks on the first
	argument.

2008-05-12  Tomas Bily  <tbily@suse.cz>

	 * typeck2.c (digest_init): Use CONVERT_EXPR_P.
	 * call.c (build_over_call): Likewise.
	 * error.c (dump_expr): Use CASE_CONVERT.
	 * class.c (fixed_type_or_null): Likewise.

2008-05-11  Volker Reichelt  <v.reichelt@netcologne.de>

	* parser.c (cp_parser_omp_clause_reduction): Add missing "expected"
	in error message.
	(cp_parser_omp_clause_schedule): Remove superfluous "expected"
	in error message.

2008-05-07  Kenneth Zadeck  <zadeck@naturalbridge.com>

	* decl.c (duplicate_decls): Merge in DECL_PURE_P, TREE_READONLY,
	DECL_LOOPING_CONST_OR_PURE_P attributes.
	* rtti.c (build_dynamic_cast_1): Rename DECL_IS_PURE to
	DECL_PURE_P.

2008-05-02  Simon Baldwin  <simonb@google.com>

	PR bootstrap/36108
	* typeck.c (build_array_ref): Remove warn_array_subscript_range.

2008-05-01  Simon Baldwin  <simonb@google.com>

	* typeck.c (build_array_ref): Call warn_array_subscript_range.

2008-04-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35986
	* pt.c (more_specialized_fn): Stop the loop even if there are no
	arguments before ellipsis.

2008-04-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35650
	* parser.c (cp_parser_lookup_name): Look through single function
	OVERLOAD.

	PR c++/35987
	* typeck.c (cp_build_modify_expr) <case PREINCREMENT_EXPR>: Don't build
	COMPOUND_EXPR if the second argument would be error_mark_node.

2008-04-28  Jason Merrill  <jason@redhat.com>
	    Liu Guanwei <liu_gw@163.com>

	PR c++/57
	* parser.c (cp_parser_parameter_declaration): Handle < ambiguity
	in default arguments.

2008-04-25  Jan Hubicka  <jh@suse.cz>

	* typeck.c (check_return_expr): Update.
	* decl.c (start_preparsed_function): Update.
	* method.c (use_thunk): Update.

2008-04-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35758
	* cp-tree.h (cp_reconstruct_complex_type): New prototype.
	* cp-objcp-common.h (LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE): Define.
	* decl2.c (is_late_template_attribute): Only make vector_size
	late tmpl attribute if argument is type or value dependent.
	(cp_reconstruct_complex_type): New function.

2008-04-24  Richard Guenther  <rguenther@suse.de>

	* typeck.c (cp_build_function_call): Call
	check_builtin_function_arguments.

2008-04-23  Paolo Bonzini  <bonzini@gnu.org>

	* typeck.c (get_member_function_from_ptrfunc): Don't set TREE_INVARIANT.
	(build_ptrmemfunc1): Don't set TREE_INVARIANT.
	* init.c (build_zero_init): Don't set TREE_INVARIANT.
	* class.c (build_base_path): Don't set TREE_INVARIANT.
	(build_vtbl_ref_1): Don't set TREE_INVARIANT.
	(build_vtbl_initializer): Don't set TREE_INVARIANT.
	* decl.c (build_enumerator): Don't set TREE_INVARIANT.
	* rtti.c (tinfo_base_init): Don't set TREE_INVARIANT.
	(generic_initializer): Don't set TREE_INVARIANT.
	(ptr_initializer): Don't set TREE_INVARIANT.
	(ptm_initializer): Don't set TREE_INVARIANT.
	(class_initializer): Don't set TREE_INVARIANT.
	* typeck2.c (process_init_constructor): Don't set TREE_INVARIANT.
	* pt.c (push_inline_template_parms_recursive): Don't set TREE_INVARIANT.
	(build_template_parm_index): Don't set TREE_INVARIANT.
	(reduce_template_parm_level): Don't set TREE_INVARIANT.
	(process_template_parm): Don't set TREE_INVARIANT.

2008-04-22  Jason Merrill  <jason@redhat.com>

	PR c++/35316
	* semantics.c (finish_decltype_type): Check DECL_BIT_FIELD_TYPE
	to see if DECL_BIT_FIELD_TYPE should be used, not some other flag.
	* typeck.c (is_bitfield_expr_with_lowered_type): Likewise.

2008-04-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35747
	* semantics.c (finish_stmt_expr): Call pop_stmt_list even if the stmt
	expression is errorneous.

2008-04-21  Jason Merrill  <jason@redhat.com>

	PR c++/35325
	* tree.c (cp_tree_equal): Handle FIXED_CST.

	PR c++/35678
	* pt.c (template_template_parm_bindings_ok_p): Set
	processing_template_decl while in this function.

2008-04-18  Kris Van Hees <kris.van.hees@oracle.com>

	* cvt.c (type_promotes_to): Support char16_t and char32_t.
	* decl.c (grokdeclarator): Disallow signed/unsigned/short/long on
	char16_t and char32_t.
	* lex.c (reswords): Add char16_t and char32_t (for c++0x).
	* mangle.c (write_builtin_type): Mangle char16_t/char32_t as vendor
	extended builtin type "u8char{16,32}_t".
	* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Support
	RID_CHAR{16,32}.
	(cp_lexer_print_token): Support CPP_STRING{16,32}.
	(cp_parser_is_string_literal): Idem.
	(cp_parser_string_literal): Idem.
	(cp_parser_primary_expression): Support CPP_CHAR{16,32} and
	CPP_STRING{16,32}.
	(cp_parser_simple_type_specifier): Support RID_CHAR{16,32}.
	* tree.c (char_type_p): Support char16_t and char32_t as char types.
	* typeck.c (string_conv_p): Support char16_t and char32_t.

2008-04-17  Jason Merrill  <jason@redhat.com>

	PR c++/35773
	* call.c (build_user_type_conversion_1): Represent second step of
	copy-init with an rvalue conversion.
	(convert_like_real) [ck_user]: Don't implicitly add it here.

2008-04-15  Jakub Jelinek  <jakub@redhat.com>

	PR c/35751
	* decl.c (layout_var_decl): If extern or static var has variable
	size, set TREE_TYPE (decl) to error_mark_node.

2008-04-16  Danny Smith  <dannysmith@users.sourceforge.net>

	PR target/35921
	* optimize.c (maybe_clone_body): Copy DECL_DLLIMPORT_P flag
	to clone.

2008-04-09  Jason Merrill  <jason@redhat.com>

	PR c++/35708
	* semantics.c (finish_compound_literal): Return a TARGET_EXPR,
	not a pushed variable.

2008-04-09  Volker Reichelt  <v.reichelt@netcologne.de>

	* call.c (build_op_delete_call): Fix quotation in warning message.
	* decl.c (grokdeclarator): Quote keyword in error message.
	* pt.c (check_for_bare_parameter_packs): Fix quotation in error
	message.

	* parser.c (cp_parser_check_type_definition): Print error string
	directly rather than using "%s".
	(cp_parser_postfix_expression): Fix quotation.
	(cp_parser_decltype): Likewise.
	(cp_parser_sizeof_operand): Fix quotation. Simplify.

	* parser.c (cp_parser_non_integral_constant_expression): Build error
	message with CONCAT rather than using "%s".
	(cp_parser_primary_expression): Fix quotation.
	(cp_parser_postfix_expression): Likewise.
	(cp_parser_postfix_dot_deref_expression): Likewise.
	(cp_parser_unary_expression): Likewise.
	(cp_parser_new_expression): Likewise.
	(cp_parser_delete_expression): Likewise.

	* parser.c (cp_parser_asm_specification_opt): Print CPP_CLOSE_PAREN
	as `)', not as `('.  Fix quotation.
	(cp_parser_consume_semicolon_at_end_of_statement): Fix quotation.
	(cp_parser_primary_expression): Likewise.
	(cp_parser_nested_name_specifier_opt): Likewise.
	(cp_parser_postfix_expression): Likewise.
	(cp_parser_postfix_open_square_expression): Likewise.
	(cp_parser_parenthesized_expression_list): Likewise.
	(cp_parser_pseudo_destructor_name): Likewise.
	(cp_parser_new_expression): Likewise.
	(cp_parser_direct_new_declarator): Likewise.
	(cp_parser_delete_expression): Likewise.
	(cp_parser_cast_expression): Likewise.
	(cp_parser_question_colon_clause): Likewise.
	(cp_parser_builtin_offsetof): Likewise.
	(cp_parser_trait_expr): Likewise.
	(cp_parser_label_for_labeled_statement): Likewise.
	(cp_parser_compound_statement): Likewise.
	(cp_parser_selection_statement): Likewise.
	(cp_parser_condition): Likewise.
	(cp_parser_iteration_statement): Likewise.
	(cp_parser_already_scoped_statement): Likewise.
	(cp_parser_simple_declaration): Likewise.
	(cp_parser_linkage_specification): Likewise.
	(cp_parser_static_assert): Likewise.
	(cp_parser_decltype): Likewise.
	(cp_parser_conversion_function_id): Likewise.
	(cp_parser_operator_function_id): Likewise.
	(cp_parser_operator): Likewise.
	(cp_parser_type_parameter): Likewise.
	(cp_parser_template_id): Likewise.
	(cp_parser_explicit_instantiation): Likewise.
	(cp_parser_explicit_specialization): Likewise.
	(cp_parser_enum_specifier): Likewise.
	(cp_parser_namespace_definition): Likewise.
	(cp_parser_namespace_alias_definition): Likewise.
	(cp_parser_using_declaration): Likewise.
	(cp_parser_using_directive): Likewise.
	(cp_parser_asm_definition): Likewise.
	(cp_parser_direct_declarator): Likewise.
	(cp_parser_ptr_operator): Likewise.
	(cp_parser_parameter_declaration_clause): Likewise.
	(cp_parser_initializer_clause): Likewise.
	(cp_parser_class_specifier): Likewise.
	(cp_parser_member_specification_opt): Likewise.
	(cp_parser_member_declaration): Likewise.
	(cp_parser_pure_specifier): Likewise.
	(cp_parser_constant_initializer): Likewise.
	(cp_parser_base_clause): Likewise.
	(cp_parser_exception_specification_opt): Likewise.
	(cp_parser_try_block): Likewise.
	(cp_parser_function_try_block): Likewise.
	(cp_parser_handler): Likewise.
	(cp_parser_throw_expression): Likewise.
	(cp_parser_asm_operand_list): Likewise.
	(cp_parser_attributes_opt): Likewise.
	(cp_parser_label_declaration): Likewise.
	(cp_parser_constructor_declarator_p): Likewise.
	(cp_parser_template_declaration_after_export): Likewise.
	(cp_parser_single_declaration): Likewise.
	(cp_parser_objc_message_expression): Likewise.
	(cp_parser_objc_message_args): Likewise.
	(cp_parser_objc_encode_expression): Likewise.
	(cp_parser_objc_defs_expression): Likewise.
	(cp_parser_objc_protocol_expression): Likewise.
	(cp_parser_objc_selector_expression): Likewise.
	(cp_parser_objc_protocol_refs_opt): Likewise.
	(cp_parser_objc_typename): Likewise.
	(cp_parser_objc_method_keyword_params): Likewise.
	(cp_parser_objc_superclass_or_category): Likewise.
	(cp_parser_objc_try_catch_finally_statement): Likewise.
	(cp_parser_objc_synchronized_statement): Likewise.
	(cp_parser_objc_throw_statement): Likewise.
	(cp_parser_omp_var_list_no_open): Likewise.
	(cp_parser_omp_clause_default): Likewise.
	(cp_parser_omp_clause_if): Likewise.
	(cp_parser_omp_clause_num_threads): Likewise.
	(cp_parser_omp_clause_reduction): Likewise.
	(cp_parser_omp_clause_schedule): Likewise.
	(cp_parser_omp_critical): Likewise.
	(cp_parser_omp_for_loop): Likewise.
	(cp_parser_omp_sections_scope): Likewise.

	* parser.c (cp_parser_template_parameter_list): Simplify.

2008-04-07  James E. Wilson  <wilson@tuliptree.org>

	* pt.c (tsubst_copy, case SIZEOF_EXPR): Initialize len.

2008-04-07  Jason Merrill  <jason@redhat.com>

	PR c++/35734
	* class.c (type_has_user_nondefault_constructor): A template
	counts as a nondefault constructor.

2008-04-04  Paolo Bonzini  <bonzini@gnu.org>

	* decl.c (cxx_push_function_context): Delete.
	(cxx_pop_function_context): Delete.
	(start_preparsed_function): Merge cxx_push_function_context (!f->decl
	code only).
	* cp-objcp-common.h (LANG_HOOKS_FUNCTION_INIT,
	LANG_HOOKS_FUNCTION_FINAL): Delete.
	(LANG_HOOKS_FUNCTION_MISSING_NORETURN_OK_P): Rename to
	LANG_HOOKS_MISSING_NORETURN_OK_P.
	* cp-tree.h (cxx_push_function_context, cxx_pop_function_context):
	Delete prototype.
	* semantics.c (current_stmt_tree): Fix comment.

2008-04-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35741
	* semantics.c (finish_offsetof): Undo effect of convert_from_reference
	before calling fold_offsetof.

2008-04-03  Tom Tromey  <tromey@redhat.com>

	* Make-lang.in (c++_OBJS): New variable.

2008-04-03  Paolo Bonzini  <bonzini@gnu.org>

	* optimize.c (clone_body): New, from tree-inline.c.

2008-04-03  Paolo Bonzini  <bonzini@gnu.org>

	 * method.c (synthesize_method): Use {push,pop}_function_context.
	 * name-lookup.c (push_to_top_level): Likewise.
	 * parser.c (cp_parser_late_parsing_for_member): Likewise.

2008-03-30  Volker Reichelt  <v.reichelt@netcologne.de>

	PR c++/35578
	* parser.c (cp_parser_decl_specifier_seq): Add location to error
	message.

2008-03-27  Tom Tromey  <tromey@redhat.com>

	* Make-lang.in: Revert automatic dependency patch.

2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>

	PR obj-c++/35704
	* typeck.c (build_x_compound_expr): Use cp_build_compound_expr.
	(build_compound_expr): New, for compatibility with C
	build_compound_expr.
	(cp_build_compound_expr): Renamed from build_compound_expr.
	(build_c_cast): New, for compatibility with C build_c_cast.
	(cp_build_c_cast): Renamed from build_c_cast.
	* init.c (build_vec_delete_1): Fix calls to build_compound_expr.
	* decl.c (cxx_maybe_build_cleanup): Ditto.
	* cp-tree.h (build_compound_expr): Add C-compatibile prototype.
	(cp_build_compound_expr): Renamed from build_compound_expr.
	(build_c_cast): Add C-compatible prototype.
	(cp_build_c_cast): Renamed from build_c_cast.
	* typeck2.c (build_functional_cast): Use cp_build_c_cast.
	* parser.c (cp_parser_cast_expression): Fix call to build_c_cast.

2008-03-27  Douglas Gregor  <doug.gregor@gmail.com>

	* pt.c (tsubst_copy) <case SIZEOF_EXPR>: Cope with
	tsubst_pack_expansion returning a pack expansion, or a TREE_VEC
	ending in a pack expansion, both of which can occur when
	substituting into a nested template.
	(tsubst_copy_and_build) <case SIZEOF_EXPR>: When we're
	instantiating the sizeof...(X) form, make tsubst_copy do the work.
	* parser.c (cp_parser_template_parameter): Deal with unnamed
	non-type template parameter packs identified by pack expansions in
	the parameter type.

2008-03-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35546
	* pt.c (apply_late_template_attributes): Don't call tsubst on
	first attribute argument if it is IDENTIFIER_NODE.

	PR c++/35332
	* error.c (dump_expr): Pass {,UN}ORDERED_EXPR, UN{LT,LE,GT,GE,EQ}_EXPR
	and LTGT_EXPR to pp_expression.

2008-03-26  Douglas Gregor  <doug.gregor@gmail.com>

	* pt.c (coerce_template_template_parm): Moved the body of the loop
	of coerce_template_template_parms here, to make iteration over a
	template argument pack simpler.
	Also, allow matching of a template parameter pack in the template
	template parameter to a template parameter in the template
	template argument.
	(coerce_template_template_parms): Deal with variadic template
	template parameters. Use coerce_template_template_parm.
	(unify): Make sure we coerce the template template argument's
	template arguments to the template template parameter's template
	parameters, not the other way around.

2008-03-25  Tom Tromey  <tromey@redhat.com>

	* Make-lang.in: Remove .o targets.
	(cp/g++spec.o): Moved to cp/.  Reduce to variable setting.
	(GXX_OBJS): Update.
	(c++_OBJS): New variable.
	(CXX_TREE_H, CXX_PRETTY_PRINT_H): Remove.

2008-03-25  Douglas Gregor  <doug.gregor@gmail.com>

	* typeck.c (composite_pointer_type_r): Add SFINAE support.
	(composite_pointer_type): Ditto.
	(common_type): Fix call to composite_pointer_type.
	(cxx_sizeof_nowarn): New; used to be a macro.
	(cxx_sizeof_expr): Add SFINAE support.
	(cxx_alignof_expr): Ditto.
	(decay_conversion): Fix calls for SFINAE support.
	(rationalize_conditional_expr): Add SFINAE support.
	(build_class_member_access_expr): Ditto.
	(finish_class_member_access_expr): Ditto.
	(build_x_indirect_ref): Ditto.
	(build_indirect_ref): Original version renamed to
	cp_build_indirect_ref; new version provides a bridge from
	c-common.
	(cp_build_indirect_ref): Was build_indirect_ref; added SFINAE
	support.
	(get_member_function_from_ptrfunc): Fix calls for SFINAE support.
	(build_function_call): Original version renamed to
	cp_build_function_call; new version provides a bridge from
	c-common.
	(cp_build_function_call): Was build_function_call; added SFINAE
	support.
	(convert_arguments): Add SFINAE support.
	(build_x_binary_op): Ditto.
	(build_binary_op): Original version renamed to cp_build_binary_op;
	new version provides a bridge from c-common.
	(cp_build_binary_op): Was build_binary_op; added SFINAE support.
	(pointer_diff): Fix calls for SFINAE.
	(build_x_unary_op): Add SFINAE support.
	(condition_conversion): Fix calls for SFINAE.
	(build_unary_op): Original version renamed to cp_build_unary_op;
	new version provides a bridge from c-common.
	(cp_build_unary_op): Was build_unary_op; added SFINAE support.
	(unary_complex_lvalue): Fix calls for SFINAE.
	(build_x_conditional_expr): Add SFINAE support.
	(build_x_compound_expr_from_list): Fix calls for SFINAE.
	(build_x_compound_expr): Add SFINAE support.
	(convert_ptrmem): Fix calls for SFINAE.
	(build_static_cast_1): Add SFINAE support.
	(build_static_cast): Ditto.
	(build_reinterpret_cast_1): Ditto.
	(build_reinterpret_cast): Ditto.
	(build_const_cast_1): Ditto.
	(build_const_cast): Ditto.
	(build_c_cast): Ditto.
	(build_modify_expr): Original version renamed to
	cp_build_modify_expr; new version provides a bridge from c-common.
	(cp_build_modify_expr): Was build_modify_expr; added SFINAE
	support.
	(build_x_modify_expr): Add SFINAE support.
	(build_ptrmemfunc): Fix calls for SFINAE.
	(convert_for_assignment): Add SFINAE support.
	(convert_for_initialization): Ditto.
	(check_return_expr): Fix calls for SFINAE.
	(lvalue_or_else): Add SFINAE support.
	* init.c (perform_member_init): Fix calls for SFINAE.
	(emit_mem_initializers): Ditto.
	(expand_virtual_init): Ditto.
	(expand_cleanup_for_base): Ditto.
	(build_aggr_init): Add SFINAE support.
	(expand_default_init): Ditto.
	(expand_aggr_init_1): Fix calls for SFINAE.
	(build_offset_ref): Ditto.
	(build_new_1): Add SFINAE support.
	(build_new): Ditto.
	(build_vec_delete_1): Fix calls for SFINAE.
	(get_temp_regvar): Ditto.
	(build_vec_init): Add SFINAE support.
	(build_dtor_call): Fix calls for SFINAE.
	(build_delete): Ditto.
	(push_base_cleanups): Ditto.
	(build_vec_delete_1): Ditto.
	* class.c (build_base_path): Fix calls for SFINAE.
	(build_simple_base_path): Ditto.
	(convert_to_base_statically): Ditto.
	(build_vfn_ref): Ditto.
	(resolve_address_of_overloaded_function): Ditto.
	* decl.c (check_initializer): Fix calls for SFINAE.
	(register_dtor_fn): Ditto.
	(compute_array_index_type): Ditto.
	(finish_enum): Ditto.
	(start_preparsed_function): Ditto.
	(cxx_maybe_build_cleanup): Ditto.
	* call.c (convert_like): Add COMPLAIN argument.
	(convert_like_with_context): Ditto.
	(build_this): Fix calls for SFINAE.
	(build_user_type_conversion): Ditto.
	(resolve_args): Ditto.
	(build_new_function_call): Add SFINAE support.
	(build_operator_new_call): Fix calls for SFINAE.
	(build_object_call): Add SFINAE support.
	(build_conditional_expr): Ditto.
	(build_new_op): Ditto.
	(build_op_delete_call): Fix calls for SFINAE.
	(build_temp): Ditto.
	(convert_like_real): Add SFINAE support.
	(build_x_va_arg): Fix calls for SFINAE.
	(convert_default_arg): Ditto.
	(build_over_call): Add SFINAE support.
	(build_java_interface_fn_ref): Fix calls for SFINAE.
	(build_special_member_call): Add SFINAE support.
	(build_new_method_call): Ditto.
	(perform_implicit_conversion): Ditto.
	(perform_direct_initialization_if_possible): Ditto.
	(initialize_reference): Fix calls for SFINAE.
	* method.c (do_build_assign_ref): Fix calls for SFINAE.
	* rtti.c (build_headof): Fix calls for SFINAE.
	(get_tinfo_decl_dynamic): Ditto.
	(get_typeid): Ditto.
	(build_dynamic_cast_1): Add SFINAE support.
	(build_dynamic_cast): Ditto.
	(tinfo_base_init): Fix calls for SFINAE.
	* except.c (do_get_exception_ptr): Fix calls for SFINAE.
	(do_end_catch): Ditto.
	(initialize_handler_parm): Ditto.
	(expand_start_catch_block): Ditto.
	(do_allocate_exception): Ditto.
	(do_free_exception): Ditto.
	(build_throw): Ditto.
	* cvt.c (build_up_reference): Fix calls for SFINAE.
	(convert_to_reference): Ditto.
	(ocp_convert): Ditto.
	(convert_to_void): Add SFINAE support.
	* tree.c (build_dummy_object): Fix calls for SFINAE.
	(stabilize_expr): Ditto.
	* cp-tree.h (build_conditional_expr): Add tsubst_flags_t
	parameter.
	(build_new_method_call): Ditto.
	(build_special_member_call): Ditto.
	(build_new_op): Ditto.
	(perform_implicit_conversion): Ditto.
	(perform_direct_initialization_if_possible): Ditto.
	(convert_to_void): Ditto.
	(build_aggr_init): Ditto.
	(build_new): Ditto.
	(build_vec_init): Ditto.
	(build_dynamic_cast): Ditto.
	(finish_call_expr): Ditto
	(cxx_sizeof_or_alignof_expr): Add COMPLAIN parameter.
	(cxx_sizeof_nowarn): Remove macro; add function declaration.
	(build_class_member_access_expr): Add tsubst_flags_t parameter.
	(finish_class_member_access_expr): Ditto.
	(build_x_indirect_ref): Ditto.
	(cp_build_indirect_ref): New.
	(cp_build_function_call): Add tsubst_flags_t parameter.
	(build_x_unary_op): Ditto.
	(cp_build_unary_op): New.
	(build_x_conditional_expr): Add tsubst_flags_t parameter.
	(build_x_compound_expr): Ditto.
	(build_compound_expr): Ditto.
	(build_static_cast): Ditto.
	(build_reinterpret_cast): Ditto.
	(build_const_cast): Ditto.
	(build_c_cast): Ditto.
	(build_x_modify_expr): Ditto.
	(cp_build_modify_expr): New.
	(convert_for_initialization): Add tsubst_flags_t parameter.
	(cp_build_binary_op): Remove macro; add function declaration.
	(invalid_nonstatic_memfn_p): Add tsubst_flags_t parameter.
	(lvalue_or_else): Ditto.
	(build_functional_cast): Ditto.
	* typeck2.c (digest_init): Fix calls for SFINAE.
	(process_init_constructor_array): Ditto.
	(process_init_constructor_record): Ditto.
	(build_x_arrow): Ditto.
	(build_m_component_ref): Ditto.
	(build_functional_cast): Add SFINAE support.
	* pt.c (tsubst_copy_and_build): Add (more) SFINAE support.
	* semantics.c (simplify_loop_decl_cond): Fix calls for SFINAE.
	(finish_expr_stmt): Ditto.
	(finish_for_expr): Ditto.
	(finish_asm_stmt): Ditto.
	(finish_non_static_data_member): Ditto.
	(finish_qualified_id_expr): Ditto.
	(finish_call_expr): Add SFINAE support.
	(finish_increment_expr): Fix calls for SFINAE.
	(finish_unary_op_expr): Ditto.
	(simplify_aggr_init_expr): Ditto.
	(finish_omp_clauses): Ditto.
	(finish_omp_for): Ditto.
	(finish_omp_barrier): Ditto.
	(finish_omo_flush): Ditto.
	* decl2.c (grok_array_decl): Fix calls or SFINAE.
	(build_anon_union_vars): Ditto.
	(get_guard_cond): Ditto.
	(set_guard): Ditto.
	(one_static_initialization_or_destruction): Ditto.
	(do_static_initialization_or_destruction): Ditto.
	(generate_ctor_or_dtor_function): Ditto.
	(build_offset_ref_call_from_tree): Ditto.
	* parser.c (cp_parser_postfix_expression): Fix calls for SFINAE.
	(cp_parser_postfix_dot_deref_expression): Ditto.
	(cp_parser_unary_expression): Ditto.
	(cp_parser_new_expression): Ditto.
	(cp_parser_cast_expression): Ditto.
	(cp_parser_binary_expression): Ditto.
	(cp_parser_question_colon_clause): Ditto.
	(cp_parser_assignment_expression): Ditto.
	(cp_parser_expression): Ditto.
	(cp_parser_builtin_offsetof): Ditto.
	(cp_parser_template_argument): Ditto.
	(cp_parser_functional_cast): Ditto.

2008-03-24  Tom Tromey  <tromey@redhat.com>

	* lex.c (handle_pragma_interface): Don't copy the filename.
	(handle_pragma_implementation): Copy filename using xstrdup.

2008-03-21  Paolo Carlini  <pcarlini@suse.de>

	* cp-tree.h (IS_AGGR_TYPE): Rename to MAYBE_CLASS_TYPE_P.
	(SET_IS_AGGR_TYPE): Rename to SET_CLASS_TYPE_P.
	(IS_AGGR_TYPE_CODE): Rename to RECORD_OR_UNION_CODE_P.
	(PROMOTES_TO_AGGR_TYPE): Remove.
	(CLASS_TYPE_P, TYPE_NON_AGGREGATE_CLASS): Adjust.
	* typeck.c (unary_complex_lvalue, build_modify_expr,
	convert_for_initialization): Adjust.
	* init.c (is_aggr_type): Remove.
	(is_class_type): Add.
	(build_offset_ref, build_new_1, build_vec_delete_1, build_vec_init,
	build_delete): Adjust.
	* lex.c (make_aggr_type): Remove.
	(make_class_type): Add.
	(cxx_make_type): Adjust.
	* class.c (finish_struct_1, fixed_type_or_null, is_empty_class):
	Adjust.
	* decl.c (build_typename_type, make_typename_type,
	make_unbound_class_template, cxx_init_decl_processing,
	check_tag_decl, groktypename, start_decl_1, layout_var_decl,
	check_initializer, cp_finish_decl, build_ptrmemfunc_type, grokparms,
	grok_op_properties, xref_tag, check_function_type): Adjust.
	* call.c (check_dtor_name, standard_conversion, implicit_conversion,
	add_builtin_candidate, add_builtin_candidates,
	build_user_type_conversion_1, convert_like_real, build_cxx_call,
	is_subseq, compare_ics): Adjust.
	* method.c (use_thunk): Adjust.
	* rtti.c (build_dynamic_cast_1, create_pseudo_type_info,
	create_tinfo_types): Adjust.
	* cvt.c (cp_convert_to_pointer, convert_to_pointer_force,
	build_up_reference, convert_to_reference, convert_from_reference,
	ocp_convert, build_expr_type_conversion): Adjust.
	* tree.c (bind_template_template_parm, error_type): Adjust.
	* dump.c (cp_dump_tree): Adjust.
	* search.c (lookup_member): Adjust.
	* friend.c (make_friend_class, do_friend): Adjust.
	* typeck2.c (store_init_value, process_init_constructor_array,
	process_init_constructor_record, build_x_arrow, build_m_component_ref,
	build_functional_cast): Adjust.
	* pt.c (finish_member_template_decl, process_template_parm,
	lookup_template_class, tsubst_function_type, tsubst,
	tsubst_copy_and_build, get_template_base, bt_instantiate_type_proc):
	Adjust.
	* semantics.c (begin_class_definition, finish_base_specifier,
	finish_typeof, cxx_omp_predetermined_sharing, finish_decltype_type):
	Adjust.
	* name-lookup.c (constructor_name_p, push_overloaded_decl,
	do_class_using_decl, lookup_qualified_name,
	maybe_process_template_type_declaration): Adjust.
	* decl2.c (grok_array_decl, check_member_template,
	constrain_class_visibility): Adjust.
	* parser.c (cp_parser_class_name): Adjust.

2008-03-18  Paolo Bonzini  <bonzini@gnu.org>

	 * cp-lang.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Delete.

2008-03-17  Jason Merrill  <jason@redhat.com>

	PR c++/35548
	* call.c (reference_binding): Check LOOKUP_NO_TEMP_BIND when binding
	a temp directly to a reference as per DR391.

2008-03-12  Richard Guenther  <rguenther@suse.de>

	PR c++/35469
	Revert:
	2008-02-04  Richard Guenther  <rguenther@suse.de>

	 PR java/35035
	 * decl.c (record_builtin_java_type): Make jboolean a
	 integer type again where its mode doesn't match that of bool.

	2008-01-25  Richard Guenther  <rguenther@suse.de>

	 PR c++/33887
	 * decl.c (record_builtin_java_type): Make __java_boolean
	 a variant of bool.
	 * typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check
	 after TYPE_MAIN_VARIANT check.

2008-03-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35328
	* semantics.c (finish_omp_clauses): Look through NOP_EXPR even
	if errorcount.

	PR c++/35337
	* semantics.c (finish_omp_clauses): Use %qD instead of %qE for
	DECL_P in not a variable and appears more than once error messages.

2008-03-07  Paolo Bonzini  <bonzini@gnu.org>

	Revert:

	2008-02-06  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/35049
	PR c++/35096
	* typeck.c (structural_comptypes): Call cp_comptypes.
	(comptypes): New; called from the C/C++ common bits to perform
	strict checks.
	(cp_comptypes): Renamed from comptypes, which is already used,
	with a different signature, by the C++ front end.
	(build_reinterpret_cast_1): Call cp_comptypes.
	(ptr_reasonably_similar): Ditto.
	* decl.c (decls_match): Ditto.
	* cvt.c (convert_to_reference): Ditto.
	* cp-tree.h (same_type_p): Ditto.
	(same_or_base_type_p): Ditto.
	(comptypes): Rename to cp_comptypes.
	* pt.c (canonical_type_parameter): Call cp_comptypes.

2008-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* cp-objcp-common.c (cxx_types_compatible_p): Remove obsolete
	test for equivalence between pointer and references.

2008-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 24924
	* class.c (finish_struct_anon): Use permerror instead of pedwarn.
	(check_field_decls): Likewise.
	(note_name_declared_in_class): Likewise.
	* call.c (build_new_op): Likewise.
	(convert_like_real): Likewise.
	(build_over_call): Likewise.
	* lex.c (unqualified_fn_lookup_error): Likewise.
	* parser.c (cp_parser_template_id): Likewise.
	* cvt.c (warn_ref_binding): Likewise.
	(convert_to_reference): Likewise.
	(ocp_convert): Likewise.
	(convert_to_void): Use error instead of pedwarn.
	* error.c (cp_cpp_error): Use pedantic_warning_kind.
	* decl.c (compute_array_index_type): Use constant_expression_error.

2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>

	* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note
	that auto is either a storage class or a simple type specifier,
	depending on the dialect.
	(cp_parser_decl_specifier_seq): Complain about `auto' as a storage
	specifier in C++98 mode, error in C++0x mode (since we don't
	support auto as a type specifier, yet).
	(cp_parser_storage_class_specifier_opt): Don't treat `auto' as a
	storage specifier in C++0x mode.
	(cp_parser_simple_type_specifier): Parse `auto' as a
	simple-type-specifier, but error because we don't support it yet.

2008-02-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* parser.c (cp_parser_nonclass_name): New.
	(cp_parser_pseudo_destructor_name): Use it instead of
	cp_parser_type_name.
	(cp_parser_type_name): Move code to cp_parser_nonclass_name.

2008-02-29  Tom Tromey  <tromey@redhat.com>

	* parser.c (struct cp_token) <input_file_stack_index>: Remove.
	(cp_lexer_get_preprocessor_token): Update.
	(cp_lexer_set_source_position_from_token): Don't call
	restore_input_file_stack.
	* lex.c (cxx_init): Don't use push_srcloc or pop_srcloc.

2008-02-28  Richard Guenther  <rguenther@suse.de>

	Revert:
	2008-02-26  Richard Guenther  <rguenther@suse.de>

	* decl.c (duplicate_decls): Remove decl from global mapping
	before ggc_freeing it.

2008-02-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35368
	* rtti.c: Include c-pragma.h.
	(push_abi_namespace, pop_abi_namespace): New functions.
	(build_dynamic_cast_1, tinfo_base_init, get_pseudo_ti_index,
	create_tinfo_types, emit_support_tinfos): Use them.
	* Make-lang.in (cp/rtti.o): Depend on $(C_PRAGMA_H).

2008-02-26  Jason Merrill  <jason@redhat.com>

	PR c++/35315
	* decl.c (grokdeclarator): Allow a typedef of an unnamed struct
	to name the struct for linkage purposes even if it has attributes.
	(start_decl): In that case, set ATTR_FLAG_TYPE_IN_PLACE.

2008-02-26  Tom Tromey  <tromey@redhat.com>

	* parser.c (eof_token): Remove old location code.
	(check_empty_body): Remove test of USE_MAPPED_LOCATION.
	* decl2.c (generate_ctor_or_dtor_function): Remove old location
	code.
	(cp_write_global_declarations): Likewise.
	* lex.c (cxx_init): Remove old location code.
	(handle_pragma_implementation): Remove test of
	USE_MAPPED_LOCATION.
	* pt.c (tsubst): Remove old location code.
	* error.c (cp_print_error_function): Remove test of
	USE_MAPPED_LOCATION.
	* decl.c (pop_label): Remove old location code.
	(finish_function): Likewise.

2008-02-26  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR 26264
	* call.c (magic_varargs_p):  Remove BUILT_IN_STDARG_START.

2008-02-26  Richard Guenther  <rguenther@suse.de>

	* decl.c (duplicate_decls): Remove decl from global mapping
	before ggc_freeing it.

2008-02-26  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/35323
	 * name-lookup.c (arg_assoc_type): Handle FIXED_POINT_TYPE.

2008-02-26  Manuel Lopez-Ibanez <manu@gcc.gnu.org>

	* typeck.c (build_class_member_access_expr): Add appropriate
	OPT_W* parameter to warning.
	(build_reinterpret_cast_1): Likewise.
	* name-lookup.c (push_overloaded_decl): Likewise.

2008-02-25  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/35333
	 * error.c (dump_expr): Handle CONJ_EXPR.

2008-02-25  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/35338
	 * error.c (dump_type): Handle FIXED_POINT_TYPE.
	(dump_expr): Handle FIXED_CST.

2008-02-24  Jason Merrill  <jason@redhat.com>

	* parser.c (cp_parser_declaration): Handle "inline namespace".
	(cp_parser_namespace_definition): Likewise.

	PR c++/33486
	* name-lookup.c (arg_assoc_namespace): Look down into inline
	namespaces, too.

2008-02-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c (check_for_casting_away_constness): Use 1 single
	argument, the type of cast, to decide what diagnostics generate.
	(build_static_cast_1): Remove unused code. Update call to
	check_for_casting_away_constness.
	(build_reinterpret_cast_1): Update call to
	check_for_casting_away_constness.
	(build_const_cast_1): Likewise.

2008-02-24  Paolo Carlini  <pcarlini@suse.de>

	* error.c (dump_expr): Don't deal directly with NEW_EXPR (and
	VEC_NEW_EXPR), forward to pp_expression.
	* cxx-pretty-print.c (pp_cxx_new_expression): Fix FIXME.

2008-02-24  Danny Smith  <dannysmith@users.sourceforge.net>

	PR c++/34749
	* friend.c (do_friend): Call cplus_decl_attributes earlier.

2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR C++/34715
	* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS for
	template decls' function decl.

2008-02-22  Paolo Carlini  <pcarlini@suse.de>

	PR c++/35282
	Revert:
	2008-02-14  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/28743
	 * pt.c (determine_specialization): In case of function templates,
	when the type of DECL does not match FN there is no match.

2008-02-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>

	PR c/19999
	* typeck.c (build_binary_op): Warn about floating point
	comparisons if FLOAT_TYPE_P, not only for REAL_TYPE.

2008-02-19  Jason Merrill  <jason@redhat.com>

	PR c++/34950
	* pt.c (resolve_overloaded_unification): Set processing_template_decl
	while we look for possible bindings.

2008-02-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/35028
	* cp-gimplify.c (cxx_omp_clause_apply_fn): Handle vararg copy ctors.

	PR c++/34964
	PR c++/35244
	* semantics.c (finish_omp_threadprivate): Do nothing for error_operand_p
	vars.  Afterwards ensure v is VAR_DECL.

	PR c++/35078
	* parser.c (cp_parser_omp_for_loop): If DECL has REFERENCE_TYPE, don't
	call cp_finish_decl.
	* semantics.c (finish_omp_for): Fail if DECL doesn't have integral type
	early.

2008-02-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/35023
	PR c++/35024
	PR c++/35026
	* pt.c (finish_member_template_decl): If the type in a TYPE_DECL
	is error_mark_node, return an error early.
	(find_parameter_packs_r): Pass the pointer set along to recursive
	calls of cp_walk_subtrees; don't try to manage the pointer set
	ourselves.
	(uses_parameter_packs): Pass the pointer set to cp_walk_tree.
	(make_pack_expansion): Ditto.
	(check_for_bare_parameter_packs): Ditto. Also, don't bother taking
	a second pass through the tree with find_parameter_packs_r; that
	second pass no longer does anything.
	(push_template_decl_real): If we have an erroneous declaration,
	set its type to error_mark_node before returning an error.

2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34050
	* pt.c (tsubst_initializer_list): Deal with the use of
	VOID_TYPE_NODE to indicate value-initialization of the bases.

2008-02-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>
	    Jason Merrill  <jason@redhat.com>

	PR c++/5645
	PR c++/11159
	* class.c (type_has_user_nondefault_constructor): New fn.
	* cp-tree.h: Declare it.
	* init.c (emit_mem_initializers): Use it for -W warning about
	missing base initializer.

2008-02-14  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/28743
	 * pt.c (determine_specialization): In case of function templates,
	when the type of DECL does not match FN there is no match.

2008-02-13  Jakub Jelinek  <jakub@redhat.com>
	    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/35138
	* parser.c (cp_parser_pseudo_destructor_name): If next tokens
	are not identifier :: ~, return before calling cp_parser_type_name.

2008-02-13  Jason Merrill  <jason@redhat.com>

	PR c++/34962, c++/34937, c++/34939
	* decl2.c (is_late_template_attribute): Always defer attributes
	vector_size and weak.

	PR c++/34774
	* pt.c (value_dependent_expression_p): Look into DECL_INITIAL
	of enumerators, too.

2008-02-12  Jason Merrill  <jason@redhat.com>

	PR c++/34824
	* call.c (convert_like_real): Pass LOOKUP_NO_CONVERSION to build_temp
	if we're doing conversions to call a user-defined conversion function.

2008-02-12  Steven Bosscher  <steven@gcc.gnu.org>

	PR c++/29048
	* semantics.c (finish_qualified_id_expr): Avoid duplicate access
	check here, too.

2008-02-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34862
	* init.c (build_new_1): Don't create placement_expr before
	constructing alloc_call.  Verify that the pointer is passed by
	value to operator new.

2008-02-11  Jason Merrill  <jason@redhat.com>

	PR c++/35097
	* pt.c (tsubst): Don't look up a template typedef in an explicit
	specialization.

2008-02-11  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/35113
	* tree.c (cp_build_qualified_type_real): When building a
	cv-qualified array type, build it as a unique type with
	build_cplus_array_type_1 and then adopt the unqualified type's
	main variant.

2008-02-11  Paolo Carlini  <pcarlini@suse.de>

	PR c++/35077
	* decl.c (groktypename): Check grokdeclarator return.

2008-02-10  Jason Merrill  <jason@redhat.com>

	PR c++/34094
	* decl2.c (cp_write_global_declarations): Don't write out static
	data members with DECL_IN_AGGR_P set.

2008-02-08  Jason Merrill  <jason@redhat.com>

	PR c++/35116
	* tree.c (build_target_expr_with_type): Handle void initializer.
	(bot_manip): Remap slot before recursing.

2008-02-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	PR other/35107
	* Make-lang.in (cc1plus-dummy, cc1plus): Add $(GMPLIBS).

2008-02-06  Alexandre Oliva  <aoliva@redhat.com>

	PR c++/35056
	* tree.c: Include tree-flow.h.
	(build_target_expr): Check type compatibility.
	* Make-lang.in (cp/tree.o): Depend on $(TREE_FLOW_H).
	* call.c (convert_like_real): Convert bitfield to expected type.

2008-02-06  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/35049
	PR c++/35096
	* typeck.c (structural_comptypes): Call cp_comptypes.
	(comptypes): New; called from the C/C++ common bits to perform
	strict checks.
	(cp_comptypes): Renamed from comptypes, which is already used,
	with a different signature, by the C++ front end.
	(build_reinterpret_cast_1): Call cp_comptypes.
	(ptr_reasonably_similar): Ditto.
	* decl.c (decls_match): Ditto.
	* cvt.c (convert_to_reference): Ditto.
	* cp-tree.h (same_type_p): Ditto.
	(same_or_base_type_p): Ditto.
	(comptypes): Rename to cp_comptypes.
	* pt.c (canonical_type_parameter): Call cp_comptypes.

2008-02-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33553
	* pt.c (tsubst) <case INTEGER_TYPE>: Don't issue error if max is
	value dependent expression.

2008-02-05  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/35074
	* decl2.c (save_template_attributes): When we're modifying the
	TYPE_MAIN_VARIANT to add new attributes, be sure to also modify
	all of the other variants to add those same attributes. Otherwise,
	the main variant will be inconsistent with those other variants.

2008-02-04  Richard Guenther  <rguenther@suse.de>

	PR java/35035
	* decl.c (record_builtin_java_type): Make jboolean a
	integer type again where its mode doesn't match that of bool.

2008-02-02  Jason Merrill  <jason@redhat.com>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/33916
	* init.c (build_value_init_1): New function.
	(build_value_init): New function.
	* typeck2.c (build_functional_cast): Call it.
	* cp-gimplify.c (cp_gimplify_init_expr): Handle its output.

	* cp-tree.h (TYPE_HAS_USER_CONSTRUCTOR): Rename from
	TYPE_HAS_CONSTRUCTOR.
	* class.c (finish_struct_bits, maybe_warn_about_overly_private_class,
	add_implicitly_declared_members): Adjust.
	(check_field_decls): Adjust. Remove warnings about reference/const
	in class without constructor.
	(check_bases_and_members): Adjust.  Give those warnings here instead.
	* decl.c (fixup_anonymous_aggr): Adjust.
	(check_initializer): Adjust, clarify logic slightly.
	(grok_special_member_properties): Adjust, only set if user-provided.
	* rtti.c (create_tinfo_types): Don't set.
	* cvt.c (ocp_convert): Remove exception for vtable_entry_type et al.
	Use same_type_ignoring_top_level_qualifiers_p.
	* pt.c (check_explicit_specialization): Adjust.
	(instantiate_class_template): Adjust.

2008-01-31  Douglas Gregor  <doug.gregor@gmail.com>
	    Jakub Jelinek  <jakub@redhat.com>

	PR c++/34935
	PR c++/34936
	* typeck.c (structural_comptypes): Handle comparisons of
	VOID_TYPE, BOOLEAN_TYPE, INTEGER_TYPE, FIXED_POINT_TYPE, and
	REAL_TYPE nodes.
	* mangle.c (write_builtin_type): Map down to the canonical type,
	which will be one of the predefined type nodes.

2008-01-29  Michael Meissner  <michael.meissner@amd.com>

	PR 35004
	* cp-tree.h (struct full_lang_decl): Make tree_code bitfield 16
	bits to allow for expansion of the number of middle end tree
	codes.

2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34055
	PR c++/34103
	PR c++/34219
	PR c++/34606
	PR c++/34753
	PR c++/34754
	PR c++/34755
	PR c++/34919
	PR c++/34961
	* typeck.c (check_return_expr): Tweak call to
	check_for_bare_parameter_packs.
	* class.c (add_method): Be careful with error_mark_nodes.
	* cp-tree.h (check_for_bare_parameter_packs): Remove "*" from
	signature.
	* pt.c (struct find_parameter_pack_data): Remove
	SET_PACKS_TO_ERROR.
	(find_parameter_packs_r): Don't use SET_PACKS_TO_ERROR.
	(uses_parameter_packs): Don't set SET_PACKS_TO_ERROR.
	(make_pack_expansion): Ditto.
	(check_for_bare_parameter_packs): Parameter is now a tree, not a
	tree*.
	(process_template_parm): Tweak call to
	check_for_bare_parameter_packs.
	(push_template_decl_real): Tweak calls to
	check_for_bare_parameter_packs. If bare parameter packs are found
	in the list of exceptions, clear out that list after giving an
	error.
	* semantics.c (finish_cond): Tweak call to
	check_for_bare_parameter_packs.
	(finish_expr_stmt): Ditto.
	(finish_for_expr): Ditto.
	(finish_switch_cond): Ditto.
	(finish_mem_initializers): Ditto.
	(finish_member_declaration): Ditto.
	(finish_static_assert): Check for bare parameter packs in the
	condition.
	* decl2.c (cplus_decl_attributes): Check for bare parameter packs in the
	attributes of a declaration.
	* parser.c (cp_parser_using_declaration): Tweak call to
	check_for_bare_parameter_packs.
	(cp_parser_base_clause): Ditto.

2008-01-28  Jason Merrill  <jason@redhat.com>

	PR c++/35007
	* class.c (build_base_path): Fix !want_pointer case.

2008-01-27  Jason Merrill  <jason@redhat.com>

	PR c++/27177
	* class.c (build_base_path): Fix previous change.

2008-01-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34965
	* error.c (dump_expr): Handle TRUTH_AND_EXPR, TRUTH_OR_EXPR
	and TRUTH_XOR_EXPR.

2008-01-26  Richard Guenther  <rguenther@suse.de>

	PR c++/34235
	* typeck.c (build_binary_op): Remove code to shorten compares.

2008-01-25  Richard Guenther  <rguenther@suse.de>

	PR c++/33887
	* decl.c (record_builtin_java_type): Make __java_boolean
	a variant of bool.
	* typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check
	after TYPE_MAIN_VARIANT check.

2008-01-25  Jason Merrill  <jason@redhat.com>

	PR c++/27177
	* class.c (build_base_path): Don't mess with virtual access if
	skip_evaluation.
	* call.c (standard_conversion): Don't check whether source type
	is complete.

	* decl2.c (is_late_template_attribute): Don't defer attribute
	visibility just because the type is dependent.

2008-01-25  Jason Merrill  <jason@redhat.com>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/31780
	* call.c (standard_conversion): Allow conversion from integer/real
	to complex.
	(compare_ics): Such a conversion is worse than a normal arithmetic
	conversion.

2008-01-25  Richard Guenther  <rguenther@suse.de>

	PR c++/33887
	* cp-lang.c (LANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS): Define
	to true.

2008-01-24  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/34603
	 * pt.c (push_template_decl_real): Return error_mark_node in case
	of template definition of non-template.

2008-01-24  Jason Merrill  <jason@redhat.com>

	PR c++/34913
	* decl2.c (is_late_template_attribute): Defer any attribute with
	dependent args.  Also defer type attributes if the type is dependent.

2008-01-22  Jakub Jelinek  <jakub@redhat.com>
	    Alexandre Oliva  <aoliva@redhat.com>

	PR c++/33984
	* call.c (reference_binding): For bitfields use the declared bitfield
	type.
	(add_builtin_candidates): Likewise.
	* class.c (layout_class_type): For bitfields copy over the
	original type quals.

2008-01-22  Jason Merrill  <jason@redhat.com>

	PR c++/28560
	* decl.c (groktypename): Also ignore attributes on dependent
	possibly-class types.

	PR c++/34912
	* friend.c (do_friend): Check for prior declaration of a friend
	function of a local class.
	* name-lookup.c (lookup_name_innermost_nonclass_level):
	No longer static.
	* name-lookup.h: Declare it.

2008-01-22  Tom Tromey  <tromey@redhat.com>

	PR c++/34829:
	* init.c (build_new_1): Only disallow Java aggregates.

2008-01-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34607
	* semantics.c (finish_omp_for): Don't call c_finish_omp_for
	if decl or init is error_mark_node.

	PR c++/34918
	* error.c (dump_expr): Handle VECTOR_CST.

2008-01-21  Jason Merrill  <jason@redhat.com>

	PR c++/33959
	* pt.c (tsubst_aggr_type): Make sure our context is complete.

	PR c++/34573
	* pt.c (retrieve_local_specialization): Robustify.
	(tsubst_pack_expansion, tsubst_decl): Remove redundant checks.

	PR c++/34846
	* pt.c (tsubst): Only call retrieve_local_specialization if the
	original typedef was in a function template.

	PR c++/34196
	* decl.c (wrap_cleanups_r): Set TRY_CATCH_IS_CLEANUP.

2008-01-21  Richard Guenther  <rguenther@suse.de>

	PR c++/34850
	* error.c (cp_print_error_function): Deal with recursive
	BLOCK trees.

2008-01-20  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/34891
	 * error.c (dump_expr): Deal with VIEW_CONVERT_EXPR.

2008-01-20  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/34776
	PR c++/34486
	 * name-lookup.c (do_class_using_decl): Do not call constructor_name_p
	on non-IS_AGGR_TYPE scope.
	(constructor_name_p): Assert IS_AGGR_TYPE.

2008-01-18  Ian Lance Taylor  <iant@google.com>

	PR c++/33407
	* decl.c (duplicate_decls): Copy DECL_IS_OPERATOR_NEW flag.
	(grok_op_properties): For NEW_EXPR and VEC_NEW_EXPR set
	DECL_IS_OPERATOR_NEW flag.

2008-01-16  Richard Guenther  <rguenther@suse.de>

	PR c++/33819
	* typeck.c (is_bitfield_expr_with_lowered_type): Recurse
	for conversions to type variants.

2008-01-15  Andreas Tobler  <a.tobler@schweiz.org>

	* parser.c (cp_parser_template_parameter): Fix C90 issue with mixing
	declaration and code.  Update copyright year.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34399
	* friend.c (do_friend): Don't query TYPE_BEING_DEFINED unless we
	know we have a class type.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34751
	* pt.c (coerce_template_parameter_pack): When substituting into
	the type of a non-type template parameter pack. use the
	deduced/substituted arguments.
	* parser.c (declarator_can_be_parameter_pack): A pointer-to-member
	can be a parameter pack with the ellipsis following it.  When we
	have an erroneous declaration, allow it to be a parameter pack.
	(cp_parser_template_parameter): Complain about default
	arguments on non-type template parameter packs, and parse them
	using the new cp_parser_default_argument.
	(cp_parser_parameter_declaration): Complain about parameter packs
	with default arguments. Move parsing of default arguments into a
	new function, cp_parser_default_argument.
	(cp_parser_default_argument): New; extracted from
	cp_parser_parameter_declaration.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34051
	PR c++/34055
	PR c++/34102
	PR c++/34103
	* typeck.c (check_return_expr): If there are bare parameter packs
	in the return value, set it to error_mark_node.
	* tree.c (cp_walk_subtrees): Walk USING_DECL nodes.
	* pt.c (find_parameter_packs_r): Look at the type of
	IDENTIFIER_NODEs (e.g., for user-defined conversions).
	(check_for_bare_parameter_packs): Flip the result: now returns
	TRUE when there were bare parameter packs, FALSE otherwise.
	(push_template_decl_real): Deal with flipped result of
	check_for_bare_parameter_packs.
	* semantics.c (finish_cond): If there are bare parameter packs in
	the conditional, set it to error_mark_node.
	(finish_expr_stmt): If there are bare parameter packs in the
	expression, set it to error_mark_node.
	(finish_for_expr): Ditto.
	(finish_switch_cond): If there are bare parameter packs in
	the conditional, set it to error_mark_node.
	(finish_mem_initializers): If there are bare parameter packs in
	the member initializer, set it to error_mark_node.
	(finish_member_declaration): Check the attributes of the
	declaration for bare parameter packs, and remove the attributes if
	any have bare parameter packs.
	* parser.c (cp_parser_using_declaration): Check the using
	declaration for bare parameter packs.
	(cp_parser_base_clause): If there are bare parameter packs in a
	base specifier, don't add it to the chain.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34314
	* error.c (dump_simple_decl): Display ellipsis for template
	non-type parameter packs.
	(dump_decl): Display ellipsis for template type parameter packs.
	(dump_template_decl): Display ellipsis for template template
	parameter packs.
	* pt.c (redeclare_class_template): When redeclaring a class
	template, check for collisions between template parameters and
	template parameter packs.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33964
	* pt.c (process_partial_specialization): Don't mark template
	parameters that occur in non-deduced contexts.
	(struct pair_fn_data): Add include_nondeduced_p.
	(for_each_template_parm_r): Only visit non-deduced contexts if
	include_nondeduced_p is set.
	(for_each_template_parm): Added parameter include_nondeduced_p,
	which states whether template parameters found in non-deduced
	contexts should be visited.
	(uses_template_parms): Visit all template parameters, even those
	in non-deduced contexts.

2008-01-15  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34052
	* pt.c (check_default_tmpl_args): Check for parameter packs that
	aren't at the end of a primary template.
	(push_template_decl_real): Remove check for parameter packs that
	aren't at the end of a primary template; that now happens in
	check_default_tmpl_args.
	* semantics.c (finish_template_template_parm): Use
	check_default_tmpl_args to check for errors in the template
	parameter list.

2008-01-12  Doug Kwan  <dougkwan@google.com>

	* decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers
	instead of OPT_Wreturn_type in warning due to ignored return type
	qualifiers.
	* pt.c: (tsubst_function_type): Use OPT_Wignored_qualifiers
	instead of OPT_Wreturn_type in warning due to ignored return type
	qualifiers.

2008-01-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33890
	* semantics.c (finish_omp_for): Don't call
	fold_build_cleanup_point_expr if processing_template_decl.

2008-01-04  Paolo Carlini  <pcarlini@suse.de>
	    Jakub Jelinek  <jakub@redhat.com>

	PR c++/34611
	* error.c (dump_template_argument): Deal with TREE_LIST.

2008-01-01  Douglas Gregor  <doug.gregor@gmail.com>

	* parser.c (cp_parser_check_decl_spec): Don't warn about "long
	long" in C++0x mode; change the warning to note that "long long"
	is only unsupported in C++98 mode.

2007-12-20  Jason Merrill  <jason@redhat.com>

	PR c++/34111
	* call.c (standard_conversion): Derived-to-base is considered a
	standard conversion.

2007-12-19  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34513
	* parser.c (cp_parser_omp_parallel): For non-combined parallel
	call cp_parser_statement rather than
	cp_parser_already_scoped_statement.

2007-12-18  Jason Merrill  <jason@redhat.com>

	PR c++/34206
	* pt.c (tsubst_aggr_type): Do nothing if the type already doesn't
	use template parms.
	(dependent_type_p_r): Handle the domain of an array.

2007-12-18  Douglas Gregor  <doug.gregor@gmail.com>
	     Jakub Jelinek  <jakub@redhat.com>

	PR c++/32565
	PR c++/33943
	PR c++/33965
	* pt.c (template_template_parm_bindings_ok_p): New; verifies
	bindings of template template parameters after all template
	arguments have been deduced.
	(coerce_template_parms): Don't complain when COMPLAIN doesn't
	include tf_error.
	(fn_type_unification): Use template_template_parm_bindings_ok_p.
	(unify): Deal with variadic, bound template template parameters.
	(get_class_bindings): Use template_template_parm_bindings_ok_p.

2007-12-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34488
	* decl.c (grokdeclarator): Reject friend sfk_constructor
	FUNCTION_TYPE.

2007-12-17  Jakub Jelinek  <jakub@redhat.com>

	PR c/34506
	* parser.c (cp_parser_omp_all_clauses): Accept optional comma
	in between clauses.

2007-12-15  Alexandre Oliva  <aoliva@redhat.com>

	PR debug/7081
	* cp-lang.c (cp_classify_record): New.
	(LANG_HOOKS_CLASSIFY_RECORD): Override.

2007-12-11  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34238
	* decl2.c (cp_write_global_declarations): Revert 2007-11-22 change.

	PR c++/34364
	* rtti.c (build_dynamic_cast): Call convert_from_reference even for
	dynamic_cast in a template.

2007-12-10  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/34059
	* typeck.c (build_class_member_access_expr): Compute MEMBER_SCOPE from
	MEMBER's BASELINK_ACCESS_BINFO instead of its BASELINK_BINFO.

2007-12-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34395
	* error.c (dump_type_prefix, dump_type_suffix): Handle
	TYPE_PACK_EXPANSION.

	PR c++/34394
	* error.c (dump_expr): Handle ABS_EXPR.

2007-12-09  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34178
	PR c++/34340
	* repo.c (repo_emit_p): Return 2 for DECL_INTEGRAL_CONSTANT_VAR_P
	in class scope rather than DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.
	Return 2 also if DECL_EXPLICIT_INSTANTIATION.
	* decl2.c (import_export_decl): Don't make VAR_DECLs import_p when
	flag_use_repository and repo_emit_p returned 2.

2007-12-06  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34336
	* tree.c (stabilize_call, stabilize_init): Do nothing if
	processing_template_decl.

2007-12-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34271
	* semantics.c (finish_decltype_type): For SCOPE_REF issue an
	error instead of assertion failure.
	* parser.c (cp_parser_decltype): If closing paren is not found,
	return error_mark_node.

2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/34101
	* name-lookup.c (arg_assoc_template_arg): Recurse on argument
	packs.
	(arg_assoc_type): We don't need to handle TYPE_ARGUMENT_PACK here,
	since arg_assoc_template_arg will deal with them (better).

2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33509
	* pt.c (tsubst_exception_specification): Handle substitutions into
	member templates, where tsubst_pack_expansion returns a
	TYPE_PACK_EXPANSION.

2007-12-04  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33091
	* pt.c (unify_pack_expansion): If we didn't deduce any actual
	bindings for the template parameter pack, don't try to keep the
	empty deduced arguments.
	(unify): If a parameter is a template-id whose template argument
	list contains a pack expansion that is not at the end, then we
	cannot unify against that template-id.

2007-12-02  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/34061
	 * pt.c (current_template_args): Use error_operand_p.

2007-12-02  Paolo Carlini  <pcarlini@suse.de>

	 PR c++/34273
	 * error.c (dump_decl): Handle TREE_BINFO.

2007-12-01  Ollie Wild  <aaw@google.com>

	PR c++/8171
	* typeck.c (build_binary_op): Add conversion of pointers to function
	members appearing as operands to the equality operators.

2007-11-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34275
	* error.c (dump_expr): Handle OBJ_TYPE_REF.

2007-11-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34270
	* tree.c (lvalue_p_1) <case COND_EXPR>: Handle x ?: y
	in templates.
	* typeck.c (is_bitfield_expr_with_lowered_type) <case COND_EXPR>:
	Likewise.

	PR c++/34267
	PR c++/34268
	* parser.c (cp_parser_decltype): Don't call finish_id_expression
	on ~type.
	* semantics.c (finish_decltype_type): Issue error on types, TYPE_DECLs
	and ~type early.

2007-11-27  Jakub Jelinek  <jakub@redhat.com>

	PR tree-optimization/34181
	* method.c (use_thunk): Don't inline the call in the thunk.

	PR c++/34213
	* tree.c (decl_linkage): Static data members and static member
	functions in anonymous ns classes are lk_external.

2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>

	PR c++/34081
	* decl.c (start_preparsed_function): Pass
	processing_template_decl for the new allocate_struct_function
	parameter.

2007-11-25  Richard Guenther  <rguenther@suse.de>

	* decl.c (poplevel): Use BLOCK_CHAIN.

2007-11-24  Ollie Wild  <aaw@google.com>

	* typeck.c (delta_from_ptrmemfunc): New function.
	(get_member_function_from_ptrfunc): Call delta_from_ptrmemfunc.
	(build_binary_op): Call delta_from_ptrmemfunc.

2007-11-23  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30293
	PR c++/30294
	* decl.c (cp_finish_decl): Disallow variable or field
	definitions if extern "Java" aggregates.
	(grokparms): Disallow parameters with extern "Java"
	aggregates.
	(check_function_type): Disallow function return values
	with extern "Java" aggregates.
	* init.c (build_new_1): Disallow placement new with
	extern "Java" aggregates.

2007-11-23  Mark Mitchell  <mark@codesourcery.com>
	    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/5310
	* call.c (convert_like_real): Build a zero constant when __null is
	converted to an integer type.

2007-11-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34094
	* decl2.c (cp_write_global_declarations): Issue error about static
	data members in anonymous namespace which are declared and used,
	but not defined.

2007-11-20  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34089
	* parser.c (cp_parser_class_head): Reject function template ids.

	PR c++/28879
	* tree.c (build_cplus_array_type_1): Don't pass any VLA types
	when processing_template_decl to build_array_type.

	PR c++/33962
	* pt.c (more_specialized_fn): Don't segfault if one or
	both argument list end with ellipsis.

2007-11-18  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30988
	* semantics.c (finish_call_expr): Set
	current_function_returns_abnormally if fn is noreturn FUNCTION_DECL
	or OVERLOAD with all noreturn functions.

2007-11-16  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34100
	* pt.c (apply_late_template_attributes): Do nothing if decl's type is
	error_mark_node.

2007-11-13  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34054
	PR c++/34056
	PR c++/34057
	PR c++/34058
	PR c++/34060
	* pt.c (find_parameter_packs_r): If ppd->set_packs_to_error,
	set to error_mark_node the outermost POINTER_TYPE to the pack if
	it is seen in a POINTER_TYPE.
	(push_template_decl_real): If check_for_bare_parameter_packs
	fails for function return type, set the return type to
	integer_type_node.  If check_for_bare_parameter_packs failed
	for non-function, return error_mark_node.

	PR c++/29225
	* call.c (build_new_op): Call resolve_args before calling
	build_over_call.

2007-11-11  Tom Tromey  <tromey@redhat.com>

	PR c++/17577:
	* lex.c (handle_pragma_implementation): Use cpp_included_before.

2007-11-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/8570
	* pt.c (redeclare_class_template): Update error message. Use a
	note to show the previous declaration.
	(tsubst_friend_class): Use the location of the friend template as
	the input location before calling redeclare_class_template.

2007-11-11  Jakub Jelinek  <jakub@redhat.com>

	PR c++/34068
	* semantics.c (finish_pseudo_destructor_expr): Handle
	object == error_mark_node.

2007-11-10  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32241
	* pt.c (tsubst_copy_and_build) <case COMPONENT_REF>: If object_type
	is not scalar type, let finish_class_member_access_expr handle
	diagnostics.  Pass BIT_NOT_EXPR argument to
	finish_pseudo_destructor_expr.  Handle SCOPE_REF properly.

2007-11-09  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33510
	* decl.c (cp_complete_array_type): If any of the initializer
	elements are pack expansions, don't compute the array size yet.

2007-11-08  Andrew Pinski  <pinskia@gmail.com>

	PR c++/30297:
	* tree.c (decl_linkage): Fields have no linkage.

2007-11-08  Daniel Jacobowitz  <dan@codesourcery.com>

	* class.c (build_ctor_vtbl_group): Lay out the new type and decl.

2007-11-07  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33045
	PR c++/33837
	PR c++/33838
	* semantics.c (finish_decltype_type): See through INDIRECT_REFs.
	Be careful with ERROR_MARK_NODEs.
	* parser.c (cp_parser_check_access_in_redeclaration): Handle NULL
	argument.

2007-11-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33501
	* call.c (build_over_call): Don't check TREE_ADDRESSABLE
	on incomplete type.

2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33977
	PR c++/33886
	* tree.c (c_build_qualified_type): Define bridge to
	cp_build_qualified_type.

2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/31439
	PR c++/32114
	PR c++/32115
	PR c++/32125
	PR c++/32126
	PR c++/32127
	PR c++/32128
	PR c++/32253
	PR c++/32566
	* typeck.c (check_return_expr): Pass address of retval to
	check_for_bare_parameter_packs.
	* class.c (build_base_field): Tolerate bases that have no layout
	due to errors.
	(end_of_base): Ditto.
	* tree.c (canonical_type_variant): Be careful with
	ERROR_MARK_NODE.
	* cp-tree.h (check_for_bare_parameter_packs): Now accepts a
	tree*.
	* pt.c (find_parameter_pack_data): Add set_packs_to_error field,
	which states whether parameter packs should be replaced with
	ERROR_MARK_NODE.
	(find_parameter_packs_r): Pass addresses to cp_walk_tree wherever
	possible. If set_packs_to_error is set true, replace the parameter
	pack with ERROR_MARK_NODE. Manage our own pointer sets.
	(uses_parameter_packs): Don't set parameter packs to
	ERROR_MARK_NODE.
	(check_for_bare_parameter_packs): Now takes a pointer to a tree,
	which may be modified (if it is a parameter pack). Instructs
	find_parameter_packs_r to replace parameter packs with
	ERROR_MARK_NODE (so that they won't cause errors later on).
	(process_template_parm): Pass pointer to
	check_for_bare_parameter_packs.
	(process_partial_specialization): Replace pack expansions before
	the end of the template argument list with ERROR_MARK_NODE.
	(push_template_decl_real): Pass pointer to
	check_for_bare_parameter_packs. Replace parameter packs not at the
	end of the template parameter list with ERROR_MARK_NODE.
	(convert_template_argument): Be more careful about using DECL_NAME
	on only declarations.
	(unify): Can't unify against ERROR_MARK_NODE.
	* semantics.c (finish_cond): Pass pointer to
	check_for_bare_parameter_packs.
	(finish_expr_stmt): Ditto.
	(finish_for_expr): Ditto.
	(finish_switch_cond): Pass pointer to
	check_for_bare_parameter_packs, and call it before we put the
	condition into the statement.
	(finish_mem_initializers): Pass pointer to
	check_for_bare_parameter_packs.
	(finish_member_declaration): Ditto.
	* parser.c (cp_parser_base_clause): Ditto.

2007-11-06  Jakub Jelinek  <jakub@redhat.com>

	PR target/33168
	* decl.c (cp_finish_decl): Call make_rtl_for_nonlocal_decl already
	with the final TREE_READONLY flag in place.  processing_template_decl
	is known to be 0 in this part of function.

	PR c++/33894
	* cp-tree.h: Update comment - TYPE_LANG_FLAG_0 is not
	OMP_ATOMIC_DEPENDENT_P in OMP_ATOMIC.
	* pt.c (tsubst_expr): Assert OMP_ATOMIC_DEPENDENT_P.
	* semantics.c (finish_omp_atomic): Revert most of the
	2007-02-05 changes, just keep the new representation of
	OMP_ATOMIC_DEPENDENT_P OMP_ATOMIC.

2007-11-05  H.J. Lu  <hongjiu.lu@intel.com>

	PR c++/33871
	* decl2.c (constrain_visibility): Clear DECL_ONE_ONLY if marked
	local.

2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33996
	PR c++/33235
	PR c++/33930
	* typeck.c (merge_types): Don't lose rvalue references when
	merging types.
	* call.c (build_over_call): Don't elide move constructors just
	because the copy constructor is trivial (!).
	(compare_ics): If comparing cv-qualifiers fails, we can still order
	based on binding lvalues vs. rvalues.

2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33939
	* pt.c (unify_pack_expansion): bring handling of function call
	arguments into line with type_unification_real.

2007-11-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c (build_binary_op): Use pedwarn instead of error for
	consistency.

2007-11-05  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33836
	* parser.c (cp_parser_unary_expression): For &&label call
	cp_parser_non_integral_constant_expression and return error_mark_node
	if it returned true.

	PR c++/33969
	* decl.c (grokdeclarator): Don't call build_memfn_type if type
	is neither FUNCTION_TYPE nor METHOD_TYPE.

2007-11-02  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33516
	* parser.c (cp_parser_nested_name_specifier_opt): Use
	TYPE_MAIN_VARIANT (new_scope) as scope if new_scope is an incomplete
	typedef of currently open class.

2007-11-02  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33495
	* error.c (dump_expr): Deal specially with statements.

2007-11-01  Jason Merrill  <jason@redhat.com>

	PR c++/30897
	* pt.c (push_template_decl_real): Set DECL_CONTEXT on template
	template parms.
	(lookup_template_class): Use it to get the outer template args
	for instantiating one.

	PR c++/29236
	* pt.c (reduce_template_parm_level): tsubst the parameters
	of a template template parm.

2007-11-01  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33955
	* pt.c (find_parameter_packs_r): Handle TYPENAME_TYPE.

2007-11-01  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32384
	* parser.c (cp_parser_postfix_dot_deref_expression): If
	POSTFIX_EXPRESSION is type dependent, try to parse it as pseudo dtor
	first and if that succeeds and type is SCALAR_TYPE_P, create
	PSEUDO_DTOR_EXPR.

	PR c++/32260
	* rtti.c (enum_tinfo_kind): Fix TK_TYPE_INFO_TYPE comment.
	(typeid_ok_p): Use the same alias set for abi::__type_info_pseudo
	as for std::type_info.

2007-10-31  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33494
	* cxx-pretty-print.c (pp_cxx_typeid_expression,
	pp_cxx_delete_expression): Change to static linkage.
	* cxx-pretty-print.h: Adjust declarations.
	* error.c (dump_expr, case EXPR_PACK_EXPANSION, TYPEID_EXPR,
	MEMBER_REF, DOTSTAR_EXPR, DELETE_EXPR, VEC_DELETE_EXPR,
	MODOP_EXPR): Forward to pp_expression.

	* cxx-pretty-print.c (pp_cxx_expression, case NON_DEPENDENT_EXPR):
	Fix typo.

2007-10-31 Christian Bruel  <christian.bruel@st.com>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/19531
	* typeck.c (check_return_expr): Don't set named_return_value_okay_p
	if retval is volatile.

2007-10-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33616
	* decl2.c (build_offset_ref_call_from_tree): Call
	build_non_dependent_expr on object prior to building ADDR_EXPR from it
	if FN is DOTSTAR_EXPR.

2007-10-30  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/31993
	PR c++/32252
	* pt.c (find_parameter_packs_r): Fix typo in comment.
	(convert_template_argument): Look at the pattern of a pack
	expansion to determine what kind of entity we're converting.
	(coerce_template_parameter_pack): When we have coerced a non-type
	template parameter pack, substitute into the type of that pack.
	(tsubst_pack_expansion): When our substitution of a parameter pack
	is a "trivial" substitution of itself, just substitute into the
	pack expansion rather than actually expanding.

2007-10-29  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33841
	* class.c (check_bitfield_decl): Don't set field's type to error_mark_node
	for non-integral type bitfields.  Return true if bitfield is correct, false
	error has been diagnosed.
	(check_field_decls): If check_bitfield_decl returned false, call also
	check_field_decl.

2007-10-28  Paolo Carlini  <pcarlini@suse.de>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/30659
	* pt.c (do_decl_instantiation): If the VAR_DECL is not a
	class member error out and return.

2007-10-27  Jakub Jelinek  <jakub@redhat.com>

	* error.c (reinit_cxx_pp): Initialize cxx_pp->enclosing_scope
	to current_function_decl rather than 0.

	PR c++/33844
	* cxx-pretty-print.c (pp_cxx_pm_expression) <case MEMBER_REF>: Print
	->* rather than .*.
	* error.c (dump_expr): Handle MEMBER_REF and DOTSTAR_EXPR.

2007-10-27  Jason Merrill  <jason@redhat.com>

	PR c++/5247
	* call.c (convert_default_arg): Detect recursion.

2007-10-27  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33842
	* cxx-pretty-print.h (pp_cxx_offsetof_expression): New prototype.
	* cxx-pretty-print.c (pp_cxx_primary_expression): Handle
	OFFSETOF_EXPR.
	(pp_cxx_offsetof_expression_1, pp_cxx_offsetof_expression): New
	functions.
	* error.c (dump_expr): Handle OFFSETOF_EXPR.

2007-10-26  Jason Merrill  <jason@redhat.com>

	PR c++/24791
	* pt.c (get_template_info): New fn.
	(template_class_depth): Use it.
	(push_template_decl_real): Check that the template args of the
	definition match the args of the previous declaration.

2007-10-26  Paolo Carlini  <pcarlini@suse.de>

	PR c++/31988
	* decl2.c (coerce_new_type): Do not allow a default argument for
	the first parameter.

2007-10-26  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33839
	* parser.c (cp_parser_decltype): Return ERROR_MARK_NODE if we
	don't see the leading '('. Only lookup names if we get an
	IDENTIFIER_NODE.

2007-10-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33744
	* parser.c (cp_parser_parenthesized_expression_list): Set
	greater_than_is_operator_p to true in between the parens.

2007-10-26  Paolo Carlini  <pcarlini@suse.de>

	PR c++/31747
	* decl.c (grokdeclarator): In case of conflicting specifiers
	just return error_mark_node.

2007-10-26  Ollie Wild  <aaw@google.com>

	* expr.c (cxx_expand_expr): Removed.
	* cp-tree.h (exx_expand_expr): Removed.
	* cp-objcp-common.h (LANK_HOOKS_EXPAND_EXPR): Replace cxx_expand_expr
	with c_expand_expr.

2007-10-25  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33843
	* cxx-pretty-print.c (pp_cxx_unqualified_id): Deal with BIT_NOT_EXPR.

2007-10-23  Jason Merrill  <jason@redhat.com>

	PR c++/25950 (DR 391)
	* call.c (struct conversion): Remove check_copy_constructor_p.
	(reference_binding): Always bind a reference directly to a
	compatible class rvalue.  Pass down LOOKUP_NO_TEMP_BIND during
	temporary creation.
	(check_constructor_callable): Remove.
	(convert_like_real): Don't call it.
	(initialize_reference): Don't call check_constructor_callable.
	(standard_conversion): Check LOOKUP_NO_CONVERSION instead of
	LOOKUP_CONSTRUCTOR_CALLABLE.  Don't require a temporary for base
	conversions if LOOKUP_NO_TEMP_BIND.
	(implicit_conversion): Pass through LOOKUP_NO_TEMP_BIND.
	(build_user_type_conversion_1): Pass through LOOKUP_NO_TEMP_BIND for
	second conversion.
	* cp-tree.h (LOOKUP_CONSTRUCTOR_CALLABLE): Remove.

2007-10-22  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33372
	* semantics.c (finish_omp_clauses): Check !type_dependent_expression_p
	before checking if its type is integral.

2007-10-22  Jason Merrill  <jason@redhat.com>

	PR c++/33620
	* class.c (finish_struct_bits): Copy TYPE_ATTRIBUTES.
	* pt.c (apply_late_template_attributes): Splice out dependent
	attributes from DECL_ATTRIBUTES.

	* decl.c (cxx_maybe_build_cleanup): Use build_address.

2007-10-17  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c (build_binary_op) : Use appropriate warning option
	instead of unnamed warning.

2007-10-16  Paolo Carlini  <pcarlini@suse.de>

	PR c++/31446
	* pt.c (current_template_args): Do not change TREE_LIST elements
	with a TREE_VALUE of error_mark_node.

2007-10-16  Mark Mitchell  <mark@codesourcery.com>

	* typeck.c (cp_apply_type_quals_to_decl): Expand documentation.
	* decl.c (start_decl): Tidy.
	(start_decl_1): Call cp_apply_type_quals_to_decl after completing
	the type.
	(grokdeclarator): Clarify comment.

2007-10-14  Andrew Pinski  <pinskia@gmail.com>

	PR c++/30303
	* decl.c (grokfndecl): Return NULL after the "definition of
	implicitly-declared" error happened.

2007-10-12  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/26698
	* call.c (build_user_type_conversion_1): Do not consider conversion
	functions to convert a (possibly cv-qualified) object to the (possibly
	cv-qualified) same object type (or a reference to it), to a (possibly
	cv-qualified) base class of that type (or a reference to it).

2007-10-12  Paolo Carlini  <pcarlini@suse.de>

	* pt.c (tsubst): Use template_parm_level_and_index.

2007-10-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32121
	* parser.c (cp_parser_compound_statement): Handle label-declarations
	at the beginning of the compound statement.
	(cp_parser_block_declaration): Issue diagnostics about __label__
	not at the beginning of a block.

2007-10-11  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33461
	* pt.c (coerce_template_parameter_pack): Do not pass error_mark_node
	to convert_template_argument.
	(coerce_template_parms): Return error_mark_node after fixed-length
	error.
	(tsubst_decl): Check for error_mark_node the return value of the
	first tsubst in 'case VAR_DECL'.

2007-10-08  Ollie Wild  <aaw@google.com>

	* typeck2.c (digest_init): Call cplus_expand_constant after
	convert_for_initialization.
	* cp-objcp-common.h (LANG_HOOKS_EXPAND_CONSTANT): Removed.
	* expr.c (cplus_expand_constant): Updated function description.

2007-10-04  Jason Merrill  <jason@redhat.com>

	PR c++/20416
	* call.c (initialize_reference): Handle local static reference
	temps properly.

2007-10-03  Jason Merrill  <jason@redhat.com>

	PR c++/32470
	* name-lookup.c (push_namespace_with_attrs): Fold back into...
	(push_namespace): Here.
	(handle_namespace_attrs): New fn for the attr code.
	(leave_scope): Don't pop_visibility.
	* name-lookup.h (struct cp_binding_level): Remove has_visibility.
	* parser.c (cp_parser_namespace_definition): Call
	handle_namespace_attrs and pop_visibility as appropriate.

	PR c++/11756
	* mangle.c (write_type) [TYPEOF_TYPE]: Just sorry.

2007-10-03  Alexandre Oliva  <aoliva@redhat.com>

	* decl.c (duplicate_decls): Preserve linkage flags for mere
	redeclarations of gnu_inline definitions.

2007-10-03  Jason Merrill  <jason@redhat.com>

	PR c++/15764
	* decl.c (wrap_cleanups_r): New fn.
	(wrap_temporary_cleanups): New fn.
	(initialize_local_var): Call it.

2007-09-29  Jason Merrill  <jason@redhat.com>

	PR c++/33094
	* decl.c (make_rtl_for_nonlocal_decl): It's ok for a member
	constant to not have DECL_EXTERNAL if it's file-local.

2007-09-28  Ollie Wild  <aaw@google.com>

	Revert
	2007-09-27  Ollie Wild  <aaw@google.com>

	* typeck2.c (digest_init): Call cplus_expand_constant after
	convert_for_initialization.
	* cp-objcp-common.h (LANG_HOOKS_EXPAND_CONSTANT): Removed.
	* expr.c (cplus_expand_constant): Updated function description.

2007-09-28  Jason Merrill  <jason@redhat.com>

	PR c++/10179
	* class.c (layout_empty_base): Take rli parameter, update
	rli->record_align if empty base has user-specified alignment.
	(build_base_field): Pass rli to it.

2007-09-28  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33213
	* error.c (dump_decl): Deal with TYPE_PACK_EXPANSION.

2007-09-28  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33118
	* error.c (dump_expr): Deal with ARGUMENT_PACK_SELECT.
	(dump_type): Use dump_template_argument for TYPE_ARGUMENT_PACK.
	(dump_parameters): Just call dump_type for argument packs too.

2007-09-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/31434
	* tree.c (cp_build_qualified_type_real): Handle TYPE_PACK_EXPANSION
	qualification by creating qualified PACK_EXPANSION_PATTERN and
	then calling make_pack_expansion on it.

2007-09-27  Ollie Wild  <aaw@google.com>

	* typeck2.c (digest_init): Call cplus_expand_constant after
	convert_for_initialization.
	* cp-objcp-common.h (LANG_HOOKS_EXPAND_CONSTANT): Removed.
	* expr.c (cplus_expand_constant): Updated function description.

2007-09-27  Jason Merrill  <jason@redhat.com>

	PR c++/33571
	* decl2.c (is_late_template_attribute): Don't crash on unknown
	attribute.

2007-09-27  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33493
	* error.c (dump_expr): Deal with DELETE_EXPR and VEC_DELETE_EXPR.
	* cxx-pretty-print.c (pp_cxx_delete_expression): Add missing
	spaces in the formatting.
	* cxx-pretty-print.h (pp_cxx_delete_expression): Declare.

2007-09-27  Jakub Jelinek  <jakub@redhat.com>

	* error.c (cxx_print_error_function): Add third argument, pass
	it over to lhd_print_error_function.
	(cp_print_error_function): If diagnostic->abstract_origin, print
	virtual backtrace.
	* cp-tree.h (struct diagnostic_info): New forward decl.
	(cxx_print_error_function): Add third argument.

2007-09-25  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/33207
	* name-lookup.c (pushtag): Do not create an implicit typedef before
	the associated type declaration is known to be valid.

2007-09-25  Jakub Jelinek  <jakub@redhat.com>

	* tree.c (cxx_printable_name): Compare FUNCTION_DECL uids
	rather than pointers.

2007-09-24  Danny Smith  <dannysmith@user.sourceforge.net>

	PR c++/14688
	 * search.c (check_final_overrider): Fail if
	targetm.comp_type_attributes returns 0.

2007-09-24  Jason Merrill  <jason@redhat.com>

	PR c++/33239
	* pt.c (resolve_typename_type): Don't look things up in the original
	template if it would mean losing template arguments.

2007-09-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33506
	* cp-tree.h (cxx_type_hash_eq): New prototype.
	* cp-objcp-common.h (LANG_HOOKS_TYPE_HASH_EQ): Redefine.
	* tree.c (cxx_type_hash_eq): New function.

2007-09-24  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33185
	* tree.c (cp_build_qualified_type_real): Build a canonical
	ARRAY_TYPE if the original ARRAY_TYPE was not a canonical type.

2007-09-24  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/33112
	PR c++/33185
	* tree.c (cplus_array_compare): Compare pointers, not types.
	(build_cplus_array_type_1): Store new array type into the hash
	table before building the canonical type; build the canonical type
	correctly.
	(cp_build_qualified_type_real): Put all of the array types with
	cv-qualified element types into the C++ array hash table, built as
	variants of the unqualified versions.

2007-09-23  Jason Merrill  <jason@redhat.com>

	PR c++/16370
	* decl.c (grokdeclarator): Look through implicit TYPE_DECLs
	for deprecation warnings.

2007-09-22  Jason Merrill  <jason@redhat.com>

	PR c++/15269
	* call.c (build_over_call): Warn about deprecated virtuals.

	PR c++/19407
	* cp-tree.h (ATTR_IS_DEPENDENT): New macro.
	(MAYBE_TAGGED_TYPE_P): Remove.
	* pt.c (apply_late_template_attributes): Check ATTR_IS_DEPENDENT
	instead of calling is_late_template_attribute again.
	(tsubst_decl) [TYPE_DECL]: Just check if the name is the tag.
	(tsubst): A typedef is a TYPE_NAME != TYPE_MAIN_DECL.
	Don't crash on typedefs from non-template classes.
	* decl2.c (grokfield): Don't sorry about attrs on template parms.
	(is_late_template_attribute): All attributes applied to template
	parms or typename types are dependent.  Static.
	(splice_template_attributes): Pass decl through.
	(save_template_attributes): Likewise.

2007-09-20  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33496
	* pt.c (tsubst_copy) <case SIZEOF_EXPR>: Handle error_mark_node
	returned from tsubst_pack_expansion.
	(tsubst_copy_and_build) <case SIZEOF_EXPR>: Likewise.
	(tsubst_copy_and_build) <case CONSTRUCTOR>: Likewise.

2007-09-20  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33460
	* semantics.c (finish_id_expression): Use consistently
	context_for_name_lookup.
	* decl.c (fixup_anonymous_aggr): Fix error message for
	anonymous struct (vs union).

2007-09-19  Jason Merrill  <jason@redhat.com>

	PR c++/7586
	* pt.c (tsubst): Handle typedefs by looking for the specialization.
	(retrieve_specialization): Only tagged types use
	DECL_TEMPLATE_INSTANTIATIONS.
	(instantiate_class_template): Push nested classes too.
	(tsubst_decl) [TYPE_DECL]: Only check for canonical decl for
	tagged types.
	* cp-tree.h (MAYBE_TAGGED_TYPE_P): New macro.
	* init.c (is_aggr_type): Remove redundant tests.
	* class.c (push_nested_class): Use CLASS_TYPE_P.

2007-09-20  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33459
	* init.c (build_zero_init): If, recursively, build_zero_init
	returns a NULL_TREE, do not append it to the VEC of constructors.

2007-09-18  Jason Merrill  <jason@redhat.com>

	PR c++/17743
	* pt.c (apply_late_template_attributes): Set processing_template_decl.
	(tsubst_decl) [TYPE_DECL]: Preserve naming typedef, pass
	ATTR_FLAG_TYPE_IN_PLACE.
	(tsubst): Do unqualified lookup to find typedefs from current class.
	[ARRAY_TYPE]: Propagate alignment info.
	* decl2.c (is_late_template_attribute): Only defer handling of
	attribute aligned if the expression is dependent.
	(save_template_attributes): If we're deferring any attributes,
	make this a naming typedef.

2007-09-18  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33462 (again)
	* cxx-pretty-print.c (pp_cxx_va_arg_expression): Print
	va_arg instead of __builtin_va_arg.

2007-09-18  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33462
	* cxx-pretty-print.c (pp_cxx_va_arg_expression): Add.
	(pp_cxx_primary_expression): Use it.
	* cxx-pretty-print.h (pp_cxx_va_arg_expression): Declare.
	* error.c (dump_expr): Use it.

2007-09-18  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33463
	* cxx-pretty-print.c (pp_cxx_postfix_expression): Split
	out case TYPEID_EXPR to...
	(pp_cxx_typeid_expression): ... here; use pp_cxx_left_paren
	and pp_cxx_right_paren.
	* cxx-pretty-print.h (pp_cxx_typeid_expression): Declare.
	* error.c (dump_expr): Use it.

2007-09-18  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33464
	* cxx-pretty-print.c (pp_cxx_trait_expression): Add.
	(pp_cxx_primary_expression): Use it.
	* cxx-pretty-print.h (pp_cxx_trait_expression): Declare.
	* error.c (dump_expr): Use it.

2007-09-16  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33124
	* init.c (build_new): Remove warning for zero-element
	allocations.

2007-09-16  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/32756
	* call.c (maybe_handle_implicit_object): Set this_p, clear
	rvaluedness_matches_p.
	(compare_ics): Do not compare rvaluedness matching when one of the
	operands is an implicit object.

2007-09-14  Jason Merrill  <jason@redhat.com>

	PR c++/17743, c++/19163
	* decl2.c (is_late_template_attribute): New fn.
	(splice_template_attributes, save_template_attributes): New fns.
	(cplus_decl_attributes): Call save_template_attributes.
	* pt.c (apply_late_template_attributes): New fn.
	(instantiate_class_template, tsubst_decl): Use it.
	* cp-tree.h: Declare is_late_template_attribute.

2007-09-13  Tom Tromey  <tromey@redhat.com>

	* parser.c (cp_lexer_new_main): Don't use
	c_lex_return_raw_strings.
	(cp_lexer_get_preprocessor_token): Update.  Add special case when
	lexer is NULL.

2007-09-11  Jan Hubicka <jh@suse.cz>

	* method.c (use_thunk): Use tree_rest_of_compilation
	* cp-objecp-common.h (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.
	(LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS): Define.
	* cp-tree.h (expand_body): Kill.
	(emit_associated_thunks): Declare.
	* semantics.c (emit_associated_thunks): Export.
	(expand_body): Kill.

2007-09-09  David Daney  <ddaney@avtrex.com>

	PR c++/33324
	* init.c (build_new_1):  Use POINTER_PLUS_EXPR instead of MINUS_EXPR
	to calculate cookie_ptr.

2007-09-08  Jason Merrill  <jason@redhat.com>

	PR c++/33342
	* pt.c (most_specialized_class): Set processing_template_decl
	while tsubsting partial spec args.

2007-09-06  Jason Merrill  <jason@redhat.com>

	* decl2.c (get_guard): Copy visibility from the guarded variable.

2007-09-06  Jan Hubicka  <jh@suse.cz>

	* semantics.c (expand_body): Do not mark arguments of clones used.

2007-09-06  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32674
	* decl.c (cp_finish_decl): When processing_template_decl,
	deal correctly with init as TREE_LIST.

2007-09-06  Tom Tromey  <tromey@redhat.com>

	* decl.c (finish_function): Put return's location on line zero of
	file.

2007-09-05  Jason Merrill  <jason@redhat.com>

	PR c++/15745
	* except.c (prepare_eh_type): Use type_decays_to.

	PR c++/15097
	* init.c (build_delete): Use build_headof to get the address of the
	complete object if we aren't using the deleting destructor.
	* rtti.c (build_headof): No longer static.
	* cp-tree.h: Declare it.

2007-09-06  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (duplicate_decls): Set TREE_NOTHROW on __builtin_XX
	decl if a prototype for XX is provided with throw().

	PR c++/33289
	* decl.c (builtin_function_1): Set DECL_ANTICIPATED also
	on __*_chk non-__builtin_* decls.

2007-09-05  Paolo Carlini  <pcarlini@suse.de>

	PR c++/30302
	* semantics.c (finish_id_expression): Use context_for_name_lookup
	insted of DECL_CONTEXT,	to see through anonymous structs and unions.
	* class.c (finish_struct_anon): Deal correctly with anonymous
	structs (vs unions, as GNU extension) in error messages.

2007-09-05  Jan Hubicka  <jh@suse.cz>

	* sematics.c (expand_body): Remove unnecesary import_export_decl
	call, DECL_EXTERNAL checks and current_function_decl saving.

2007-09-05  Paolo Carlini  <pcarlini@suse.de>

	PR c++/29731 (again)
	* parser.c (cp_parser_primary_expression): Return error_mark_node
	when a statement-expression is found in a template-argument list.

2007-09-04  Jason Merrill  <jason@redhat.com>

	* except.c (initialize_handler_parm): Use
	fold_build_cleanup_point_expr.

	PR c++/31419
	* call.c (reference_binding): Don't look for user-defined conversions
	to the same type.

	PR c++/31411
	* except.c (initialize_handler_parm): Put a CLEANUP_POINT_EXPR inside
	the MUST_NOT_THROW_EXPR.

2007-09-04  Richard Sandiford  <richard@codesourcery.com>

	* decl.c (cp_finish_decl): Call determine_visibility before
	make_rtl_for_nonlocal_decl.

2007-09-04  Jason Merrill  <jason@redhat.com>

	PR c++/14032
	* pt.c (most_specialized_class): Substitute outer template
	arguments into the arguments of a member template partial
	specialization.
	(strip_innermost_template_args): New fn.

2007-09-03  Daniel Jacobowitz  <dan@codesourcery.com>

	* Make-lang.in (g++spec.o): Remove SHLIB_MULTILIB.

2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* call.c (name_as_c_string): Supply a TYPE for CONST_CAST.
	* decl.c (cp_make_fname_decl): Likewise,
	* parser.c (cp_parser_string_literal): Likewise,
	* tree.c (pod_type_p, zero_init_p): Use CONST_CAST_TREE.
	* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):
	Likewise,

2007-09-02  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33208
	* typeck.c (build_unary_op): Fix error message for
	Boolean expression as operand to operator--.

2007-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* tree.c (pod_type_p, zero_init_p): Use strip_array_types.
	* typeck.c (cp_type_quals, cp_type_readonly, cp_has_mutable_p):
	Likewise.

2007-08-31 Douglas Gregor <doug.gregor@gmail.com>

	PR c++/32597
	* init.c (build_default_init): Make extern.
	* cp-tree.h (build_default_init): Declare here.
	* pt.c (tsubst_expr): When the instantiation of the initializer of
	a variable results in an empty list, default-initialize the
	variable.
	(tsubst_copy_and_build): When the instantiation of the initializer
	in a new expression results in an empty initializer list,
	default-initialize it.

2007-08-31  Douglas Gregor  <doug.gregor@gmail.com>

	* mangle.c (write_type): Change mangling of rvalue reference from
	`RR' to `O'.

2007-08-31  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (duplicate_decls): Remove duplicated line.

2007-08-31  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33210
	* cxx-pretty-print.c (pp_cxx_unqualified_id): Deal with
	BOUND_TEMPLATE_TEMPLATE_PARM.

2007-08-31  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32113
	* search.c (lookup_member): Check the name argument for
	error_mark_node.

2007-08-31  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33212
	* parser.c (cp_parser_trait_expr): Check rerurn value of
	cp_parser_type_id.

2007-08-30  Ollie Wild  <aaw@google.com>

	* cvt.c (cp_convert_to_pointer): Remove force parameter. Call
	convert_ptrmem for pointer to member conversions.
	(convert_to_pointer_force): Update cp_convert_to_pointer call.
	(ocp_convert): Update cp_convert_to_pointer call.
	* typeck.c (convert_ptrmem): Add conditional for null pointers to
	members.
	(build_static_cast_1): Check can_convert for conversions in either
	direction.
	(get_delta_difference_1): New function.
	(get_delta_difference): Refactor to call get_delta_difference_1.

2007-08-30  Jakub Jelinek  <jakub@redhat.com>

	* decl.c (start_preparsed_function): Set
	DECL_DISREGARD_INLINE_LIMITS for GNU_INLINE_P functions.

2007-08-28  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33209
	* error.c (dump_expr): Deal with TEMPLATE_TYPE_PARM and
	BOUND_TEMPLATE_TEMPLATE_PARM.

2007-08-28  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32596
	PR c++/32400
	* pt.c (check_explicit_specialization): Set DECL_INTERFACE_KNOWN
	and DECL_NOT_REALLY_EXTERN if tmpl_func is not public.

2007-08-27  Jason Merrill  <jason@redhat.com>

	PR c++/29000
	* pt.c (build_non_dependent_expr, type_dependent_expression_p):
	Look inside STMT_EXPR.
	* semantics.c (stmt_expr_value_expr): New fn.
	* cp-tree.h: Declare it.

	PR c++/28558
	* decl.c (groktypename): Ignore attributes applied to class type.

2007-08-28  Richard Guenther  <rguenther@suse.de>

	* decl.c (duplicate_decls): Merge DECL_DISREGARD_INLINE_LIMITS.

2007-08-28  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* error.c (dump_expr): Handle COMPLEX_CST.
	* cxx-pretty-print.c (pp_cxx_primary_expression): Likewise.
	(pp_cxx_expression): Likewise.

2007-08-27  Alexandre Oliva  <aoliva@redhat.com>

	* decl.c (GNU_INLINE_P): New.
	(duplicate_decls): Handle gnu_inline.  Merge attributes and
	some flags in overriding definitions.
	(redeclaration_error_message): Handle gnu_inline.
	(start_preparsed_function): Likewise.

2007-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* call.c (sufficient_parms_p): Constify.
	* class.c (same_signature_p): Likewise.
	* cp-gimplify.c (is_invisiref_parm,
	cxx_omp_privatize_by_reference): Likewise.
	* cp-objcp-common.c (has_c_linkage): Likewise.
	* cp-tree.h (NON_THUNK_FUNCTION_CHECK, THUNK_FUNCTION_CHECK,
	sufficient_parms_p, same_signature_p, copy_fn_p, move_fn_p,
	grok_ctor_properties, nothrow_libfn_p, skip_artificial_parms_for,
	num_artificial_parms_for, comp_template_parms,
	template_parameter_pack_p, any_dependent_template_arguments_p,
	any_type_dependent_arguments_p, any_value_dependent_elements_p,
	repo_export_class_p, cxx_omp_privatize_by_reference, pod_type_p,
	zero_init_p, member_p, cp_lvalue_kind,
	builtin_valid_in_constant_expr_p, decl_anon_ns_mem_p,
	varargs_function_p, is_dummy_object, special_function_kind,
	string_conv_p, type_unknown_p, comp_except_specs, compparms,
	comp_cv_qualification, is_bitfield_expr_with_lowered_type,
	unlowered_expr_type, ptr_reasonably_similar, cp_type_readonly,
	cp_has_mutable_p, at_least_as_qualified_p,
	invalid_nonstatic_memfn_p, lvalue_or_else, lvalue_p): Likewise.
	* decl.c (copy_fn_p, move_fn_p, grok_ctor_properties): Likewise.
	* except.c (nothrow_libfn_p): Likewise.
	* method.c (skip_artificial_parms_for, num_artificial_parms_for):
	Likewise.
	* pt.c (comp_template_parms, template_parameter_pack_p,
	any_type_dependent_arguments_p, any_value_dependent_elements_p,
	any_dependent_template_arguments_p): Likewise.
	* repo.c (repo_export_class_p): Likewise.
	* semantics.c (anon_aggr_type_p): Likewise.
	* tree.c (lvalue_p_1, real_lvalue_p, lvalue_p,
	builtin_valid_in_constant_expr_p, decl_anon_ns_mem_p,
	varargs_function_p, member_p, is_dummy_object, pod_type_p,
	zero_init_p, special_function_p): Likewise.
	* typeck.c (comp_array_types, type_unknown_p, comp_except_specs,
	comp_array_types, at_least_as_qualified_p, comp_cv_qualification,
	compparms, invalid_nonstatic_memfn_p,
	is_bitfield_expr_with_lowered_type, unlowered_expr_type,
	string_conv_p, ptr_reasonably_similar, cp_type_readonly,
	cp_has_mutable_p, lvalue_or_else): Likewise.

2007-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* decl.c (cp_tree_node_structure): Kill TINST_LEVEL case.
	* cp-objcp-common.c (cp_tree_size): Ditto.
	* tree.c (cp_walk_subtrees): Ditto
	* cp-tree.def (TINST_LEVEL): Go away.
	* cp-tree.h (struct tinst_level_s): Rename to struct tinst_level,
	move together with other non-tree structs.
	(enum cp_tree_node_structure_enum): Nuke TS_CP_TINST_LEVEL.
	(union lang_tree_node): Eliminate tinst_level field.
	(TINST_DECL, TINST_LOCATION, TINST_IN_SYSTEM_HEADER_P): Annihilate.
	(current_instantiation, outermost_tinst_level): Return
	a "struct tinst_level *".

	* error.c (print_instantiation_partial_context): Change second
	parameter to a "struct tinst_level *".  Replace accessor macros
	with field access.
	(print_instantiation_full_context): Likewise.
	* lex.c (in_main_input_context): Likewise.

	* pt.c (struct pending_templates): New.
	(pending_templates, last_pending_template): Use it as a type.
	(current_tinst_level): Change typo to "struct tinst_level *"
	(reopen_tinst_level): Accept "struct tinst_level *", return decl.
	(add_pending_template): Construct a "struct pending_template".
	Replace TINST_LEVEL accessor macros with field access.
	(push_tinst_level): Likewise, using GGC_NEW instead of make_node.
	(pop_tinst_level): Likewise.
	(instantiate_pending_templates): Likewise.  Factor common code used
	when an instantiation has been done.
	(outermost_tinst_level): Replace tree_last with loop.
	(current_instantiation): Return a "struct tinst_level *".

2007-08-24  Ollie Wild  <aaw@google.com>

	* name-lookup.c (add_decl_to_level): Remove addition to vtables chain.
	* name-lookup.h (cp_binding_level): Remove vtables member.

2007-08-24  Richard Guenther  <rguenther@suse.de>

	* tree.c (cp_cannot_inline_tree_fn): Remove.
	* cp-tree.h (cp_cannot_inline_tree_fn): Likewise.
	* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN):
	Remove define.

2007-08-24  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32567
	* typeck.c (build_unary_op) <case PREINCREMENT_EXPR>: Return
	error_mark_node right away if build_expr_type_conversion
	returned it.

	PR c++/32898
	* name-lookup.c (set_decl_namespace): lookup_qualified_name failure
	is error_mark_node rather than NULL_TREE.
	* pt.c (check_explicit_specialization): Likewise.

	PR c++/31941
	* error.c (resolve_virtual_fun_from_obj_type_ref): Handle
	TARGET_VTABLE_USES_DESCRIPTORS targets properly.

2007-08-22  Jason Merrill  <jason@redhat.com>

	PR c++/29365
	* pt.c (outermost_tinst_level): New function.
	* lex.c (in_main_input_context): New function.
	* cp-tree.h: Declare it.
	* decl2.c (constrain_class_visibility): Use it to avoid warning
	about uses of the anonymous namespace in the main input file.

2007-08-21  Jakub Jelinek  <jakub@redhat.com>

	* init.c (build_new_1): Use get_target_expr instead of save_expr.

2007-08-20  Pawel Sikora  <pluto@pld-linux.org>

	PR c++/7302
	* class.c (finish_struct_1): Warn when a class has virtual
	functions and accessible non-virtual destructor.

2007-08-20  Richard Guenther  <rguenther@suse.de>

	PR c++/22369
	PR c++/22451
	* call.c (build_new_method_call): Convert initializer to
	the basetype.
	* init.c (build_aggr_init): Do not fiddle with types.
	(build_vec_delete_1): Use correct type for POINTER_PLUS_EXPR.
	* except.c (build_throw): Do not drop qualifiers for the
	pointer type.
	* typeck.c (get_member_function_from_ptrfunc): Do not
	fiddle with types, instead convert.
	(build_ptrmemfunc1): Convert to the target type for
	initialization.
	(gfc_trans_allocate): Convert result to target type.
	* cp-objcp-common.c (cxx_get_alias_set): Pointers to
	pointer-to-member structures shall have alias set zero as well.

2007-08-20  Richard Guenther  <rguenther@suse.de>

	* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P):
	Remove.
	* cp-tree.h (cp_auto_var_in_fn_p): Remove.
	(nonstatic_local_decl_p): Likewise.
	* tree.c (cp_auto_var_in_fn_p): Remove.
	* decl.c (nonstatic_local_decl_p): Remove.

2007-08-20  Richard Guenther  <rguenther@suse.de>

	* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_WALK_SUBTREES):
	Remove define.
	* tree.h (cp_walk_tree): New define to walk_tree_1 with
	cp_walk_subtrees lh parameter.
	(cp_walk_tree_without_duplicates): New define to
	walk_tree_without_duplicates_1 with cp_walk_subtrees lh parameter.
	* tree.c (count_trees): Call
	cp_walk_tree_without_duplicates.
	(verify_stmt_tree): Call cp_walk_tree.
	(break_out_target_exprs): Likewise.
	(WALK_SUBTREE): Likewise.
	* cp-gimplify.c (cp_genericize): Likewise.
	* cp-pt.c (find_parameter_packs_r): Likewise.
	(uses_parameter_packs): Likewise.
	(make_pack_expansion): Likewise.
	(check_for_bare_parameter_packs): Likewise.
	(for_each_template_parm): Likewise.
	* decl.c (check_default_argument): Call
	cp_walk_tree_without_duplicates.
	* except.c (build_throw): Likewise.
	* decl2.c (type_visibility): Likewise.
	* semantics.c (expand_or_defer_fn): Likewise.
	(finalize_nrv): Call cp_walk_tree.

2007-08-20  Jakub Jelinek  <jakub@redhat.com>

	PR c++/33025
	* init.c (build_new_1): Rename placement_var variable to placement_expr.
	Initialize it with save_expr rather than get_temp_regvar.

2007-08-17  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR c++/28989
	* tree.c (lvalue_p_1 <case SAVE_EXPR>): SAVE_EXPRs are never
	lvalues.

2007-08-17  Ollie Wild  <aaw@google.com>

	PR c++/31749
	* name-lookup.c (do_nonmember_using_decl): Shift implicit type
	declarations into appropriate slots for comparison.  Fix type
	comparison.

2007-08-17  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32112
	* error.c (dump_decl): Deal with UNBOUND_CLASS_TEMPLATE.
	* cxx-pretty-print.c (pp_cxx_unqualified_id): Likewise.

2007-08-17  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32870
	* parser.c (cp_parser_class_head): Improve error message.

2007-08-16  Seongbae Park  <seongbae.park@gmail.com>

	* pt.c (instantiate_decl): Set input_location
	for the function end.

2007-08-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* cp-objcp-common.c (cxx_warn_unused_global_decl, cp_expr_size):
	Constify.
	* cp-tree.h (local_variable_p, nonstatic_local_decl_p,
	class_tmpl_impl_spec_p, cp_auto_var_in_fn_p, cp_type_quals,
	cxx_incomplete_type_diagnostic, cxx_incomplete_type_error,
	cxx_warn_unused_global_decl, cp_expr_size): Likewise.
	* decl.c (local_variable_p, nonstatic_local_decl_p): Likewise.
	* tree.c (class_tmpl_impl_spec_p, cp_auto_var_in_fn_p): Likewise.
	* typeck.c (cp_type_quals): Likewise.
	* typeck2.c (cxx_incomplete_type_diagnostic,
	cxx_incomplete_type_error): Likewise.

2007-08-16  Paolo Carlini  <pcarlini@suse.de>

	PR c++/31132
	* pt.c (tsubst_friend_function): When check_classfn
	returns error_mark_node likewise return it.

2007-08-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32992
	* typeck.c (check_return_expr): Don't NRV optimize vars in
	anonymous unions.
	* decl.c (finish_function): Comment fix.

2007-08-15  Paolo Carlini  <pcarlini@suse.de>

	PR c++/33035
	* pt.c (push_template_decl_real): Depending on TYPE_P
	use either TYPE_CONTEXT or DECL_CONTEXT.

2007-08-14  Mark Mitchell  <mark@codesourcery.com>

	* semantics.c (finish_omp_clauses): Strip a NOP_EXPR if
	constructors and destructors return this.

2007-08-14  Paolo Carlini  <pcarlini@suse.de>

	PR c++/27211
	* decl2.c (check_classfn): Return error_mark_node in case of error;
	in that case, do not call add_method.
	* decl.c (start_decl): Deal with check_classfn returning
	error_mark_node.
	(grokfndecl): Likewise.
	* pt.c (tsubst_friend_function): Likewise.

2007-08-14  Andrew Pinski  <pinskia@gmail.com>

	PR c++/30428
	* typeck.c (build_binary_op): Disallow vector float types with
	BIT_IOR_EXPR, BIT_AND_EXPR, and BIT_XOR_EXPR.

2007-08-11  Ian Lance Taylor  <iant@google.com>

	* cp-objcp-common.c (cxx_get_alias_set): Change return type to
	alias_set_type.
	* cp-tree.h (cxx_get_alias_set): Update declaration.

2007-08-10  Ollie Wild  <aaw@google.com>

	* name-lookup.c (do_nonmember_using_decl): Print an error for ambiguous
	type lookups.
	(ambiguous_decl): Construct tree of ambiguous types.  Remove extaneous
	function parameter.
	(unqualified_namespace_lookup): Fix ambiguous_decl call.
	(lookup_using_namespace): Fix ambiguous_decl call.
	(qualified_lookup_using_namespace): Fix ambiguous_decl call.

2007-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* call.c (name_as_c_string): Use CONST_CAST.
	* decl.c (build_decl): Likewise.
	* parser.c (cp_parser_string_literal): Likewise.

2007-08-10  Paolo Carlini  <pcarlini@suse.de>

	PR c++/17763
	* error.c (dump_expr): Consistently use the *_cxx_*
	variants of the pretty-print functions.

2007-08-10  Paolo Carlini  <pcarlini@suse.de>

	PR c++/22256
	* decl.c (check_special_function_return_type): Just error
	on return type specified for conversion operator.

2007-08-09  Daniel Berlin  <dberlin@dberlin.org>

	* typeck2.c (readonly_error): Handle general expressions.
	* error.c (dump_expr): Handle POINTER_PLUS_EXPR

2007-08-06  Dan Hipschman  <dsh@google.com>

	* method.c (use_thunk): Use DECL_NAME instead of DECL_RTL to
	access function name.

2007-08-04  Alfred Minarik  <a.minarik@aon.at>

	PR pch/13676
	* lang-specs.h: Add .hp, .hxx, .hpp, .h, .HPP, .tcc as c++ header.
	* g++spec.c (lang_specific_driver): Check them.

2007-08-06  Paolo Carlini  <pcarlini@suse.de>

	PR c++/19532
	* pt.c (inline_needs_template_parms): Fix comment; change return type
	to bool.

2007-08-05  Volker Reichelt  <v.reichelt@netcologne.de>

	Revert:
	2007-03-26  Dirk Mueller  <dmueller@suse.de>

	* parser.c (cp_parser_member_declaration): Pedwarn
	about stray semicolons after member declarations.

2007-08-02  Lee Millward  <lee.millward@gmail.com>

	PR c++/30849
	PR c++/30850
	PR c++/30851
	* parser.c (cp_parser_asm_definition): Detect and discard asm
	statements with invalid inputs or outputs.
	 (cp_parser_asm_operand_list): Return error mark node if any
	 of the operands are invalid. Adjust documentation.

2007-08-02  Nick Clifton  <nickc@redhat.com>

	* typeck.c: Change copyright header to refer to version 3 of the
	GNU General Public License and to point readers at the COPYING3
	file and the FSF's license web page.
	* optimize.c, lang-specs.h, init.c, class.c, repo.c, decl.c,
	config-lang.in, cp-tree.def, call.c, decl.h, ptree.c,
	Make-lang.in, method.c, rtti.c, cp-objcp-common.c, g++spec.c,
	cp-objcp-common.h, except.c, error.c, operators.def, cvt.c,
	tree.c, mangle.c, cp-tree.h, dump.c, search.c, friend.c, expr.c,
	cp-gimplify.c, cxx-pretty-print.c, cp-lang.c, typeck2.c, pt.c,
	cxx-pretty-print.h, semantics.c, name-lookup.c, lex.c, decl2.c,
	name-lookup.h, parser.c: Likewise.

2007-08-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	PR middle-end/32668
	* call.c (magic_varargs_p): Honor the "type generic" attribute.

2007-07-30  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32108
	* semantics.c (finish_label_stmt): Reject the __label__
	extension outside function scopes.

2007-07-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* parser.c (eof_token): Un-constify.
	(cp_lexer_new_main, cp_lexer_new_from_tokens, VEC_alloc,
	cp_lexer_consume_token, cp_lexer_purge_token): Remove spurious
	casts.

2007-07-28  Kazu Hirata  <kazu@codesourcery.com>

	* pt.c, tree.c, typeck2.c: Fix comment typos.

2007-07-28  Simon Martin  <simartin@users.sourceforge.net>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/30917
	* name-lookup.c (lookup_name_real): Non namespace-scope bindings can be
	hidden due to friend declarations in local classes.

2007-07-27  Douglas Gregor  <doug.gregor@gmail.com>

	* typeck.c (structural_comptypes): Compare DECLTYPE_TYPE nodes.
	* cp-tree.def (DECLTYPE_TYPE): New.
	* error.c (dump_type): Dump DECLTYPE_TYPE nodes.
	(dump_type_prefix): Ditto.
	(dump_type_suffix): Ditto.
	* tree.c (DECLTYPE_TYPE): Walk DECLTYPE_TYPE nodes.
	* mangle.c (write_type): Handle DECLTYPE_TYPE.
	* cp-tree.h (IS_AGGR_TYPE): DECLTYPE_TYPE nodes can be aggregate
	types.
	(DECLTYPE_TYPE_EXPR): New.
	(DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P): New.
	(finish_declared_type): Declare.
	* cxx-pretty-print.c (pp_cxx_type_specifier_seq): Print
	DECLTYPE_TYPE nodes.
	(pp_cxx_type_id): Ditto.
	* pt.c (for_each_template_parm_r): Walk DECLTYPE_TYPE children.
	(tsubst): Substitute into a DECLTYPE_TYPE node.
	(tsubst_copy): Ditto.
	(unify): Cannot deduce anything from TYPEOF_TYPE or DECLTYPE_TYPE
	nodes.
	(dependent_type_p_r): DECLTYPE_TYPE types are always dependent.
	* semantics.c (finish_typeof): TYPEOF_TYPE types need to use
	structural equality (because we can't hash the expressions).
	(finish_declared_type): New.
	* lex.c (reswords): Add "decltype" keyword.
	* parser.c cp_lexer_next_token_is_decl_specifier_keyword
	(cp_parser_postfix_expression): Add member_access_only_p to
	restrict postfix expression to member access expressions.
	(cp_parser_unary_expression): Update call to
	cp_parser_postfix_expression to reflect new parameter.
	(cp_parser_declared_type): New.
	(cp_parser_simple_type_specifier): Parse decltype types.

2007-07-27  Mark Mitchell  <mark@codesourcery.com>

	PR c++/32346
	* call.c (convert_for_arg_passing): Only widen bitfields to their
	declared types if necessary.

2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* parser.c (cp_parser_string_literal, cp_parser_sizeof_operand):
	Constify.

2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>

	* decl.c (typename_hash, typename_compare): Constify.
	* mangle.c (hash_type, compare_type): Likewise.
	* pt.c (eq_local_specializations, hash_local_specialization):
	Likewise.
	* tree.c (cplus_array_hash, cplus_array_compare, list_hash_eq,
	list_hash): Likewise.
	* typeck2.c (pat_compare): Likewise.

2007-07-24  Nathan Sidwell  <nathan@codesourcery.com>

	* method.c (implicitly_declare_fn): Increase alignment if member
	function pointer format requires it.

2007-07-24  Paolo Carlini  <pcarlini@suse.de>

	PR c++/29001
	* typeck.c (check_return_expr): Do not pass a null argument
	to null_ptr_cst_p.

2007-07-24  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32561
	* decl.c (redeclaration_error_message): Call DECL_ANON_UNION_VAR_P
	only on VAR_DECL.

2007-07-22  Nathan Sidwell  <nathan@codesourcery.com>

	PR c++/32839
	* typeck.c (convert_arguments): Only use default args if we have
	a function decl.

	PR c++/30818
	* typeck.c (structural_comptypes): No need to check
	resolve_typename_type return value here.
	* cp-tree.h (TYPENAME_IS_RESOLVING_P): New.
	* pt.c (resolve_typename_type): Follow typename typedefs.  Return
	original type rather than error_mark_node in case of failure.
	* parser.c (cp_parser_nested_name_specifier_opt): Adjust
	resolve_typename_type result check.
	(cp_parser_direct_declarator, cp_parser_head,
	cp_parser_constructor_declarator_p): Likewise.

2007-07-12  Kazu Hirata  <kazu@codesourcery.com>

	* pt.c (template_parms_variadic_p): Remove.
	* cp-tree.h: Remove the prototype for template_parms_variadic_p.

2007-07-12  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30854
	* error.c (dump_expr) <case AGGR_INIT_EXPR>: Pass true as last
	argument to dump_aggr_init_expr_args instead of false.

2007-07-11  Douglas Gregor  <doug.gregor@gmail.com>

	* typeck.c (comptypes): When USE_CANONICAL_TYPES, use the
	canonical types; otherwise, fall back to structural type
	comparisons. If ENABLE_CHECKING and USE_CANONICAL_TYPES, give an
	internal compiler error if the canonical types are wrong.

2007-07-11  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32560
	* parser.c (cp_parser_make_indirect_declarator): When the
	the code argument is ERROR_MARK return cp_error_declarator.

2007-07-09  Geoffrey Keating  <geoffk@apple.com>

	PR 32617
	* decl.c (cxx_init_decl_processing): Don't set
	force_align_functions_log.
	(grokfndecl): Honour ptrmemfunc_vbit_in_pfn.
	* typeck.c (cxx_alignof_expr): When alignof is used on a plain
	FUNCTION_DECL, return its alignment.

2007-07-09  Richard Guenther  <rguenther@suse.de>

	* decl.c (start_preparsed_function): Do not promote return type.

2007-07-08  Paolo Carlini  <pcarlini@suse.de>

	PR c++/30535
	* pt.c (unify): Never pass error_mark_node to template_decl_level.

2007-07-07  Mark Mitchell  <mark@codesourcery.com>

	PR c++/32232
	* pt.c (resolve_overloaded_unification): Robustify.  Return a
	bool, not an int.
	(type_unification_real): Adjust accordingly.

2007-07-06  Richard Guenther  <rguenther@suse.de>

	* init.c (build_new_1): Use the correct pointer type.
	* typeck2.c (build_m_component_ref): Likewise.

2007-07-05  Mark Mitchell  <mark@codesourcery.com>

	PR c++/32245
	* init.c (build_zero_init): Always build an initializer for
	non-static storage.
	* typeck2.c (build_functional_cast): Use build_zero_init.

	PR c++/32251
	* init.c (build_new_1): Always pass the allocation function to
	build_op_delete_call.
	* call.c (build_op_delete_call): Handle operator delete with a
	variable-argument list.  Do not issue an error when no matching
	deallocation function is available for a new operator.

	PR c++/31992
	* cp-tree.h (any_value_dependent_elements_p): Declare it.
	* decl.c (value_dependent_init_p): New function.
	(cp_finish_decl): Use it.
	* pt.c (value_dependent_expression_p): Use
	any_value_dependent_elements_p.
	* parser.c (cp_parser_primary_expression): Add comment about
	treating dependent qualified names as integral
	constant-expressions.

2007-07-04  Douglas Gregor  <doug.gregor@gmail.com>

	* decl.c (build_ptrmemfunc_type): Always use structural equality
	tests when comparing pointer-to-member-function types, because the
	handling of TYPE_GET_PTRMEMFUNC_TYPE currently defeats canonical
	types.

2007-07-03  Mark Mitchell  <mark@codesourcery.com>

	* init.c (build_new): Tweak comment.

2007-06-29  Dave Brolley  <brolley@redhat.com>

	PR c++/31743
	* parser.c (cp_parser_new_type_id): Don't reduce a named array
	type to its base type and number of elements here.
	* init.c (build_new): Call complete_type_or_else to ensure that the
	type is complete and to issue a diagnostic if it is not.
	(build_new_1): Don't call complete_type_or_else here.

2007-07-03  Richard Guenther  <rguenther@suse.de>

	PR c++/32609
	* class.c (fixed_type_or_null): Re-lookup the hashtable slot
	after recursing.

2007-07-02  Simon Baldwin  <simonb@google.com>

	* parser.c (cp_parser_elaborated_type_specifier): Added a warning
	for inner-style nested forward declarations that don't declare
	anything useful.

2007-07-02  Jakub Jelinek  <jakub@redhat.com>

	PR c++/31748
	* semantics.c (finish_omp_clauses): Use %qD instead of %qE for
	DECL_P in not a variable and appears more than once error messages.

2007-07-01  Ollie Wild  <aaw@google.com>

	* name-lookup.c (ambiguous_decl): Fix case when new->value is hidden.
	(select_decl): Remove function.
	(unqualified_namespace_lookup): Populate binding by calling
	ambiguous_decl.  Remove select_decl call.
	(lookup_qualified_name): Remove select_decl call.
	* decl.c (lookup_and_check_tag): Check for ambiguous references.
	* parser.c (cp_parser_elaborated_type_specifier): Skip redundant error
	generation when name lookup is ambiguous.

2007-06-29  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/31724
	* init.c (build_new_1): Use structural equality on the copy of the
	array type.

2007-06-28  Geoffrey Keating  <geoffk@apple.com>

	* decl2.c (determine_visibility): Implement
	flag_visibility_ms_compat effect on type info.
	* decl.c (cxx_init_decl_processing): Implement
	global effect of flag_visibility_ms_compat.

2007-06-28  Geoffrey Keating  <geoffk@apple.com>

	* decl2.c (start_objects): Mark constructor-running function
	as artificial.

2007-06-26  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/32111
	* decl.c (grokdeclarator): Reset friendp for member functions declared
	friend of their own class.

2007-06-23  Mark Mitchell  <mark@codesourcery.com>

	* decl2.c (determine_visibility): Don't look for dllexport here.
	(determine_visibility_from_class): Tidy.

2007-06-18  Simon Baldwin <simonb@google.com>

	PR c++/31923
	* parser.c (cp_parser_single_declaration): Added check for storage
	class other than sc_none in parsed declaration, and a flag to indicate
	if the call is part of an explicit template specialization parse.
	* (cp_parser_explicit_specialization): Specialization check flag added
	to call to cp_parser_single_declaration(), set true.
	* (cp_parser_template_declaration_after_export): Specialization check
	flag added to call to cp_parser_single_declaration(), set false.
	* pt.c (check_explicit_specialization): Added code to copy visiblity
	and linkage from the templated function to the explicit specialization.

2007-06-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	* typeck.c (build_binary_op): For templates build the
	expression in pieces to avoid the assert in build2_stat.
	(get_member_function_from_ptrfunc):
	Change over to using POINTER_PLUS_EXPR and convert
	the second operand to sizetype.
	* typeck2.c (build_m_component_ref):  Likewise.
	* init.c (expand_virtual_init): Create a POINTER_PLUS_EXPR
	instead of PLUS_EXPR for pointers.
	(build_new_1): Likewise.
	(build_vec_delete_1): Likewise.
	(build_vec_delete): Likewise.
	* class.c (build_base_path): Likewise.
	(build_base_path): Likewise.
	(convert_to_base_statically): Likewise.
	(fixed_type_or_null): Handle POINTER_PLUS_EXPR.
	(get_vtbl_decl_for_binfo): Handle POINTER_PLUS_EXPR
	instead of PLUS_EXPR.
	(dfs_accumulate_vtbl_inits): Create a POINTER_PLUS_EXPR
	instead of PLUS_EXPR for pointers.
	* call.c (build_special_member_call): Likewise.
	* rtti.c (build_headof): Likewise.
	Use sizetype instead of ptrdiff_type_node.
	(tinfo_base_init): Create a POINTER_PLUS_EXPR
	instead of PLUS_EXPR for pointers.
	* except.c (expand_start_catch_block):  Do a
	NEGATIVE and then a POINTER_PLUS_EXPR instead
	of a MINUS_EXPR.
	* cp-gimplify.c (cxx_omp_clause_apply_fn): Convert
	PLUS_EXPR on pointer types over to use
	POINTER_PLUS_EXPR and remove the conversion
	to the pointer types.
	* method.c (thunk_adjust): Use POINTER_PLUS_EXPR for
	adding to a pointer type. Use size_int instead of
	ssize_int. Convert the index to sizetype before
	adding it to the pointer.

2007-06-15  Mark Mitchell  <mark@codesourcery.com>

	* cp-tree.h (DECL_VAR_MARKED_P): Remove.
	(DECL_ANON_UNION_VAR_P): New macro.
	* class.c (fixed_type_or_null): Tidy.  Use a hash table, rather
	than DECL_VAR_MARKED_P, to keep track of which variables we have
	seen.
	* decl.c (redeclaration_error_message): Complain about redeclaring
	anonymous union members at namespace scope.
	* decl2.c (build_anon_union_vars): Set DECL_ANON_UNION_VAR_P.

2007-06-14  Geoff Keating  <geoffk@apple.com>

	* decl2.c (determine_visibility): Ensure that functions with
	hidden types as parameters are hidden.

	PR 31093
	* decl2.c (determine_visibility): Remove duplicate code for
	handling type info.

2007-06-12  Ian Lance Taylor  <iant@google.com>

	PR libstdc++/29286
	* init.c (avoid_placement_new_aliasing): New static function.
	(build_new_1): Call it.

2007-06-11  Rafael Ávila de Espíndola  <espindola@google.com>

	* cp-objcp-common.h (LANG_HOOKS_SIGNED_TYPE): Remove.
	(LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.

2007-06-08  Jakub Jelinek  <jakub@redhat.com>

	PR c++/32177
	* semantics.c (finish_omp_for): Call fold_build_cleanup_point_expr
	on init, the non-decl cond operand and increment value.

2007-06-07  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/30759
	* decl.c (check_initializer): Report an error when a brace enclosed
	initializer is used for a non-aggregate type in C++98.
	(redeclaration_error_message): Rewrote flag_cpp0x in terms of
	cxx_dialect.
	(grokdeclarator): Likewise.
	(move_fn_p): Likewise.
	* typeck.c (check_return_expr): Likewise.
	* call.c (reference_binding): Likewise.
	* error.c (cp_cpp_error): Likewise.
	* pt.c (check_default_tmpl_args): Likewise.
	(tsubst): Likewise.
	* lex.c (init_reswords): Likewise.
	* parser.c (p_parser_primary_expression): Likewise.
	(TOKEN_PRECEDENCE): Likewise.
	(cp_parser_init_declarator): Likewise.
	(cp_parser_ptr_operator): Likewise.
	(cp_parser_parameter_declaration): Likewise.
	(cp_parser_enclosed_template_argument_list): Likewise.
	(cp_parser_skip_to_end_of_template_parameter_list): Likewise.
	(cp_parser_next_token_ends_template_argument_p): Likewise.

2007-06-04  Simon Baldwin  <simonb@google.com>

	* decl.c (grokdeclarator): Readability change.  Moved case labels
	into direct switch statement scope.

2007-06-04  Paolo Carlini  <pcarlini@suse.de>

	* call.c (convert_like_real): Remove pointless code.

2007-05-31  Mark Mitchell  <mark@codesourcery.com>

	* decl.c (get_atexit_fn_ptr_type): New function.
	(get_atexit_node): Use it.
	(start_cleanup_fn): Likewise.
	(register_dtor_fn): Use the object's destructor, instead of a
	separate cleanup function, where possible.
	* cp-tree.h (CPTI_ATEXIT_FN_PTR_TYPE): New enumerator.
	(atexit_fn_ptr_type_node): New macro.
	* decl2.c (build_cleanup): Use build_address.

2007-05-31  Daniel Berlin  <dberlin@dberlin.org>

	* typeck.c (build_binary_op): Include types in error.

2007-05-31  Jakub Jelinek  <jakub@redhat.com>

	PR c++/31806
	* decl.c (cp_finish_decl): Also clear was_readonly if a static var
	needs runtime initialization.

2007-05-31  Paolo Carlini  <pcarlini@suse.de>

	PR c++/32158
	* semantics.c (finish_trait_expr): Complete the types.

2007-05-30  Russell Yanofsky <russ@yanofsky.org>
	     Douglas Gregor <doug.gregor@gmail.com>
	     Pedro Lamarao <pedro.lamarao@mndfck.org>
	     Howard Hinnant <howard.hinnant@gmail.com>

	PR c++/7412
	PR c++/29939
	* typeck.c (comptypes): Don't consider rvalue and lvalue
	reference types to be equivalent.
	(check_return_expr): Move from certain lvalues when returning
	them.
	* decl.c (grokdeclarator): Implement reference collapsing.
	(copy_fn_p): Don't consider constructors taking rvalue references
	to be copy constructors.
	(move_fn_p): New.
	* call.c (conversion): New "rvaluedness_matches_p" member.
	(convert_class_to_reference): Require reference type as first
	parameter instead of base type.
	(reference_binding): Add logic to handle rvalue references.
	(implicit_conversion): Update inaccurate comment.
	(convert_like_real): Disable creation of temporaries that are
	impossible to initialize for types with move constructors.
	(build_over_call): Elide move constructors when possible.
	(maybe_handle_implicit_object): Set "rvaluedness_matches_p".
	(maybe_handle_ref_bind): Return conversion instead of type node.
	(compare_ics): Add logic to use "rvaluedness_matches_p" values to
	determine preferred conversion sequences.
	* cp-tree.h (TYPE_REF_IS_RVALUE): New.
	(LOOKUP_PREFER_RVALUE): New.
	(DECL_MOVE_CONSTRUCTOR_P): New.
	(struct cp_declarator): Add "reference" member for reference
	types, with new "rvalue_ref" flag.
	(cp_build_reference_type): Declare.
	(move_fn_p): Declare.
	* error.c (dump_type_prefix): Format rvalue reference types
	correctly in error messages.
	* except.c (build_throw): Move from certain lvalues when
	throwing.
	* mangle.c (write_type): Mangle rvalue references differently
	than regular references.
	* parser.c (make_reference_declarator): Add boolean parameter for
	rvalue references.
	(cp_parser_make_indirect_declarator): New.
	(cp_parser_new_declarator_opt): Call
	cp_parser_make_indirect_declarator.
	(cp_parser_conversion_declarator_opt): Ditto.
	(cp_parser_declarator): Ditto.
	(cp_parser_ptr_operator): Parse "&&" tokens into rvalue reference
	declarators.
	* pt.c (tsubst): Implement reference collapsing.
	(maybe_adjust_types_for_deduction): Implement special template
	parameter deduction rule for rvalue references.
	(type_unification_real): Update calls to
	maybe_adjust_types_for_deduction.
	(try_one_overload): Ditto.
	(unify_pack_expansion): Ditto.
	* tree.c (lvalue_p_1): Handle rvalue reference types.
	(cp_build_reference_type): New.

2007-05-30  Jakub Jelinek  <jakub@redhat.com>

	PR c++/31809
	* decl.c (cp_finish_decl): Clear TREE_READONLY flag on TREE_STATIC
	variables that need runtime initialization.

2007-05-28  Andrew Pinski  <Andrew_pinski@playstation.sony.com>

	PR c++/31339
	* typeck.c (build_unary_op <case PREINCREMENT_EXPR,
	case POSTINCREMENT_EXPR, case PREDECREMENT_EXPR,
	case POSTDECREMENT_EXPR>): Return the error_mark_node
	if either the real or imaginary parts would an
	error_mark_node.

2007-05-25  Simon Martin  <simartin@users.sourceforge.net>
	    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/31745
	* parser.c (cp_parser_skip_to_closing_brace): Return true if the next
	token is a closing brace, false if there are no tokens left.
	(cp_parser_namespace_alias_definition): Only consume the next token if
	it is a closing brace.

	* parser.c (cp_parser_class_specifier): Likewise.

2007-05-25  H.J. Lu  <hongjiu.lu@intel.com>

	* semantics.c (finish_member_declaration): Fix a typo in the
	last checkin.

2007-05-25  Douglas Gregor <doug.gregor@gmail.com>

	PR c++/31431
	PR c++/31432
	PR c++/31434
	PR c++/31435
	PR c++/31437
	PR c++/31438
	PR c++/31442
	PR c++/31443
	PR c++/31444
	PR c++/31445
	* error.c (dump_type): Dump TYPE_ARGUMENT_PACK nodes.
	* cp-tree.h (check_for_bare_parameter_packs): Returns bool.
	* pt.c (check_for_bare_parameter_packs): Return bool indicated
	whether everything was okay. Fix indentation.
	(push_template_decl_real): Check for bare parameter packs in
	function parameters; where errors occur, mark the parameter types
	with ERROR_MARK_NODEs to avert ICEs.
	(coerce_template_parameter_pack): New.
	(coerce_template_parms): Moved parameter pack coercion into
	coerce_template_parameter_pack, and permit it anywhere in the
	template parameter list (not just at the end). Parameter and
	argument indices can vary (somewhat) separately now, so add
	PARM_IDX and ARG_IDX.
	(fn_type_unification): Don't set an argument pack as incomplete if
	no argument pack was deduced.
	(type_unification_real): If a type parameter is a parameter pack
	and has not otherwise been deduced, it will be deduced to an empty
	parameter pack.
	(more_specialized_fn): Use the actual lengths of the argument
	lists when comparing against expansions.
	* semantics.c (finish_member_declaration): If a field's type has
	bare parameter packs, error and set its type to ERROR_MARK_NODE.

2007-05-24  Danny Smith  <dannysmith@users.sourceforge.net>

	PR target/27067
	* mangle.c (mangle_decl): Call targetm.mangle_decl_assembler_name.

2007-05-22  Ollie Wild  <aaw@google.com>

	* name-lookup.c (ambiguous_decl): Adds check for hidden types.
	(unqualified_namespace_lookup): Adds check for hidden types.

2007-05-22  Ollie Wild  <aaw@google.com>

	* decl.c (duplicate_decls): Verify namespace names are unique.

2007-05-21  Mark Mitchell  <mark@codesourcery.com>

	* decl.c (cxx_maybe_build_cleanup): Handle
	__attribute__((cleanup)).

2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* cvt.c (cp_convert_and_check): Don't check warnings if the
	conversion failed.

2007-05-18  Geoffrey Keating  <geoffk@apple.com>

	* mangle.c (write_real_cst): Use 'unsigned long' for %lx.

2007-05-14  Paolo Carlini  <pcarlini@suse.de>

	PR c++/29928
	* rtti.c (get_tinfo_decl_dynamic, get_typeid): Try to complete the
	type only if is a class type (5.2.8/4).

2007-05-14  Rafael Ávila de Espíndola  <espindola@google.com>

	* cp-objcp-common.h (LANG_HOOKS_UNSIGNED_TYPE): Remove.
	* decl.c (grokdeclarator): Use unsigned_type_for instead of
	c_common_unsigned_type.

2007-05-11  Silvius Rus  <rus@google.com>

	* typeck.c (build_indirect_ref): Add call to
	strict_aliasing_warning.
	(build_reinterpret_cast_1): Condition call to
	strict_aliasing_warning.

2007-05-11  Jan Hubicka  <jh@suse.cz>

	* semantics.c (expand_or_defer_fn): Do not call c_record_cdtor_fn.
	* decl2.c (start_objects): ctors and dtors are no longer public.
	(cp_write_global_declarations): Do not call c_build_cdtor_fns.

2007-05-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	* typeck.c (build_unary_op): Remove code that used to
	handle non lvalue increments/decrements.

2007-05-07  Mike Stump  <mrs@apple.com>

	* parser.c (check_empty_body): Add.
	(cp_parser_iteration_statement): Add call to check_empty_body.

2007-05-05  Geoffrey Keating  <geoffk@apple.com>

	PR 31775
	* mangle.c (write_mangled_name): Mangle static variable names.
	(write_unqualified_name): Use local-source-name for
	namespace-scope static variables.

2007-05-04  Dirk Mueller  <dmueller@suse.de>

	* cp-tree.h (DECL_MAIN_P): only if -ffreestanding is
	not in effect.

2007-05-02  Seongbae Park  <seongbae.park@gmail.com>

	PR c++/31663
	* decl2.c (constrain_class_visibility):
	Use strip_pointer_or_array_types instead of strip_array_types.

2007-04-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR C++/30221
	* decl.c (reshape_init_r): Don't reshape the first element if it
	is a pointer to member function.

2007-04-27  Simon Baldwin  <simonb@google.com>

	* decl.c (grokparms): Changed message format from %qD to %qE.

2007-04-27  Douglas Gregor  <doug.gregor@gmail.com>

	* error.c (maybe_warn_variadic_templates): Variadic templates are
	now in C++0x, so only warn about them in C++98 mode.

2007-04-26  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR C++/30016
	* typeck.c (build_reinterpret_cast_1): Only allow conversion to
	integeral types from vectors types.

2007-04-26  Jakub Jelinek  <jakub@redhat.com>

	PR c++/31598
	* semantics.c (finish_omp_clauses): Don't create CP_OMP_CLAUSE_INFO
	for type dependent OMP_CLAUSE_DECLs.

2007-04-24  Mark Mitchell  <mark@codesourcery.com>

	PR c++/31338
	* cp-tree.h (ARITHMETIC_TYPE): Include COMPLEX_TYPE.
	* typeck.c (type_after_usual_arithmetic_conversions): Adjust, as
	COMPLEX_TYPE is now an ARITHMETIC_TYPE.
	* init.c (build_zero_init): Adjust, as
	COMPLEX_TYPE is now a SCALAR_TYPE.
	* typeck2.c (digest_init): Allow brace-enclosed initializers for
	COMPLEX_TYPE, even though that is now a SCALAR_TYPE.

2007-04-25  Paolo Carlini  <pcarlini@suse.de>

	* semantics.c (classtype_has_nothrow_copy_or_assign_p): Adjust
	per N2255; rename as classtype_has_nothrow_assign_or_copy_p.
	(trait_expr_value): Adjust.

2007-04-23  Simon Baldwin  <simonb@google.com>

	* decl.c (grokparms): Added new error for duplicate function
	parameters names in function prototypes, to match gcc behavior.

2007-04-23  Jan Hubicka  <jh@suse.cz>

	* decl2.c (finish_objects): Do not call target constructor/destructor
	bits dirrectly.

2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	* cp-tree.h (lang_tree_node): Use GENERIC_NEXT
	instead of checking GIMPLE_STMT_P in chain_next.

2007-04-17  Mark Mitchell  <mark@codesourcery.com>

	PR c++/31513
	* call.c (convert_for_arg_passing): Convert bitfields to their
	declared types.

2007-04-17  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/31517
	* pt.c (value_dependent_expression_p): Handle MODOP_EXPRs.

2007-04-16  Seongbae Park <seongbae.park@gmail.com>

	PR c++/29365
	* decl2.c (constrain_class_visibility):
	Do not warn about the use of anonymous namespace in the main input file.

2007-04-15  Mark Mitchell  <mark@codesourcery.com>

	* cp-tree.h (current_template_parms): Fix typo in comment.

2007-04-15  Kazu Hirata  <kazu@codesourcery.com>

	* cp-tree.h, error.c: Fix comment typos.

2007-04-13  Jason Merrill  <jason@redhat.com>

	PR c++/31074
	* call.c (reference_binding): Add c_cast_p parm.  If true,
	add quals to TO as needed to make it reference-compatible.

2007-04-11  Jan Hubicka  <jh@suse.cz>

	* class.c (convert_to_base_statically): Fold produced tree; verify
	that we are not processing template_decl.

2007-04-09  Mark Mitchell  <mark@codesourcery.com>

	PR c++/31449
	* class.c (build_base_path): Ensure that the converted pointer has
	the same cv-qualification as the input.

2007-04-09  Paolo Carlini  <pcarlini@suse.de>

	* tree.c (cp_tree_equal): Deal with TRAIT_EXPR.

2007-04-08  Steven Bosscher  <steven@gcc.gnu.org>

	* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS):
	Do not set it.
	(LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P): Do not set it.
	* tree.c (cp_add_pending_fn_decls): Remove.
	* cp-tree.h (cp_add_pending_fn_decls): Remove prototype.

2007-04-07  Daniel Berlin  <dberlin@dberlin.org>

	Revert change removing staticp.

2007-04-06  Daniel Berlin  <dberlin@dberlin.org>

	* cp-objcp-common.c (cxx_staticp): Remove.
	* cp-objcp-common.h (LANG_HOOKS_STATICP): Remove.
	* cp-tree.h (cxx_staticp):

2007-04-04  Danny Smith  <dannysmith.users.sourceforge.net>

	* class.c (check_for_override): Don't remove dllmport attribute
	of virtual methods.

2007-04-03  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30847
	* typeck.c (build_modify_expr): For COND_EXPR on LHS, if RHS has void
	type issue error and return early.

2007-03-30  Jason Merrill  <jason@redhat.com>

	PR c++/31187
	* typeck.c (cp_type_readonly): New fn.
	* cp-tree.h: Declare it.
	* decl.c (start_decl): Set implicit DECL_THIS_STATIC here.
	(cp_finish_decl): Not here.

2007-03-31  Richard Guenther  <rguenther@suse.de>

	* optimize.c (maybe_clone_body): Replace splay-tree usage by
	pointer-map.

2007-03-31  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/31138
	PR c++/31140
	PR c++/31141
	* parser.c (declarator_can_be_parameter_pack): New.
	(cp_parser_template_parameter): Only parse the `...' if the
	declarator can be a parameter pack.
	(cp_parser_parameter_declaration): Ditto. Also, handle when TYPE
	is NULL.
	* pt.c (find_parameter_packs_r): Look into the bounds on integer
	types (they could be used as array bounds).
	(check_for_bare_parameter_packs): Deal with TEMPLATE_PARM_INDEX.
	(tsubst_pack_expansion): Handle failure to expand parameter
	packs.

2007-03-30  Paolo Carlini  <pcarlini@suse.de>

	PR c++/26099
	* cp-tree.h (enum cp_trait_kind, struct tree_trait_expr,
	TRAIT_EXPR_TYPE1, TRAIT_EXPR_TYPE2, TRAIT_EXPR_KIND): Add.
	(enum cp_tree_node_structure_enum, union lang_tree_node): Update.
	(CLASS_TYPE_NON_UNION_P): Add.
	(struct lang_type_class): Add has_complex_dflt.
	(TYPE_HAS_COMPLEX_DFLT, TYPE_HAS_TRIVIAL_DFLT): Add.
	(locate_copy, locate_ctor, locate_dtor, finish_trait_expr): Declare.
	* cp-tree.def: Add TRAIT_EXPR.
	* cp-objcp-common.c (cp_tree_size): Add TRAIT_EXPR case.
	* lex.c (struct resword): Add __has_nothrow_assign,
	__has_nothrow_constructor, __has_nothrow_copy, __has_trivial_assign,
	__has_trivial_constructor, __has_trivial_copy,
	__has_trivial_destructor, __has_virtual_destructor, __is_abstract,
	__is_base_of, __is_class, __is_convertible_to, __is_empty, __is_enum,
	__is_pod, __is_polymorphic, __is_union.
	* parser.c (cp_parser_primary_expression): Deal with the new RIDs.
	(cp_parser_trait_expr): New.
	* semantics.c (finish_trait_expr, trait_expr_value
	classtype_has_nothrow_copy_or_assign_p): New.
	* method.c (locate_copy, locate_ctor, locate_dtor): Do not define
	as static.
	* decl.c (cp_tree_node_structure): Add TRAIT_EXPR.
	* class.c (check_bases, check_field_decl, check_bases_and_members):
	Deal with TYPE_HAS_COMPLEX_DFLT (t) too.
	* pt.c (uses_template_parms, tsubst_copy_and_build,
	value_dependent_expression_p, type_dependent_expression_p): Deal with
	TRAIT_EXPR.
	* tree.c (cp_walk_subtrees): Deal with TRAIT_EXPR.

2007-03-29  Richard Guenther  <rguenther@suse.de>

	* tree.c (cp_walk_subtrees): Do not set input_location.

2007-03-28  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/29077
	* decl.c (grokfndecl): Properly setup decl if it is a constructor or a
	destructor.

2007-03-28 Douglas Gregor <doug.gregor@gmail.com>

	* parser.c (struct cp_parser): Update comment for
	greater_than_is_operator_p.
	(cp_parser_primary_expression): In C++0x mode, a cast operator can
	be terminated with a `>>' token when !GREATER_THAN_IS_OPERATOR_P.
	(TOKEN_PRECEDENCE): In C++0x mode, `>>' is treated like `>' when
	!GREATER_THAN_IS_OPERATOR_P.
	(cp_parser_binary_expression): When -Wc++0x-compat, warn about
	`>>' operators that will become two `>' tokens in C++0x.
	(cp_parser_parameter_declaration): Treat `>>' like `>' in C++0x
	mode, allowing it to terminate default arguments.
	(cp_parser_enclosed_template_argument_list): In C++0x mode, treat
	`>>' like two consecutive `>' tokens.
	(cp_parser_skip_to_end_of_template_parameter_list): Ditto.
	(cp_parser_next_token_ends_template_argument_p): In C++0x, `>>'
	ends a template argument.

2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>

	* decl.c (redeclaration_error_message): Complain when redeclaring
	a friend function with default template arguments (C++0x mode only).
	* cp-tree.h (check_default_tmpl_args): Declare.
	* pt.c (check_default_tmpl_args): In C++0x mode, permit default
	template arguments in function templates. Add support for checking
	the default template arguments of friend templates.
	(push_template_decl_real): Fix call to check_default_tmpl_args.
	(type_unification_real): If a template parameter has not been
	deduced but provides a default template argument, substitute into
	that default template argument.
	* parser.c (cp_parser_init_declarator): When declaring (but not
	defining!) a function template in C++0x mode, check for default
	template arguments.

2007-03-28 Douglas Gregor <doug.gregor@gmail.com>

	PR c++/29993
	* decl.c (grokdeclarator): Deal with cv-qualified function type
	typedefs in the same way for member and non-member functions.

2007-03-26  Dirk Mueller  <dmueller@suse.de>

	* parser.c (cp_parser_member_declaration): Pedwarn
	about stray semicolons after member declarations.

2007-03-26  Paolo Carlini  <pcarlini@suse.de>

	PR c++/30500
	* pt.c (instantiate_decl): Set in_system_header.

2007-03-22  Mark Mitchell  <mark@codesourcery.com>

	* cp-tree.h (current_tempalte_parms): Improve documentation.
	* pt.c (current_template_args): Likewise.

	PR c++/30863
	* parser.c (cp_parser_parse_and_diagnose_invalid_type_name): Do
	not consume tokens when failing.

2007-03-22  Jim Wilson  <wilson@specifix.com>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/31273
	* call.c (standard_conversion): Use type_decays_to.  Keep FCODE
	consistent with FROM.

2007-03-22  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* error.c (dump_expr): Handle dependent names that designate types.
	* cxx-pretty-print.c (pp_cxx_unqualified_id): Handle TYPENAME_TYPE.

2007-03-17  Kazu Hirata  <kazu@codesourcery.com>

	* cp-tree.def, parser.c, pt.c: Fix comment typos.

2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* cvt.c (cp_convert_and_check) : Define.
	* cp-tree.h (cp_convert_and_check): Declare.
	* call.c (convert_conversion_warnings): Rename to
	conversion_null_warnings.  The warning for floating-point to
	integer is handled by convert_and_check in convert_like_real.
	(convert_like_real): convert_conversion_warnings was renamed as
	conversion_null_warnings.
	* typeck.c (build_binary_op): Use cp_convert_and_check to warn for
	overflow and changes of value during conversion.

2007-03-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/30891
	* parser.c (cp_parser_statement): If 'namespace' is found, this
	only can be a namespace alias definition, so parse it now.
	(cp_parser_namespace_alias_definition): if we find an open brace
	instead of '=', then this is actually a misplaced namespace
	definition.

2007-03-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/24924
	* decl.c (cxx_init_decl_processing): Move command-line options
	processing to c-opts.c.

2007-03-15  Douglas Gregor  <doug.gregor@gmail.com>

	* ptree.c (cxx_print_type): Use formatting markup for integers
	when printing template parameter index/level/orig level.
	(cxx_print_xnode): Ditto.
	* cp-tree.h (TEMPLATE_PARM_PARAMETER_PACK): Use TREE_LANG_FLAG_0.
	(struct template_parm_index_s): Remove the PARAMETER_PACK member.
	Make INDEX, LEVEL, and ORIG_LEVEL integers instead of
	HOST_WIDE_INTs.
	(struct saved_scope): Make X_PROCESSING_TEMPLATE_DECL an int,
	rather than a HOST_WIDE_INT.
	Turn X_PROCESSING_EXPLICIT_INSTANTIATION, SKIP_EVALUATION, and
	NEED_POP_FUNCTION_CONTEXT into bool bitfields; reorder fields for
	better bit-packing.
	(struct language_function): Make RETURNS_VALUE, RETURNS_NULL,
	RETURNS_ABNORMALLY, IN_FUNCTION_TRY_HANDLER, and
	IN_BASE_INITIALIZER bool bitfields.
	(struct cp_declarator): Make KIND a 4-bit field. Make
	PARAMETER_PACK_P a bool bitfield just after KIND.
	* pt.c (uses_parameter_packs): Destroy the pointer set.
	(make_pack_expansion): Ditto.
	(check_for_bare_parameter_packs): Ditto.
	* name-lookup.c (push_to_top_level): Make need_pop a bool value.

2007-03-14  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR c++/31165
	* call.c  (convert_default_arg): Instead of copying the node,
	unshare it.

2007-03-15  Dirk Mueller  <dmueller@suse.de>

	PR c++/30860
	* call.c (convert_conversion_warnings): New..
	(convert_like_real): .. factored out from here.
	(convert_conversion_warnings): Add warning about
	false being converted to NULL in argument passing.

2007-03-14  Dirk Mueller  <dmueller@suse.de>

	* semantics.c (c_finish_if_stmt): Call empty_if_body_warning.
	(finish_do_body): Warn about empty body in do/while statement.

2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* class.c (warn_hidden): Add OPT_Woverloaded_virtual to warning.

2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c/21438
	* typeck.c (build_binary_op): Call warn_for_div_zero instead of
	warning.

2007-03-13  Alexandre Oliva  <aoliva@redhat.com>

	* repo.c (init_repo): Initialize random_seed saved options.
	(finish_repo): Adjust.

2007-03-13  Mark Mitchell  <mark@codesourcery.com>

	PR bootstrap/30899
	* Make-lang.in (doc/g++.1): Use $< to specify the location from
	which to copy.

2007-03-12  Seongbae Park <seongbae.park@gmail.com>

	* decl.c (compute_array_index_type): New warning flag warn_vla.

2007-03-12  Mark Mitchell  <mark@codesourcery.com>

	PR c++/30108
	* call.c (convert_default_arg): Copy non-constant arguments.

2007-03-11  Mark Mitchell  <mark@codesourcery.com>

	PR c++/31038
	* parser.c (cp_parser_postfix_expression): Disallow compound
	literals in constant expressions.

	PR c++/30328
	* semantics.c (finish_typeof): Use unlowered_expr_type.

2007-03-10  Mark Mitchell  <mark@codesourcery.com>

	PR c++/30274
	* cp-tree.h (unlowered_expr_type): New function.
	* typeck.c (is_bitfield_expr_with_lowered_type): Handle
	COMPOUND_EXPR, MODIFY_EXPR, and SAVE_EXPR.
	(unlowered_expr_type): New function.
	(build_unary_op): Disallow predecrements of bool bitfields.
	* call.c (build_conditional_expr): Use unlowered_expr_type.
	* pt.c (type_unification_real): Likewise.

2007-03-09  Douglas Gregor  <doug.gregor@gmail.com>

	PR c++/20599
	* typeck.c (check_return_expr): Check for bare parameter packs.
	(comptypes): Compare template parameter packs and
	type pack expansions.
	* decl.c (grokdeclarator): Deal with the declaration of function
	parameter packs.
	(grokparms): Verify that the (optional) function parameter pack is
	at the end of the parameter list.
	(xref_basetypes): Handle pack expansions in the base class.
	(cp_tree_node_structure): Handle ARGUMENT_PACK_SELECT.
	* cp-tree.def (TYPE_ARGUMENT_PACK): New.
	(NONTYPE_ARGUMENT_PACK): New.
	(TYPE_PACK_EXPANSION): New.
	(EXPR_PACK_EXPANSION): New.
	(ARGUMENT_PACK_SELECT): New.
	* cp-objcp-common.c (cp_tree_size): Compute size of
	(NON)TYPE_ARGUMENT_PACK, (TYPE|EXPR)_PACK_EXPANSION, and
	ARGUMENT_PACK_SELECT.
	* error.c (dump_template_argument): Print template argument packs.
	(dump_template_argument_list): Ditto.
	(dump_template_parameter): Dump `...' for template type parameter
	packs.
	(dump_type): Dump TYPE_PACK_EXPANSION nodes.
	(dump_parameters): Print function parameter packs.
	(dump_template_parms): Print template argument packs.
	(dump_expr): Dump EXPR_PACK_EXPANSION nodes.
	(maybe_warn_variadic_templates): New.
	* operators.def: Add ellipsis operator for EXPR_PACK_EXPANSION.
	* tree.c (cp_walk_subtrees): Walk BASELINK, TYPE_ARGUMENT_PACK,
	NONTYPE_ARGUMENT_PACK, TYPE_PACK_EXPANSION, EXPR_PACK_EXPANSION,
	CAST_EXPR.
	* mangle.c (write_type): Mangle TYPE_PACK_EXPANSION.
	(write_template_arg): Write argument packs as separate arguments.
	* cp-tree.h (struct template_parm_index_s): Add flag that
	indicates that the template parameter is actually a parameter
	pack.
	(struct tree_argument_pack_select): New.
	(enum cp_tree_node_structure_enum): Add TS_CP_ARGUMENT_PACK_SELECT.
	(union lang_tree_node): Add argument_pack_select.
	(FUNCTION_PARAMETER_PACK_P): New.
	(PACK_EXPANSION_P): New.
	(PACK_EXPANSION_PATTERN): New.
	(SET_PACK_EXPANSION_PATTERN): New.
	(PACK_EXPANSION_PARAMETER_PACKS): New.
	(ARGUMENT_PACK_P): New.
	(ARGUMENT_PACK_ARGS): New.
	(SET_ARGUMENT_PACK_ARGS): New.
	(ARGUMENT_PACK_INCOMPLETE_P): New.
	(ARGUMENT_PACK_EXPLICIT_ARGS): New.
	(TEMPLATE_PARM_PARAMETER_PACK): New.
	(TEMPLATE_TYPE_PARAMETER_PACK): New.
	(ARGUMENT_PACK_SELECT_FROM_PACK): New.
	(ARGUMENT_PACK_SELECT_INDEX): New.
	(ARGUMENT_PACK_SELECT_ARG): New.
	(struct cp_declarator): Add parameter_pack_p flag.
	(maybe_warn_variadic_templates): Declare.
	(process_template_parm): Add bool parameter IS_PARAMETER_PACK, to
	indicate a template parameter pack.
	(uses_parameter_packs): Declare.
	(template_parameter_pack_p): Declare.
	(template_parms_variadic_p): Declare.
	(make_pack_expansion): Declare.
	(check_for_bare_parameter_packs): Declare.
	* cxx-pretty-print.c (pp_cxx_unary_expression): Print
	sizeof... expressions.
	(pp_cxx_expression): Print pack expansions and non-type argument
	packs.
	(pp_cxx_exception_specification): Print pack expansions.
	(pp_cxx_direct_declarator): Print ellipsis for parameter packs.
	(pp_cxx_ctor_initializer): Print pack expansions.
	(pp_cxx_type_id): Print pack expansions.
	(pp_cxx_template_argument_list): Print argument packs.
	(pp_cxx_template_parameter): Print ellipsis for template parameter
	packs.
	* pt.c (comp_template_parms): Compare template parameter packs.
	(template_parameter_pack_p): New.
	(template_parms_variadic_p): New.
	(template_args_variadic_p): New.
	(make_ith_pack_parameter_name): New.
	(struct find_parameter_pack_data): New.
	(find_parameter_packs_r): New.
	(uses_parameter_packs): New.
	(make_pack_expansion): New.
	(check_for_bare_parameter_packs): New.
	(expand_template_argument_pack): New.
	(reduce_template_parm_level): Propagate parameter pack flag.
	(process_template_parm): Add is_parameter_pack parameter to state
	when the parameter is actually a parameter pack. Create template
	parameter packs when is_parameter_pack is true.
	(current_template_args): The argument for a template parameter
	pack is an argument pack containing a single pack expansion.
	(process_partial_specialization): When checking that non-type
	argument expressions do not involve template parameters, loop over
	the arguments in argument packs separately.
	(push_template_decl_real): Check that the type of the declaration
	does not have any bare parameter packs. Check that primary
	templates have no more than one parameter pack, and that it comes
	at the end of the template parameter list.
	(convert_template_argument): Handle coercions for pack expansion
	expressions by coercing the pattern then rebuilding the expansion.
	(coerce_template_parms): When coercing the arguments for a
	variadic template, pack "extra" arguments into an argument pack.
	(coerce_template_template_parms): Cannot coerce between parameter
	packs and non-pack parameters.
	(template_args_equal): Compare PACK_EXPANSION_P expressions.
	(comp_template_args): Expand all template arguments packs before
	comparing template argument lists.
	(mangle_class_name_for_template): Make argument packs as separate
	template arguments.
	(for_each_template_parm_r): No need to handle BASELINK.
	(instantiate_class_template): Handle pack expansions in the base
	class list.
	(tsubst_pack_expansion): New.
	(tsubst_template_args): Handle substitutions of argument packs and
	pack expansion into template argument lists.
	(tsubst_decl): Expand function parameter packs into separate
	function parameters.
	(tsubst_arg_types): Expand a type pack expansion into separate
	argument types.
	(tsubst_exception_specification): Handle pack expansions in
	exception specifiers.
	(tsubst): See through ARGUMENT_PACK_SELECT arguments when
	replacing a template parameter with its argument. If we encounter
	a substitution for an argument pack, just return the parameter
	itself.
	(tsubst_copy): sizeof(X...) returns the number of elements in
	parameter pack X.  See through ARGUMENT_PACK_SELECT when the
	PARM_DECL is a parameter pack.
	(tsubst_expr): Expression pack expansions and argument packs
	cannot show up here; they will all be handled through function
	calls, sizeof, and template argument lists.
	(tsubst_copy_and_build): sizeof(X...) returns the number of
	elements in parameter pack X.  Handle pack expansions in TREE_LIST
	and CONSTRUCTOR nodes.
	(fn_type_unification): Handle "incomplete" explicit template
	argument lists that specify some of the arguments for a template
	parameter pack.
	(type_unification_real): Unify arguments against pack expansions.
	(template_parm_level_and_index): New, helper function.
	(unify_pack_expansion): New.
	(unify): Unify argument packs on an argument-by-argument basis,
	handling variadic argument packs as well.
	(more_specialized_fn): Handle unification of function parameter
	packs. All things being equal, prefer non-variadic function
	templates to variadic function templates.
	(more_specialized_class): Prefer the variadic class template
	partial specialization that binds fewer arguments to a parameter
	pack.
	(regenerate_decl_from_template): Expand function parameter packs
	into separate parameters.
	(instantiate_decl): Ditto.
	(tsubst_initializer_list): Handle pack expansions for base-class
	initializers.
	(dependent_type_p_r): Determine dependent types in argument packs
	and pack expansions.
	(value_dependent_expression_p): Determine value-dependence of
	non-type argument packs.
	(dependent_template_arg_p): Handle argument packs.
	* semantics.c (finish_cond): Check for bare parameter packs.
	(finish_expr_stmt): Ditto.
	(finish_for_expr): Ditto.
	(finish_switch_cond): Ditto.
	(finish_mem_initializers): Ditto.
	* name-lookup.c (arg_assoc_type): Handle pack expansions and
	argument packs.
	* decl2.c (cp_build_parm_decl): Mark function parameter packs.
	* parser.c (make_declarator): Declarator is not an expansion.
	(make_pointer_declarator): Transfer parameter pack flag to outer
	declarator.
	(make_reference_declarator): Ditto.
	(make_ptrmem_declarator): Ditto.
	(make_call_declarator): Ditto.
	(make_array_declarator): Ditto.
	(cp_parser_postfix_expression): Allow pack expansion expressions
	in the argument list for a call expression.
	(cp_parser_parenthesized_expression_list): Add new parameter
	ALLOW_EXPANSION_P. When true, parse the ellipsis to mean "expand
	into separate arguments."
	(cp_parser_new_placement): Allow pack expansion expressions.
	(cp_parser_new_initializer): Ditto.
	(cp_parser_mem_initializer_list): Allow ellipsis to create a
	base-class initializer expansion.
	(cp_parser_mem_initializer): Ditto.
	(cp_parser_template_parameter_list): Keep track of whether the
	template parameter is a template parameter pack.
	(cp_parser_template_parameter): Parse the ellipsis to indicate a
	template parameter pack.
	(cp_parser_type_parameter): Ditto.
	(cp_parser_template_argument_list): Parse the ellipsis to indicate
	a pack expansion.
	(cp_parser_direct_declarator): Parse the ellipsis to indicate that
	this declarator is a parameter pack.
	(cp_parser_parameter_declaration): The ellipsis does not end the
	parameter declaration, because it might be a parameter pack. Parse
	the ellipsis to indicate a parameter pack.
	(cp_parser_initializer): Allow pack expansions.
	(cp_parser_initializer_list): Allow ellipsis to create an
	initializer expansion.
	(cp_parser_base_clause): Allow ellipsis to create a base specifier
	expansion.
	(cp_parser_type_id_list): Allow ellipsis to create an exception
	specifier expansion.
	(cp_parser_attribute_list): Don't allow pack expansions.
	(cp_parser_functional_cast): Allow pack expansions.
	(cp_parser_sizeof_operand): Allow ellipsis following "sizeof" to
	compute the length of a parameter pack.
	(cp_parser_next_token_ends_template_argument_p): An ellipsis can
	end a template argument.
	* tree.c (cp_walk_subtrees): Walk BASELINK, TYPE_ARGUMENT_PACK,
	NONTYPE_ARGUMENT_PACK, TYPE_PACK_EXPANSION, EXPR_PACK_EXPANSION,
	CAST_EXPR.

2007-03-09  Dirk Mueller  <dmueller@suse.de>

	* call.c (build_new_op): Call warn_logical_operator.

2007-03-08  Volker Reichelt  <v.reichelt@netcologne.de>

	PR c++/30852
	* semantics.c (finish_offsetof): Handle COMPOUND_EXPR.

	PR c++/30534
	* pt.c (any_template_arguments_need_structural_equality_p):
	Robustify.

2007-03-08  Alexandre Oliva  <aoliva@redhat.com>

	* decl.c (grokdeclarator): Disable warnings for anonymous
	bitfields.

2007-03-05  Volker Reichelt  <v.reichelt@netcologne.de>

	* typeck2.c (readonly_error): Always emit a hard error.
	Remove last argument.
	* cp-tree.h (readonly_error): Adjust prototype.
	* semantics.c (finish_asm_stmt): Adjust call to readonly_error.
	* typeck.c (build_unary_op): Likewise.
	(build_modify_expr): Likewise.

2007-03-04  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/30895
	* tree.c (cp_tree_equal): Properly handle COMPLEX_CST trees.

2007-03-03  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/15787
	* parser.c (struct cp_parser): New IN_IF_STMT.
	(cp_parser_statement_seq_opt): Handle an unexpected 'else',
	returning if parsing the body of an 'if' statement or issuing an
	error and continuing.
	(cp_parser_selection_statement): Set IN_IF_STMT bit when parsing
	body of 'if'.
	(cp_parser_jump_statement): Mask new IN_IF_STMT bit.

2007-03-02  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/28253
	* class.c (update_vtable_entry_for_fn): Properly handle invalid overriders
	for thunks.

2007-03-02  Geoffrey Keating  <geoffk@apple.com>

	* g++spec.c (lang_specific_driver): Add -lstdc++ when compiling
	Objective-C++.  Don't exit early if -shared-libgcc needs to be
	added.

2007-03-02  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c (common_base_type): Delete unused function.

2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>

	* Make-lang.in: Add dummy lang.install-pdf target.

2007-03-01  Simon Baldwin <simonb@google.com>

	PR c++/23689
	* decl.c (check_tag_decl): Added new warning for typedef ignored
	when it precedes an otherwise valid non-typedef declaration.

2007-02-28  Sandra Loosemore  <sandra@codesourcery.com>

	* typeck.c (build_function_call): Store converted arguments
	in a stack-allocated array instead of building a list.
	(convert_arguments): Store arguments in the array passed in as an
	argument, and return the actual number of arguments.
	* call.c (build_call): Delete, and replace with...
	(build_call_n, build_call_a): New.
	(build_op_delete_call): Rewrite to avoid constructing argument lists.
	(build_over_call): Store converted arguments in a stack-allocated
	array instead of building a list.
	(build_cxx_call): Pass arguments in an array instead of as a list.
	(build_java_interface_fn_ref): Rewrite to avoid constructing
	argument lists.
	* tree.h: Update declarations to reflect above changes.
	* method.c (use_thunk): Use a stack-allocated array to hold
	the arguments instead of a list.
	* rtti.c (throw_bad_cast): Update call to cxx_call.
	(throw_bad_typeid): Likewise.
	(build_dynamic_cast_1): Likewise.
	* init.c (build_builtin_delete_call): Use build_call_n.
	* decl.c (expand_static_init): Likewise.
	* except.c (cp_protect_cleanup_actions): Likewise.
	* cp-gimplify.c (genericize_eh_spec_block): Likewise.
	(gimplify_must_not_throw_expr): Likewise.
	(cxx_omp_apply_fn): Use build_call_a.

2007-02-26  Mark Mitchell  <mark@codesourcery.com>

	* semantics.c (expand_or_defer_fn): Call c_record_cdtor_fn.
	* decl2.c (cp_write_gloabl_declarations): Call c_build_cdtor_fns.

2007-02-25  Mark Mitchell  <mark@codesourcery.com>

	* cp-tree.h (static_ctors): Remove.
	* cp-tree.h (static_dtors): Likewise.
	* cp-objcp-common.c (decl_shadowed_for_var_lookup): Adjust for
	refactoring of tree_map hierarchy.
	(decl_shadowed_for_var_insert): Likewise.
	* semantics.c (expand_body): Use c_expand_body.
	(expand_or_defer_fn): Don't update static_ctors or static_dtors.
	* decl2.c (static_ctors): Remove.
	(static_dtors): Likewise.
	(generate_ctor_or_dtor_function): Pass NULL_TREE to
	objc_generate_static_init_call.  Do not call static_[cd]tors.
	(generate_ctor_and_dtor_functions_for_priority): Do not check for
	static_[cd]tors.
	(cp_write_global_declarations): Likewise.

2007-02-23  Richard Guenther  <rguenther@suse.de>

	* class.c (note_name_declared_in_class): Make declaration
	changes meaning a pedwarn.

2007-02-22  Michael Matz  <matz@suse.de>

	PR c++/29433
	* cp-tree.h (TFF_UNQUALIFIED_NAME): New formatting flag.
	* error.c (dump_aggr_type, dump_simple_decl, dump_decl,
	dump_function_decl): Guard emitting outer scopes by new flag.
	* cp-lang.c (cxx_dwarf_name): New function.
	(LANG_HOOKS_DWARF_NAME): Define to cxx_dwarf_name.
	* pt.c (classtype_mangled_name, mangle_class_name_for_template):
	Remove functions.
	(push_template_decl_real, lookup_template_class): Remove calls
	to above functions.

2007-02-19  Mark Mitchell  <mark@codesourcery.com>

	* call.c (build_new_method_call): Ensure that explicit calls of
	destructors have type "void".

2007-02-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* typeck.c (build_binary_op): Replace -Wstring-literal-comparison
	and -Walways-true with -Waddress.
	* cvt.c (convert_to_void): Replace unconditional warning with
	-Waddress.

2007-02-18  Kazu Hirata  <kazu@codesourcery.com>

	* decl.c, tree.c: Fix comment typos.

2007-02-15  Andrew Pinski  <andrew_pinski@playstation.sony.com>

	PR C++/30158
	* semantics.c (finish_stmt_expr_expr): Set TREE_TYPE of the
	statement expression if we had an error mark node.

2007-02-15  Sandra Loosemore  <sandra@codesourcery.com>
	    Brooks Moses  <brooks.moses@codesourcery.com>
	    Lee Millward  <lee.millward@codesourcery.com>

	* cp-tree.def (AGGR_INIT_EXPR): Adjust documentation.
	Change class to tcc_vl_exp.

	* call.c (build_call): Use build_call_list instead
	of build3.
	(build_over_call): Likewise.
	(build_new_method_call): Use build_min_non_dep_call_list
	instead of build_min_non_dep.

	* error.c (dump_call_expr_args): New function.
	(dump_aggr_init_expr_args): New function.
	(dump_expr) <AGGR_INIT_EXPR, CALL_EXPR, INDIRECT_REF>: Use them.
	Update to use new CALL_EXPR and AGGR_INIT_EXPR accessor macros.

	* cvt.c (convert_to_void): Use build_call_array instead
	of build3; use new AGGR_INIT_EXPR accessor macros.

	* mangle.c (write_expression): Use TREE_OPERAND_LENGTH
	instead of TREE_CODE_LENGTH.

	* dump.c (cp_dump_tree) <AGGR_INIT_EXPR>: Update to use new
	AGGR_INIT_EXPR accessor macros.

	* cp-gimplify.c (cp_gimplify_init_expr): Use
	AGGR_INIT_EXPR_SLOT to set the slot operand.

	* cp-tree.h (AGGR_INIT_EXPR_FN): New macro.
	(AGGR_INIT_EXPR_SLOT): New macro.
	(AGGR_INIT_EXPR_ARG): New macro.
	(aggr_init_expr_nargs): New macro.
	(AGGR_INIT_EXPR_ARGP): New macro.
	(aggr_init_expr_arg_iterator): New.
	(init_aggr_init_expr_arg_iterator): New.
	(next_aggr_init_expr_arg): New.
	(first_aggr_init_expr_arg): New.
	(more_aggr_init_expr_args_p): New.
	(FOR_EACH_AGGR_INIT_EXPR_ARG): New.
	(stabilize_aggr_init): New declaration.
	(build_min_non_dep_call_list): Likewise.

	* tree.c (process_aggr_init_operands): New function.
	(build_aggr_init_array) New function.
	(build_cplus_new): Update to use new CALL_EXPR and
	AGGR_INIT_EXPR accessor macros. Replace use of build3 with
	build_aggr_init_array.
	(build_min_non_dep_call_list) New function.
	(build_min_nt): Assert input code parameter is not a variable
	length expression class.
	(build_min, build_min_non_dep): Likewise.
	(cp_tree_equal) <CALL_EXPR>: Iterate through the arguments
	to check for equality instead of recursing. Handle tcc_vl_exp
	tree code classes.
	(stabilize_call): Update to only handle CALL_EXPRs, not
	AGGR_INIT_EXPRs; use new CALL_EXPR accessor macros.
	(stabilize_aggr_init): New function.
	(stabilize_init): Use it.

	* cxx-pretty-print.c (pp_cxx_postfix_expression)
	<AGGR_INIT_EXPR, CALL_EXPR>: Update to use new CALL_EXPR and
	AGGR_INIT_EXPR accessor macros and argument iterators.

	* pt.c (tsubst_copy) <CALL_EXPR>: Replace build_nt with
	build_vl_exp. Iterate through the operands, recursively
	processing each one.
	(tsubst_copy_and_build) <CALL_EXPR>: Update to use new
	CALL_EXPR accessor macros.
	(value_dependent_expression_p) <default>: Handle tcc_vl_exp
	tree code classes. Use TREE_OPERAND_LENGTH instead of
	TREE_CODE_LENGTH.

	* semantics.c (finish_call_expr): Use build_nt_call_list
	instead of build_nt.
	(simplify_aggr_init_expr): Update to use new AGGR_INIT_EXPR
	accessor macros. Use build_call_array to construct the
	CALL_EXPR node instead of build3

	* decl2.c (build_offset_ref_call_from_tree): Use
	build_nt_call_list and build_min_non_dep_call_list instead
	of build_min_nt and build_min_non_dep.

	* parser.c (cp_parser_postfix_expression) <CPP_OPEN_PAREN>:
	Use build_nt_call_list instead of build_min_nt.

2007-02-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/28943
	* call.c (build_conditional_expr): Improve error message.

2007-02-13  Dirk Mueller  <dmueller@suse.de>

	* friend.c (do_friend): Annotate warning about friend
	declarations in templates with OPT_Wnon_template_friend.
	Convert informal message from warning() to inform().

2007-02-12  Simon Martin  <simartin@users.sourceforge.net>
	    Mark Mitchell  <mark@codesourcery.com>

	PR c++/14622
	* pt.c (do_decl_instantiation): Detect type mismatches in explicit
	instantiations for variables.

2007-02-12  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR middle-end/7651
	* cp-gimplify.c (gimplify_expr_stmt): Don't check extra_warnings.
	Check warn_unused_value just once.

2007-02-11  Mark Mitchell  <mark@codesourcery.com>

	PR c++/26988
	* pt.c (determine_specialization): Use skip_artificial_parms_for.
	(fn_type_unificiation): Likewise.
	(get_bindings): Likewise.

o2007-02-06  Mark Mitchell  <mark@codesourcery.com>

	PR target/29487
	* decl.c (finish_function): Use DECL_REPLACEABLE.
	* tree.c (cp_cannot_inline_tree_fn): Likewise.

2007-02-10  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* parser.c (cp_parser_primary_expression): Reformat overly long lines.

2007-02-10  Richard Henderson  <rth@redhat.com>, Jakub Jelinek  <jakub@redhat.com>

	* decl.c (grokvardecl): Don't error if !have_tls.
	(grokdeclarator): Likewise.
	* parser.c (cp_parser_omp_threadprivate): Likewise.

2007-02-07  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30703
	* cp-gimplify.c (cp_genericize_r): Don't dereference invisiref
	parameters and result decls in omp clauses.
	(cxx_omp_privatize_by_reference): Pass also invisiref PARM_DECLs
	by reference.

2007-02-05  Dirk Mueller  <dmueller@suse.de>

	PR bootstrap/30510
	* parser.c (cp_parser_class_specifier): Always initialize bases.

2007-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* cp-tree.h (OMP_ATOMIC_CODE): Delete.
	(OMP_ATOMIC_DEPENDENT_P): Rewrite.
	* pt.c (tsubst_expr): Adjust for new format of dependent OMP_ATOMIC
	expressions.
	* semantics.c (finish_omp_atomic): Store a whole expression node
	in operand 1, and integer_zero_node in operand 0, for dependent
	OMP_ATOMIC.  Rewrite to make flow easier to understand.

2007-02-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* decl.c (grokdeclarator): Use OPT_Wreturn_type instead of 0.

2007-02-04  Kazu Hirata  <kazu@codesourcery.com>

	* class.c, cp-tree.h, decl.c, decl2.c, g++spec.c, init.c,
	parser.c, pt.c, tree.c, typeck.c: Follow spelling conventions.

2007-02-03  Douglas Gregor  <doug.gregor@gmail.com>

	* parser.c (cp_lexer_get_preprocessor_token): Attach the C++0x
	keyword warning to -Wc++0x-compat.

2007-02-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>

	* decl.c (grokdeclarator): Update documentation.

2007-02-02  Jakub Jelinek  <jakub@redhat.com>

	PR c++/30536
	* decl.c (grokdeclarator): If __thread is used together with
	a storage class other than extern and static, clear thread_p
	after issuing diagnostics and fall through to checking the
	storage class.

2007-01-30  Roger Sayle  <roger@eyesopen.com>

	* error.c (dump_type_suffix): Avoid use of cp_build_binary_op when
	calculating the size of an array (to avoid recursive errors).

2007-01-30  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/24745
	* typeck.c (build_binary_op): Fix logic for warning. Move warning
	to -Wpointer-arith.
	* call.c (convert_like_real): Don't warn when converting to
	boolean type.

2007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	* decl.c (pop_label): Replace warning with call to
	warn_for_unused_label.

2007-01-28  Andrew Pinski  <pinskia@gmail.com>

	PR C++/28988
	* semantics.c (finish_pseudo_destructor_expr): Check the
	destrutor name by calling check_dtor_name.

2007-01-24  Douglas Gregor  <dgregor@osl.iu.edu>

	* lex.c (D_CPP0X): Rename.
	(D_CXX0X): To this.
	(reswords): D_CPP0X -> D_CXX0X.
	(init_reswords): Ditto.
	* parser.c (cp_lexer_get_preprocessor_token): Warn about the use
	of C++0x keywords as identifiers.

2007-01-23  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/27492
	* decl.c (duplicate_decls): Don't reset DECL_INVALID_OVERRIDER_P for
	function decls.

2007-01-23  Ian Lance Taylor  <iant@google.com>

	* typeck.c (convert_for_assignment): Only warn about a = b = c
	when converting to bool.

2007-01-23  Roger Sayle  <roger@eyesopen.com>

	* call.c (null_ptr_cst_p): Replace use of TREE_CONSTANT_OVERFLOW with
	TREE_OVERFLOW.
	* typeck.c (ignore_overflows): Remove the remaining uses of
	TREE_CONSTANT_OVERFLOW.

2007-01-20  Jan Hubicka  <jh@suse.cz>

	* decl2.c (start_objects, start_static_storage_duration_function):
	Do not make the functions uninlinable.

2007-01-17  Ian Lance Taylor  <iant@google.com>

	* class.c (add_method): Call VEC_reserve_exact rather than passing
	a negative size to VEC_reserve.

2007-01-11  Simon Martin  <simartin@users.sourceforge.net>

	PR c++/29573
	* tree.c (cp_tree_equal): Properly handle MODOP_EXPR trees.

2007-01-10  Mark Mitchell  <mark@codesourcery.com>

	PR c++/28999
	* decl.c (make_typename_type): If the qualified name is not a
	type, issue an error.
	* parser.c (cp_parser_elaborated_type_specifier): Fix comment
	formatting.

2007-01-08  Geoffrey Keating  <geoffk@apple.com>

	* rtti.c: Include target.h.
	(emit_support_tinfos): If ! targetm.cxx.library_rtti_comdat (),
	don't emit typeinfo for fundamental types as weak.
	* Make-lang.in (cp/rtti.o): Update and correct dependencies.

2007-01-08  Richard Guenther  <rguenther@suse.de>

	* cvt.c (cp_convert_to_pointer): Use build_int_cst_type.

2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>

	* call.c (standard_conversion): Pass flag to
	vector_types_convertible_p to disallow emission of note.
	* typeck.c (convert_for_assignment): Pass flag to
	vector_types_convertible_p to allow emission of note.
	(ptr_reasonably_similar): Pass flag to vector_types_convertible_p
	to disallow emission of note.

2007-01-07  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c++/28986
	* typeck.c (build_binary_op): Call overflow_warning if
	TREE_OVERFLOW_P is true for the result and not for any of the
	operands.

2007-01-06  Lee Millward  <lee.millward@codesourcery.com>

	PR c++/19439
	* class.c (add_method): Don't wait until template
	instantiation time to complain about duplicate methods.

2007-01-05  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>

	PR c/19978
	* semantics.c (finish_unary_op_expr): Warn only if result
	overflowed and operands did not.

2007-01-05  Ian Lance Taylor  <iant@google.com>

	* typeck.c (build_binary_op): Warn about comparing a non-weak
	address to NULL.

2007-01-05  Douglas Gregor  <doug.gregor@gmail.com>

	* pt.c (tsubst): Propagate the need for structural equality checks
	when reducing the level of template parameters.

2007-01-03  Kazu Hirata  <kazu@codesourcery.com>

	* pt.c: Fix a comment typo.

2007-01-02  Ian Lance Taylor  <iant@google.com>

	* semantics.c (maybe_convert_cond): Optionally warn when using an
	assignment as a condition.
	* typeck.c (convert_for_assignment): Optionally warn about
	assigning the result of an assignment to a bool.

2007-01-02  Douglas Gregor  <doug.gregor@gmail.com>

	* pt.c (canonical_template_parms): Correct typo in comment.

2007-01-02  Douglas Gregor  <doug.gregor@gmail.com>

	* typeck.c (structural_comptypes): Renamed from "comptypes".
	(comptypes): Use canonical type information to perform fast type
	comparison. When VERIFY_CANONICAL_TYPES, verify that the
	canonical type comparison returns the same results as we would see
	from the current, structural check. Support COMPARE_STRUCTURAL
	when we need structural checks.
	* decl.c (typename_compare): Fix comment.
	(build_typename_type): TYPENAME_TYPE nodes require structural
	equality checks, because they resolve different based on the
	current class type.
	(make_unbound_class_template): UNBOUND_CLASS_TEMPLATE nodes
	require structural equality checks (for now).
	(build_ptrmemfunc_type): Build the canonical pointer to member
	function type.
	(compute_array_index_type): Whenever we build a new index type
	to represent the size of an array in a template, we need to mark
	this index type as requiring structural equality. This goes for
	arrays with value-dependent sizes with the current ABI, or all
	arrays with ABI-1.
	* tree.c (cplus_array_hash): New.
	(struct cplus_array_info): New.
	(cplus_array_compare): New.
	(cplus_array_htab): New.
	(build_cplus_array_type_1): Use a hash table to cache the array
	types we build. Build the canonical array type for each array
	type.
	(cp_build_qualified_type_real): When building a cv-qualified array
	type, use the hash table of array types and build canonical array
	types as necessary.
	(bind_template_template_parm): BOUND_TEMPLATE_TEMPLATE_PARM nodes
	use structural equality (for now).
	* cp-tree.h (COMPARE_STRUCTURAL): New.
	* pt.c (canonical_template_parms): New.
	(canonical_type_parameter): New.
	(process_template_parm): Find the canonical type parameter.
	(lookup_template_class): When we have named the primary template
	type, set the canonical type for our template class to the primary
	template type. If any of the template arguments need structural
	equality checks, the template class needs structural equality
	checks.
	(tsubst): When reducing the level of a template template
	parameter, we require structural equality tests for the resulting
	parameter because its template parameters have not had their types
	canonicalized. When reducing a template type parameter, find the
	canonical reduced type parameter.
	(any_template_arguments_need_structural_equality_p): New.

