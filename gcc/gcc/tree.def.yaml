---
comment: These nodes contain an array of tree nodes.
node_type_class: tcc_exceptional
node_type_code: tree_vec
node_type_id: TREE_VEC
node_type_op_count: 0

---
comment: Array types in C or Pascal
node_type_class: tcc_type
node_type_code: array_type
node_type_id: ARRAY_TYPE
node_type_op_count: 0

---
comment: The void type in C
node_type_class: tcc_type
node_type_code: void_type
node_type_id: VOID_TYPE
node_type_op_count: 0

---
comment: Contents are in TREE_REAL_CST field.
node_type_class: tcc_constant
node_type_code: real_cst
node_type_id: REAL_CST
node_type_op_count: 0

---
comment: Contents are in TREE_FIXED_CST field.
node_type_class: tcc_constant
node_type_code: fixed_cst
node_type_id: FIXED_CST
node_type_op_count: 0

---
comment: Contents are in TREE_VECTOR_CST_ELTS field.
node_type_class: tcc_constant
node_type_code: vector_cst
node_type_id: VECTOR_CST
node_type_op_count: 0

---
comment: Contents are TREE_STRING_LENGTH and the actual contents of the string.
node_type_class: tcc_constant
node_type_code: string_cst
node_type_id: STRING_CST
node_type_op_count: 0

---
comment: "C unary `*' or Pascal `^'.  One operand, an expression for a pointer."
node_type_class: tcc_reference
node_type_code: indirect_ref
node_type_id: INDIRECT_REF
node_type_op_count: 1

---
comment: The exception object from the runtime.
node_type_class: tcc_expression
node_type_code: exc_ptr_expr
node_type_id: EXC_PTR_EXPR
node_type_op_count: 0

---
comment: The filter object from the runtime.
node_type_class: tcc_expression
node_type_code: filter_expr
node_type_id: FILTER_EXPR
node_type_op_count: 0

---
comment: 'Assignment expression.  Operand 0 is the what to set; 1, the new value.'
node_type_class: tcc_expression
node_type_code: modify_expr
node_type_id: MODIFY_EXPR
node_type_op_count: 2

---
comment: Simple arithmetic.
node_type_class: tcc_binary
node_type_code: plus_expr
node_type_id: PLUS_EXPR
node_type_op_count: 2

---
comment: Division for integer result that rounds the quotient toward zero.
node_type_class: tcc_binary
node_type_code: trunc_div_expr
node_type_id: TRUNC_DIV_EXPR
node_type_op_count: 2

---
comment: Division for integer result that rounds the quotient toward infinity.
node_type_class: tcc_binary
node_type_code: ceil_div_expr
node_type_id: CEIL_DIV_EXPR
node_type_op_count: 2

---
comment: Division for integer result that rounds toward minus infinity.
node_type_class: tcc_binary
node_type_code: floor_div_expr
node_type_id: FLOOR_DIV_EXPR
node_type_op_count: 2

---
comment: Division for integer result that rounds toward nearest integer.
node_type_class: tcc_binary
node_type_code: round_div_expr
node_type_id: ROUND_DIV_EXPR
node_type_op_count: 2

---
comment: Four kinds of remainder that go with the four kinds of division.
node_type_class: tcc_binary
node_type_code: trunc_mod_expr
node_type_id: TRUNC_MOD_EXPR
node_type_op_count: 2

---
comment: Division for real result.
node_type_class: tcc_binary
node_type_code: rdiv_expr
node_type_id: RDIV_EXPR
node_type_op_count: 2

---
comment: Conversion of real to fixed point by truncation.
node_type_class: tcc_unary
node_type_code: fix_trunc_expr
node_type_id: FIX_TRUNC_EXPR
node_type_op_count: 1

---
comment: Conversion of an integer to a real.
node_type_class: tcc_unary
node_type_code: float_expr
node_type_id: FLOAT_EXPR
node_type_op_count: 1

---
comment: Unary negation.
node_type_class: tcc_unary
node_type_code: negate_expr
node_type_id: NEGATE_EXPR
node_type_op_count: 1

---
comment: Bitwise operations.  Operands have same mode as result.
node_type_class: tcc_binary
node_type_code: bit_ior_expr
node_type_id: BIT_IOR_EXPR
node_type_op_count: 2

---
comment: Additional relational operators for floating point unordered.
node_type_class: tcc_comparison
node_type_code: unordered_expr
node_type_id: UNORDERED_EXPR
node_type_op_count: 2

---
comment: These are equivalent to unordered or ...
node_type_class: tcc_comparison
node_type_code: unlt_expr
node_type_id: UNLT_EXPR
node_type_op_count: 2

---
comment: This is the reverse of uneq_expr.
node_type_class: tcc_comparison
node_type_code: ltgt_expr
node_type_id: LTGT_EXPR
node_type_op_count: 2

---
comment: Represents a conversion expected to require no code to be generated.
node_type_class: tcc_unary
node_type_code: nop_expr
node_type_id: NOP_EXPR
node_type_op_count: 1

---
comment: 'Value is same as argument, but guaranteed not an lvalue.'
node_type_class: tcc_unary
node_type_code: non_lvalue_expr
node_type_id: NON_LVALUE_EXPR
node_type_op_count: 1

---
comment: Complex conjugate of operand.  Used only on complex types.
node_type_class: tcc_unary
node_type_code: conj_expr
node_type_id: CONJ_EXPR
node_type_op_count: 1

---
comment: Used to implement `va_arg'.
node_type_class: tcc_expression
node_type_code: va_arg_expr
node_type_id: VA_ARG_EXPR
node_type_op_count: 1

---
comment: Used to represent a local declaration. The operand is DECL_EXPR_DECL.
node_type_class: tcc_statement
node_type_code: decl_expr
node_type_id: DECL_EXPR
node_type_op_count: 1

---
comment: OpenMP clauses.
node_type_class: tcc_exceptional
node_type_code: omp_clause
node_type_id: OMP_CLAUSE
node_type_op_count: 0

---
comment: Extract even/odd fields from vectors.
node_type_class: tcc_binary
node_type_code: vec_extracteven_expr
node_type_id: VEC_EXTRACT_EVEN_EXPR
node_type_op_count: 2

---
comment: Merge input vectors interleaving their fields.
node_type_class: tcc_binary
node_type_code: vec_interleavehigh_expr
node_type_id: VEC_INTERLEAVE_HIGH_EXPR
node_type_op_count: 2

---
comment: OPTIMIZATION_NODE.  Node to store the optimization options.
node_type_class: tcc_exceptional
node_type_code: optimization_node
node_type_id: OPTIMIZATION_NODE
node_type_op_count: 0

---
comment: TARGET_OPTION_NODE.  Node to store the target specific options.
node_type_class: tcc_exceptional
node_type_code: target_option_node
node_type_id: TARGET_OPTION_NODE
node_type_op_count: 0

