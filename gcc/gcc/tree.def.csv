"node_type_id","node_type_code","node_type_class","enumeration_constant","node_type_op_count","comment"
"ARRAY_TYPE","array_type","tcc_type","1","0","Array types in C or Pascal"
"BIT_IOR_EXPR","bit_ior_expr","tcc_binary","21","2","Bitwise operations.  Operands have same mode as result."
"CEIL_DIV_EXPR","ceil_div_expr","tcc_binary","13","2","Division for integer result that rounds the quotient toward infinity."
"CONJ_EXPR","conj_expr","tcc_unary","27","1","Complex conjugate of operand.  Used only on complex types."
"DECL_EXPR","decl_expr","tcc_statement","29","1","Used to represent a local declaration. The operand is DECL_EXPR_DECL."
"EXC_PTR_EXPR","exc_ptr_expr","tcc_expression","8","0","The exception object from the runtime."
"FILTER_EXPR","filter_expr","tcc_expression","9","0","The filter object from the runtime."
"FIXED_CST","fixed_cst","tcc_constant","4","0","Contents are in TREE_FIXED_CST field."
"FIX_TRUNC_EXPR","fix_trunc_expr","tcc_unary","18","1","Conversion of real to fixed point by truncation."
"FLOAT_EXPR","float_expr","tcc_unary","19","1","Conversion of an integer to a real."
"FLOOR_DIV_EXPR","floor_div_expr","tcc_binary","14","2","Division for integer result that rounds toward minus infinity."
"INDIRECT_REF","indirect_ref","tcc_reference","7","1","C unary `*' or Pascal `^'.  One operand, an expression for a pointer."
"LTGT_EXPR","ltgt_expr","tcc_comparison","24","2","This is the reverse of uneq_expr."
"MODIFY_EXPR","modify_expr","tcc_expression","10","2","Assignment expression.  Operand 0 is the what to set; 1, the new value."
"NEGATE_EXPR","negate_expr","tcc_unary","20","1","Unary negation."
"NON_LVALUE_EXPR","non_lvalue_expr","tcc_unary","26","1","Value is same as argument, but guaranteed not an lvalue."
"NOP_EXPR","nop_expr","tcc_unary","25","1","Represents a conversion expected to require no code to be generated."
"OMP_CLAUSE","omp_clause","tcc_exceptional","30","0","OpenMP clauses."
"OPTIMIZATION_NODE","optimization_node","tcc_exceptional","33","0","OPTIMIZATION_NODE.  Node to store the optimization options."
"PLUS_EXPR","plus_expr","tcc_binary","11","2","Simple arithmetic."
"RDIV_EXPR","rdiv_expr","tcc_binary","17","2","Division for real result."
"REAL_CST","real_cst","tcc_constant","3","0","Contents are in TREE_REAL_CST field."
"ROUND_DIV_EXPR","round_div_expr","tcc_binary","15","2","Division for integer result that rounds toward nearest integer."
"STRING_CST","string_cst","tcc_constant","6","0","Contents are TREE_STRING_LENGTH and the actual contents of the string."
"TARGET_OPTION_NODE","target_option_node","tcc_exceptional","34","0","TARGET_OPTION_NODE.  Node to store the target specific options."
"TREE_VEC","tree_vec","tcc_exceptional","0","0","These nodes contain an array of tree nodes."
"TRUNC_DIV_EXPR","trunc_div_expr","tcc_binary","12","2","Division for integer result that rounds the quotient toward zero."
"TRUNC_MOD_EXPR","trunc_mod_expr","tcc_binary","16","2","Four kinds of remainder that go with the four kinds of division."
"UNLT_EXPR","unlt_expr","tcc_comparison","23","2","These are equivalent to unordered or ..."
"UNORDERED_EXPR","unordered_expr","tcc_comparison","22","2","Additional relational operators for floating point unordered."
"VA_ARG_EXPR","va_arg_expr","tcc_expression","28","1","Used to implement `va_arg'."
"VECTOR_CST","vector_cst","tcc_constant","5","0","Contents are in TREE_VECTOR_CST_ELTS field."
"VEC_EXTRACT_EVEN_EXPR","vec_extracteven_expr","tcc_binary","31","2","Extract even/odd fields from vectors."
"VEC_INTERLEAVE_HIGH_EXPR","vec_interleavehigh_expr","tcc_binary","32","2","Merge input vectors interleaving their fields."
"VOID_TYPE","void_type","tcc_type","2","0","The void type in C"
